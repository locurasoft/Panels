<?xml version="1.0" encoding="UTF-8"?>

<panel name="Behringer Modulizer 1200DSP" panelShowDialogs="1" panelMessageTime="10000"
       panelAuthorName="Pascal Collberg" panelAuthorEmail="packe01@gmail.com"
       panelAuthorUrl="" panelAuthorDesc="" panelVersionMajor="1" panelVersionMinor="0"
       panelVersionName="Hell-O-Kitty" panelVendor="" panelDevice=""
       panelMidiSnapshotAfterLoad="0" panelMidiSnapshotAfterProgramChange="0"
       panelMidiSnapshotDelay="10" panelMidiSnapshotShowProgress="0"
       panelMidiInputChannelDevice="1" panelMidiInputDevice="-- None"
       panelMidiControllerChannelDevice="1" panelMidiControllerDevice="-- None"
       panelMidiOutputChannelDevice="1" panelMidiOutputDevice="Microsoft GS Wavetable Synth"
       panelMidiInputFromHost="0" panelMidiInputChannelHost="1" panelMidiOutputToHost="0"
       panelMidiOutputChannelHost="1" panelMidiThruH2H="0" panelMidiThruH2HChannelize="0"
       panelMidiThruH2D="0" panelMidiThruH2DChannelize="0" panelMidiThruD2D="0"
       panelMidiThruD2DChannelize="0" panelMidiThruD2H="0" panelMidiThruD2HChannelize="0"
       panelMidiRealtimeIgnore="1" panelMidiInputThreadPriority="7"
       panelMidiProgram="0" panelMidiBankLsb="0" panelMidiBankMsb="0"
       panelMidiSendProgramChangeOnLoad="0" panelMidiProgramCalloutOnprogramChange="0"
       panelMidiMatchCacheSize="32" panelMidiGlobalDelay="0" panelMidiPauseOut="0"
       panelMidiPauseIn="0" panelOSCEnabled="0" panelOSCPort="7770"
       panelOSCProtocol="0" luaPanelMidiChannelChanged="-- None" luaPanelMidiReceived="-- None"
       luaPanelMidiMultiReceived="-- None" luaPanelLoaded="-- None"
       luaPanelBeforeLoad="onPanelBeforeLoad" luaPanelSaved="-- None"
       luaPanelResourcesLoaded="-- None" luaPanelProgramChanged="-- None"
       luaPanelGlobalChanged="-- None" luaPanelMessageHandler="-- None"
       luaPanelModulatorValueChanged="-- None" luaPanelSaveState="-- None"
       luaPanelRestoreState="-- None" luaPanelMidiSnapshotPost="-- None"
       luaPanelMidiSnapshotPre="-- None" luaAudioProcessBlock="-- None"
       luaPanelOSCReceived="-- None" panelFilePath="C:\ctrlr\Panels\pascalc\BehringerModulizer1200DSP\Behringer-Modulizer-1200DSP.panel"
       panelUID="8.Y5DlGNj.j1C" panelInstanceUID="iizs" panelInstanceManufacturerID="2trQ"
       panelModulatorListColumns="&lt;TABLELAYOUT sortedCol=&quot;611&quot; sortForwards=&quot;1&quot;&gt;&lt;COLUMN id=&quot;611&quot; visible=&quot;1&quot; width=&quot;84&quot;/&gt;&lt;COLUMN id=&quot;1&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;610&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;612&quot; visible=&quot;1&quot; width=&quot;84&quot;/&gt;&lt;COLUMN id=&quot;122&quot; visible=&quot;1&quot; width=&quot;68&quot;/&gt;&lt;COLUMN id=&quot;126&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;127&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;134&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;554&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;551&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;555&quot; visible=&quot;1&quot; width=&quot;84&quot;/&gt;&lt;COLUMN id=&quot;18&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;COLUMN id=&quot;19&quot; visible=&quot;1&quot; width=&quot;53&quot;/&gt;&lt;/TABLELAYOUT&gt;"
       panelModulatorListCsvDelimiter="," panelModulatorListXmlRoot="ctrlrModulatorList"
       panelModulatorListXmlModulator="ctrlrModulator" panelModulatorListSortOption="1"
       panelGlobalVariables="0:0:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1"
       panelResources="-- None" panelPropertyDisplayIDs="0" ctrlrMenuItemBackgroundColour="ffffffff"
       ctrlrMenuItemTextColour="ff000000" ctrlrMenuItemHighlightedTextColour="ffffffff"
       ctrlrMenuItemHighlightColour="ff4364ff" ctrlrMenuItemFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
       ctrlrMenuItemSeparatorColour="44000000" ctrlrMenuItemHeaderColour="ff000000"
       ctrlrMenuBarBackgroundColour1="fff7f7f7" ctrlrMenuBarBackgroundColour2="ffcccccc"
       ctrlrMenuBarTextColour="ff000000" ctrlrMenuBarHighlightedTextColour="ffffffff"
       ctrlrMenuBarHighlightColour="ff4364ff" ctrlrMenuBarFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
       ctrlrUseEditorWrapper="0" panelIndex="1" uiPanelModulatorListViewTree="0">
  <uiWindowManager>
    <uiChildWindow uiChildWindowName="LuaMethodEditor" uiChildWindowState="fs 0 0 800 500">
      <uiChildWindowContentState luaMethodEditor="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;OPEN id=&quot;LUA&quot; scrollPos=&quot;0&quot;&gt;&#13;&#10;  &lt;OPEN id=&quot;generic&quot;/&gt;&#13;&#10;  &lt;OPEN id=&quot;controller&quot;&gt;&#13;&#10;    &lt;OPEN id=&quot;behringermodulizer&quot;/&gt;&#13;&#10;  &lt;/OPEN&gt;&#13;&#10;  &lt;SELECTED id=&quot;/LUA/controller/onPanelBeforeLoad&quot;/&gt;&#13;&#10;&lt;/OPEN&gt;&#13;&#10;;34865e761a97487ca02300efb7c80933:bf9d540ba2f84531a911ac12bdc95c4c"/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="ModulatorList" uiChildWindowState="516 191 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LayerEditor" uiChildWindowState="400 180 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
  </uiWindowManager>
  <midiLibrary uuid="0be2a0eac8d8463bb8e2f110b7f6e2da" luaTransInfo="-- None"
               midiLibraryParameterIndexProperty="modulatorCustomIndex" midiLibraryMidiProgramChangeControl="0"
               midiLibrarySendSnapAfterPChg="0" midiLibraryDefaultBankName="New Bank - %H:%M:%S"
               midiLibraryDefaultProgramName="New Program - %H:%M:%S" midiLibraryDefaultSnapshotName="Snapshot - %H:%M:%S"
               midiLibraryCustomRequests="">
    <midiLibrarySnapshots name="Snapshots"/>
    <midiLibraryFirmware name="Firmware"/>
    <midiLibraryEditBuffer name="Edit buffer"/>
    <midiLibraryTransactions name="Transactions"/>
  </midiLibrary>
  <luaManager>
    <luaManagerMethods>
      <luaMethodGroup name="Built-In" uuid="57dfb155adbb435b8e546a6f0cf64175">
        <luaMethod luaMethodName="table_dump" luaMethodCode="-- @1.1&#10;--&#10;-- Print table contents&#10;--&#10;function table_dump(table)&#10;&#9;for key,value in ipairs(table) do&#10;&#9;&#9;_DBG (&quot;KEY= [&quot;..key..&quot;]&quot;)&#10;&#10;&#9;&#9;if (type(value) == &quot;table&quot;) then&#10;&#9;&#9;&#9;table_dump(value)&#10;&#9;&#9;elseif (type(value) == &quot;nil&quot;) then&#10;&#9;&#9;&#9;_DBG (&quot; = NIL&quot;)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;what (value)&#10;&#9;&#9;end&#10;&#9;end&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000001"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="what" luaMethodCode="-- @1.1&#10;--&#10;-- Print methods for an object&#10;--&#10;function what(o)&#10;&#9;info = class_info(o)&#10;&#9;if info ~= nil then&#10;&#9;&#9;ret = &quot;Object type [&quot; .. info.name .. &quot;]\n-----------------------------------------------------------------\n\n&quot;..&quot;Members:\n&quot;&#10;&#10;&#9;&#9;if info.name == &quot;table&quot; then&#10;&#9;&#9;&#9;table_dump(o)&#10;&#9;&#9;end&#10;&#10;&#9;&#9;for k, v in pairs(info.methods) do&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#10;&#9;&#9;end&#10;&#9;&#9;ret = ret .. &quot;\n\nAttributes:\n&quot;&#10;&#9;&#9;for k, v in pairs(info.attributes) do&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#10;&#9;&#9;end&#10;&#9;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;end&#10;&#10;&#9;console (ret)&#10;&#9;return ret&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000002"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="how" luaMethodCode="-- @1.1&#10;--&#10;-- Print all available classes&#10;--&#10;function how()&#10;&#9;ret = &quot;Available classes:\n&quot;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;for i,v in ipairs(class_names()) do&#10;&#9;&#9;ret = ret .. &quot;\t&quot;.. v .. &quot;\n&quot;&#10;&#9;end&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;console (J(ret))&#10;&#9;return ret&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000003"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="json4lua" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- JSON4Lua: JSON encoding / decoding support for the Lua language.&#13;&#10;-- json Module.&#13;&#10;-- Author: Craig Mason-Jones&#13;&#10;-- Homepage: http://json.luaforge.net/&#13;&#10;-- Version: 0.9.40&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;-- Please see LICENCE.txt for details.&#13;&#10;--&#13;&#10;-- USAGE:&#13;&#10;-- This module exposes two functions:&#13;&#10;--   encode(o)&#13;&#10;--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.&#13;&#10;--   decode(json_string)&#13;&#10;--     Returns a Lua object populated with the data encoded in the JSON string json_string.&#13;&#10;--&#13;&#10;-- REQUIREMENTS:&#13;&#10;--   compat-5.1 if using Lua 5.0&#13;&#10;--&#13;&#10;-- CHANGELOG&#13;&#10;--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). &#13;&#10;--          Fixed Lua 5.1 compatibility issues.&#13;&#10;--   &#9;&#9;Introduced json.null to have null values in associative arrays.&#13;&#10;--          encode() performance improvement (more than 50%) through table.concat rather than ..&#13;&#10;--          Introduced decode ability to ignore /**/ comments in the JSON string.&#13;&#10;--   0.9.10 Fix to array encoding / decoding to correctly manage nil/null values in arrays.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;json&quot;)&#13;&#10;&#13;&#10;-- Public functions&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;local decode_scanArray&#13;&#10;local decode_scanComment&#13;&#10;local decode_scanConstant&#13;&#10;local decode_scanNumber&#13;&#10;local decode_scanObject&#13;&#10;local decode_scanString&#13;&#10;local decode_scanWhitespace&#13;&#10;local encodeString&#13;&#10;local isArray&#13;&#10;local isEncodable&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;--- Encodes an arbitrary Lua object / variable.&#13;&#10;-- @param v The Lua object / variable to be JSON encoded.&#13;&#10;-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)&#13;&#10;function encode (v)&#13;&#10;  -- Handle nil values&#13;&#10;  if v==nil then&#13;&#10;    return &quot;null&quot;&#13;&#10;  end&#13;&#10;  &#13;&#10;  local vtype = base.type(v)  &#13;&#10;&#13;&#10;  -- Handle strings&#13;&#10;  if vtype=='string' then    &#13;&#10;    return '&quot;' .. encodeString(v) .. '&quot;'&#9;    -- Need to handle encoding in string&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle booleans&#13;&#10;  if vtype=='number' or vtype=='boolean' then&#13;&#10;    return base.tostring(v)&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle tables&#13;&#10;  if vtype=='table' then&#13;&#10;    local rval = {}&#13;&#10;    -- Consider arrays separately&#13;&#10;    local bArray, maxCount = isArray(v)&#13;&#10;    if bArray then&#13;&#10;      for i = 1,maxCount do&#13;&#10;        table.insert(rval, encode(v[i]))&#13;&#10;      end&#13;&#10;    else&#9;-- An object, not an array&#13;&#10;      for i,j in base.pairs(v) do&#13;&#10;        if isEncodable(i) and isEncodable(j) then&#13;&#10;          table.insert(rval, '&quot;' .. encodeString(i) .. '&quot;:' .. encode(j))&#13;&#10;        end&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if bArray then&#13;&#10;      return '[' .. table.concat(rval,',') ..']'&#13;&#10;    else&#13;&#10;      return '{' .. table.concat(rval,',') .. '}'&#13;&#10;    end&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle null values&#13;&#10;  if vtype=='function' and v==null then&#13;&#10;    return 'null'&#13;&#10;  end&#13;&#10;  &#13;&#10;  base.assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. base.tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.&#13;&#10;-- @param s The string to scan.&#13;&#10;-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.&#13;&#10;-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,&#13;&#10;-- and the position of the first character after&#13;&#10;-- the scanned JSON object.&#13;&#10;function decode(s, startPos)&#13;&#10;  startPos = startPos and startPos or 1&#13;&#10;  startPos = decode_scanWhitespace(s,startPos)&#13;&#10;  base.assert(startPos&lt;=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')&#13;&#10;  local curChar = string.sub(s,startPos,startPos)&#13;&#10;  -- Object&#13;&#10;  if curChar=='{' then&#13;&#10;    return decode_scanObject(s,startPos)&#13;&#10;  end&#13;&#10;  -- Array&#13;&#10;  if curChar=='[' then&#13;&#10;    return decode_scanArray(s,startPos)&#13;&#10;  end&#13;&#10;  -- Number&#13;&#10;  if string.find(&quot;+-0123456789.e&quot;, curChar, 1, true) then&#13;&#10;    return decode_scanNumber(s,startPos)&#13;&#10;  end&#13;&#10;  -- String&#13;&#10;  if curChar==[[&quot;]] or curChar==[[']] then&#13;&#10;    return decode_scanString(s,startPos)&#13;&#10;  end&#13;&#10;  if string.sub(s,startPos,startPos+1)=='/*' then&#13;&#10;    return decode(s, decode_scanComment(s,startPos))&#13;&#10;  end&#13;&#10;  -- Otherwise, it must be a constant&#13;&#10;  return decode_scanConstant(s,startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- The null function allows one to specify a null value in an associative array (which is otherwise&#13;&#10;-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null }&#13;&#10;function null()&#13;&#10;  return null -- so json.null() will also return null ;-)&#13;&#10;end&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Internal, PRIVATE functions.&#13;&#10;-- Following a Python-like convention, I have prefixed all these 'PRIVATE'&#13;&#10;-- functions with an underscore.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;--- Scans an array from JSON into a Lua object&#13;&#10;-- startPos begins at the start of the array.&#13;&#10;-- Returns the array and the next starting position&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position for the scan.&#13;&#10;-- @return table, int The scanned array as a table, and the position of the next character to scan.&#13;&#10;function decode_scanArray(s,startPos)&#13;&#10;  local array = {}&#9;-- The return value&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )&#13;&#10;  startPos = startPos + 1&#13;&#10;  -- Infinite loop for array elements&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen,'JSON String ended unexpectedly scanning array.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar==']') then&#13;&#10;      return array, startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON String ended unexpectedly scanning array.')&#13;&#10;    object, startPos = decode(s,startPos)&#13;&#10;    table.insert(array,object)&#13;&#10;  until false&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a comment and discards the comment.&#13;&#10;-- Returns the position of the next character following the comment.&#13;&#10;-- @param string s The JSON string to scan.&#13;&#10;-- @param int startPos The starting position of the comment&#13;&#10;function decode_scanComment(s, startPos)&#13;&#10;  base.assert( string.sub(s,startPos,startPos+1)=='/*', &quot;decode_scanComment called but comment does not start at position &quot; .. startPos)&#13;&#10;  local endPos = string.find(s,'*/',startPos+2)&#13;&#10;  base.assert(endPos~=nil, &quot;Unterminated comment in string at &quot; .. startPos)&#13;&#10;  return endPos+2  &#13;&#10;end&#13;&#10;&#13;&#10;--- Scans for given constants: true, false or null&#13;&#10;-- Returns the appropriate Lua type, and the position of the next character to read.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position in the string at which to start scanning.&#13;&#10;-- @return object, int The object (true, false or nil) and the position at which the next character should be &#13;&#10;-- scanned.&#13;&#10;function decode_scanConstant(s, startPos)&#13;&#10;  local consts = { [&quot;true&quot;] = true, [&quot;false&quot;] = false, [&quot;null&quot;] = nil }&#13;&#10;  local constNames = {&quot;true&quot;,&quot;false&quot;,&quot;null&quot;}&#13;&#10;&#13;&#10;  for i,k in base.pairs(constNames) do&#13;&#10;    --print (&quot;[&quot; .. string.sub(s,startPos, startPos + string.len(k) -1) ..&quot;]&quot;, k)&#13;&#10;    if string.sub(s,startPos, startPos + string.len(k) -1 )==k then&#13;&#10;      return consts[k], startPos + string.len(k)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  base.assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a number from the JSON encoded string.&#13;&#10;-- (in fact, also is able to scan numeric +- eqns, which is not&#13;&#10;-- in the JSON spec.)&#13;&#10;-- Returns the number, and the position of the next character&#13;&#10;-- after the number.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position at which to start scanning.&#13;&#10;-- @return number, int The extracted number and the position of the next character to scan.&#13;&#10;function decode_scanNumber(s,startPos)&#13;&#10;  local endPos = startPos+1&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local acceptableChars = &quot;+-0123456789.e&quot;&#13;&#10;  while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)&#13;&#10;&#9;and endPos&lt;=stringLen&#13;&#10;&#9;) do&#13;&#10;    endPos = endPos + 1&#13;&#10;  end&#13;&#10;  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)&#13;&#10;  local stringEval = base.loadstring(stringValue)&#13;&#10;  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)&#13;&#10;  return stringEval(), endPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON object into a Lua object.&#13;&#10;-- startPos begins at the start of the object.&#13;&#10;-- Returns the object and the next starting position.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return table, int The scanned object as a table and the position of the next character to scan.&#13;&#10;function decode_scanObject(s,startPos)&#13;&#10;  local object = {}&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local key, value&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)&#13;&#10;  startPos = startPos + 1&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly while scanning object.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar=='}') then&#13;&#10;      return object,startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly scanning object.')&#13;&#10;    -- Scan the key&#13;&#10;    key, startPos = decode(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    value, startPos = decode(s,startPos)&#13;&#10;    object[key]=value&#13;&#10;  until false&#9;-- infinite loop while key-value pairs are found&#13;&#10;end&#13;&#10;&#13;&#10;-- START SoniEx2&#13;&#10;-- Initialize some things used by decode_scanString&#13;&#10;-- You know, for efficiency&#13;&#10;local escapeSequences = {&#13;&#10;  [&quot;\\t&quot;] = &quot;\t&quot;,&#13;&#10;  [&quot;\\f&quot;] = &quot;\f&quot;,&#13;&#10;  [&quot;\\r&quot;] = &quot;\r&quot;,&#13;&#10;  [&quot;\\n&quot;] = &quot;\n&quot;,&#13;&#10;  [&quot;\\b&quot;] = &quot;\b&quot;&#13;&#10;}&#13;&#10;base.setmetatable(escapeSequences, {__index = function(t,k)&#13;&#10;  -- skip &quot;\&quot; aka strip escape&#13;&#10;  return string.sub(k,2)&#13;&#10;end})&#13;&#10;-- END SoniEx2&#13;&#10;&#13;&#10;--- Scans a JSON string from the opening inverted comma or single quote to the&#13;&#10;-- end of the string.&#13;&#10;-- Returns the string extracted as a Lua string,&#13;&#10;-- and the position of the next non-string character&#13;&#10;-- (after the closing inverted comma or single quote).&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return string, int The extracted string as a Lua string, and the next character to parse.&#13;&#10;function decode_scanString(s,startPos)&#13;&#10;  base.assert(startPos, 'decode_scanString(..) called without start position')&#13;&#10;  local startChar = string.sub(s,startPos,startPos)&#13;&#10;  -- START SoniEx2&#13;&#10;  -- PS: I don't think single quotes are valid JSON&#13;&#10;  base.assert(startChar == [[&quot;]] or startChar == [[']],'decode_scanString called for a non-string')&#13;&#10;  --base.assert(startPos, &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; for string at position &quot; .. oldStart)&#13;&#10;  local t = {}&#13;&#10;  local i,j = startPos,startPos&#13;&#10;  while string.find(s, startChar, j+1) ~= j+1 do&#13;&#10;    local oldj = j&#13;&#10;    i,j = string.find(s, &quot;\\.&quot;, j+1)&#13;&#10;    local x,y = string.find(s, startChar, oldj+1)&#13;&#10;    if not i or x &lt; i then&#13;&#10;      base.print(s, startPos, string.sub(s,startPos,oldj))&#13;&#10;      i,j = x,y-1&#13;&#10;      if not x then base.print(s, startPos, string.sub(s,startPos,oldj)) end&#13;&#10;    end&#13;&#10;    table.insert(t, string.sub(s, oldj+1, i-1))&#13;&#10;    if string.sub(s, i, j) == &quot;\\u&quot; then&#13;&#10;      local a = string.sub(s,j+1,j+4)&#13;&#10;      j = j + 4&#13;&#10;      local n = base.tonumber(a, 16)&#13;&#10;      base.assert(n, &quot;String decoding failed: bad Unicode escape &quot; .. a .. &quot; at position &quot; .. i .. &quot; : &quot; .. j)&#13;&#10;      -- math.floor(x/2&#94;y) == lazy right shift&#13;&#10;      -- a % 2&#94;b == bitwise_and(a, (2&#94;b)-1)&#13;&#10;      -- 64 = 2&#94;6&#13;&#10;      -- 4096 = 2&#94;12 (or 2&#94;6 * 2&#94;6)&#13;&#10;      local x&#13;&#10;      if n &lt; 0x80 then&#13;&#10;        x = string.char(n % 0x80)&#13;&#10;      elseif n &lt; 0x800 then&#13;&#10;        -- [110x xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xC0 + (math.floor(n/64) % 0x20), 0x80 + (n % 0x40))&#13;&#10;      else&#13;&#10;        -- [1110 xxxx] [10xx xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xE0 + (math.floor(n/4096) % 0x10), 0x80 + (math.floor(n/64) % 0x40), 0x80 + (n % 0x40))&#13;&#10;      end&#13;&#10;      table.insert(t, x)&#13;&#10;    else&#13;&#10;      table.insert(t, escapeSequences[string.sub(s, i, j)])&#13;&#10;    end&#13;&#10;  end&#13;&#10;  table.insert(t,string.sub(j, j+1))&#13;&#10;  base.assert(string.find(s, startChar, j+1), &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; at position &quot; .. j .. &quot;(for string at position &quot; .. startPos .. &quot;)&quot;)&#13;&#10;  return table.concat(t,&quot;&quot;), j+2&#13;&#10;  -- END SoniEx2&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON string skipping all whitespace from the current start position.&#13;&#10;-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.&#13;&#10;-- @param s The string being scanned&#13;&#10;-- @param startPos The starting position where we should begin removing whitespace.&#13;&#10;-- @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string&#13;&#10;-- was reached.&#13;&#10;function decode_scanWhitespace(s,startPos)&#13;&#10;  local whitespace=&quot; \n\r\t&quot;&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  and startPos &lt;= stringLen) do&#13;&#10;    startPos = startPos + 1&#13;&#10;  end&#13;&#10;  return startPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Encodes a string to be JSON-compatible.&#13;&#10;-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-)&#13;&#10;-- @param s The string to return as a JSON encoded (i.e. backquoted string)&#13;&#10;-- @return The string appropriately escaped.&#13;&#10;&#13;&#10;local escapeList = {&#13;&#10;    ['&quot;']  = '\\&quot;',&#13;&#10;    ['\\'] = '\\\\',&#13;&#10;    ['/']  = '\\/', &#13;&#10;    ['\b'] = '\\b',&#13;&#10;    ['\f'] = '\\f',&#13;&#10;    ['\n'] = '\\n',&#13;&#10;    ['\r'] = '\\r',&#13;&#10;    ['\t'] = '\\t'&#13;&#10;}&#13;&#10;&#13;&#10;function encodeString(s)&#13;&#10; return s:gsub(&quot;.&quot;, function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat&#13;&#10;end&#13;&#10;&#13;&#10;-- Determines whether the given Lua type is an array or a table / dictionary.&#13;&#10;-- We consider any table an array if it has indexes 1..n for its n items, and no&#13;&#10;-- other data in the table.&#13;&#10;-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...&#13;&#10;-- @param t The table to evaluate as an array&#13;&#10;-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,&#13;&#10;-- the second returned value is the maximum&#13;&#10;-- number of indexed elements in the array. &#13;&#10;function isArray(t)&#13;&#10;  -- Next we count all the elements, ensuring that any non-indexed elements are not-encodable &#13;&#10;  -- (with the possible exception of 'n')&#13;&#10;  local maxIndex = 0&#13;&#10;  for k,v in base.pairs(t) do&#13;&#10;    if (base.type(k)=='number' and math.floor(k)==k and 1&lt;=k) then&#9;-- k,v is an indexed pair&#13;&#10;      if (not isEncodable(v)) then return false end&#9;-- All array elements must be encodable&#13;&#10;      maxIndex = math.max(maxIndex,k)&#13;&#10;    else&#13;&#10;      if (k=='n') then&#13;&#10;        if v ~= table.getn(t) then return false end  -- False if n does not hold the number of elements&#13;&#10;      else -- Else of (k=='n')&#13;&#10;        if isEncodable(v) then return false end&#13;&#10;      end  -- End of (k~='n')&#13;&#10;    end -- End of k,v not an indexed pair&#13;&#10;  end  -- End of loop across all pairs&#13;&#10;  return true, maxIndex&#13;&#10;end&#13;&#10;&#13;&#10;--- Determines whether the given Lua object / table / variable can be JSON encoded. The only&#13;&#10;-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.&#13;&#10;-- In this implementation, all other types are ignored.&#13;&#10;-- @param o The object to examine.&#13;&#10;-- @return boolean True if the object should be JSON encoded, false if it should be ignored.&#13;&#10;function isEncodable(o)&#13;&#10;  local t = base.type(o)&#13;&#10;  return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table') or (t=='function' and o==null) &#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000004"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="debugger.lua" luaMethodCode="--{{{  history&#10;&#10;--15/03/06 DCN Created based on RemDebug&#10;--28/04/06 DCN Update for Lua 5.1&#10;--01/06/06 DCN Fix command argument parsing&#10;--             Add step/over N facility&#10;--             Add trace lines facility&#10;--05/06/06 DCN Add trace call/return facility&#10;--06/06/06 DCN Make it behave when stepping through the creation of a coroutine&#10;--06/06/06 DCN Integrate the simple debugger into the main one&#10;--07/06/06 DCN Provide facility to step into coroutines&#10;--13/06/06 DCN Fix bug that caused the function environment to get corrupted with the global one&#10;--14/06/06 DCN Allow 'sloppy' file names when setting breakpoints&#10;--04/08/06 DCN Allow for no space after command name&#10;--11/08/06 DCN Use io.write not print&#10;--30/08/06 DCN Allow access to array elements in 'dump'&#10;--10/10/06 DCN Default to breakfile for all commands that require a filename and give '-'&#10;--06/12/06 DCN Allow for punctuation characters in DUMP variable names&#10;--03/01/07 DCN Add pause on/off facility&#10;--19/06/07 DCN Allow for duff commands being typed in the debugger (thanks to Michael.Bringmann@lsi.com)&#10;--             Allow for case sensitive file systems               (thanks to Michael.Bringmann@lsi.com)&#10;--04/08/09 DCN Add optional line count param to pause&#10;--05/08/09 DCN Reset the debug hook in Pause() even if we think we're started&#10;--30/09/09 DCN Re-jig to not use co-routines (makes debugging co-routines awkward)&#10;--01/10/09 DCN Add ability to break on reaching any line in a file&#10;--24/07/13 TWW Added code for emulating setfenv/getfenv in Lua 5.2 as per&#10;--             http://lua-users.org/lists/lua-l/2010-06/msg00313.html&#10;--25/07/13 TWW Copied Alex Parrill's fix for errors when tracing back across a C frame&#10;--             (https://github.com/ColonelThirtyTwo/clidebugger, 26/01/12)&#10;--25/07/13 DCN Allow for windows and unix file name conventions in has_breakpoint&#10;--26/07/13 DCN Allow for \ being interpreted as an escape inside a [] pattern in 5.2&#10;&#10;--}}}&#10;--{{{  description&#10;&#10;--A simple command line debug system for Lua written by Dave Nichols of&#10;--Match-IT Limited. Its public domain software. Do with it as you wish.&#10;&#10;--This debugger was inspired by:&#10;-- RemDebug 1.0 Beta&#10;-- Copyright Kepler Project 2005 (http://www.keplerproject.org/remdebug)&#10;&#10;--Usage:&#10;--  require('debugger')        --load the debug library&#10;--  pause(message)             --start/resume a debug session&#10;&#10;--An assert() failure will also invoke the debugger.&#10;&#10;--}}}&#10;&#10;local IsWindows = string.find(string.lower(os.getenv('OS') or ''),'&#94;windows')&#10;&#10;local coro_debugger&#10;local events = { BREAK = 1, WATCH = 2, STEP = 3, SET = 4 }&#10;breakpoints = {}&#10;local watches = {}&#10;local step_into   = false&#10;local step_over   = false&#10;local step_lines  = 0&#10;local step_level  = {main=0}&#10;local stack_level = {main=0}&#10;local trace_level = {main=0}&#10;local trace_calls = false&#10;local trace_returns = false&#10;local trace_lines = false&#10;local ret_file, ret_line, ret_name&#10;local current_thread = 'main'&#10;local started = false&#10;local pause_off = false&#10;local _g      = _G&#10;local cocreate, cowrap = coroutine.create, coroutine.wrap&#10;local pausemsg = 'pause'&#10;&#10;--{{{  make Lua 5.2 compatible&#10;&#10;if not setfenv then -- Lua 5.2&#10;  --[[&#10;  As far as I can see, the only missing detail of these functions (except&#10;  for occasional bugs) to achieve 100% compatibility is the case of&#10;  'getfenv' over a function that does not have an _ENV variable (that is,&#10;  it uses no globals).&#10;&#10;  We could use a weak table to keep the environments of these functions&#10;  when set by setfenv, but that still misses the case of a function&#10;  without _ENV that was not subjected to setfenv.&#10;&#10;  -- Roberto&#10;  ]]--&#10;&#10;  setfenv = setfenv or function(f, t)&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#10;    local name&#10;    local up = 0&#10;    repeat&#10;      up = up + 1&#10;      name = debug.getupvalue(f, up)&#10;    until name == '_ENV' or name == nil&#10;    if name then&#10;      debug.upvaluejoin(f, up, function() return name end, 1) -- use unique upvalue&#10;      debug.setupvalue(f, up, t)&#10;    end&#10;  end&#10;&#10;  getfenv = getfenv or function(f)&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#10;    local name, val&#10;    local up = 0&#10;    repeat&#10;      up = up + 1&#10;      name, val = debug.getupvalue(f, up)&#10;    until name == '_ENV' or name == nil&#10;    return val&#10;  end&#10;&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  local hints -- command help&#10;--The format in here is name=summary|description&#10;local hints = {&#10;&#10;pause =   [[&#10;pause(msg[,lines][,force]) -- start/resume a debugger session|&#10;&#10;This can only be used in your code or from the console as a means to&#10;start/resume a debug session.&#10;If msg is given that is shown when the session starts/resumes. Useful to&#10;give a context if you've instrumented your code with pause() statements.&#10;&#10;If lines is given, the script pauses after that many lines, else it pauses&#10;immediately.&#10;&#10;If force is true, the pause function is honoured even if poff has been used.&#10;This is useful when in an interactive console session to regain debugger&#10;control.&#10;]],&#10;&#10;poff =    [[&#10;poff                -- turn off pause() command|&#10;&#10;This causes all pause() commands to be ignored. This is useful if you have&#10;instrumented your code in a busy loop and want to continue normal execution&#10;with no further interruption.&#10;]],&#10;&#10;pon =     [[&#10;pon                 -- turn on pause() command|&#10;&#10;This re-instates honouring the pause() commands you may have instrumented&#10;your code with.&#10;]],&#10;&#10;setb =    [[&#10;setb [line file]    -- set a breakpoint to line/file|, line 0 means 'any'&#10;&#10;If file is omitted or is &quot;-&quot; the breakpoint is set at the file for the&#10;currently set level (see &quot;set&quot;). Execution pauses when this line is about&#10;to be executed and the debugger session is re-activated.&#10;&#10;The file can be given as the fully qualified name, partially qualified or&#10;just the file name. E.g. if file is set as &quot;myfile.lua&quot;, then whenever&#10;execution reaches any file that ends with &quot;myfile.lua&quot; it will pause. If&#10;no extension is given, any extension will do.&#10;&#10;If the line is given as 0, then reaching any line in the file will do.&#10;]],&#10;&#10;delb =    [[&#10;delb [line file]    -- removes a breakpoint|&#10;&#10;If file is omitted or is &quot;-&quot; the breakpoint is removed for the file of the&#10;currently set level (see &quot;set&quot;).&#10;]],&#10;&#10;delallb = [[&#10;delallb             -- removes all breakpoints|&#10;]],&#10;&#10;setw =    [[&#10;setw &lt;exp&gt;          -- adds a new watch expression|&#10;&#10;The expression is evaluated before each line is executed. If the expression&#10;yields true then execution is paused and the debugger session re-activated.&#10;The expression is executed in the context of the line about to be executed.&#10;]],&#10;&#10;delw =    [[&#10;delw &lt;index&gt;        -- removes the watch expression at index|&#10;&#10;The index is that returned when the watch expression was set by setw.&#10;]],&#10;&#10;delallw = [[&#10;delallw             -- removes all watch expressions|&#10;]],&#10;&#10;run     = [[&#10;run                 -- run until next breakpoint or watch expression|&#10;]],&#10;&#10;step    = [[&#10;step [N]            -- run next N lines, stepping into function calls|&#10;&#10;If N is omitted, use 1.&#10;]],&#10;&#10;over    = [[&#10;over [N]            -- run next N lines, stepping over function calls|&#10;&#10;If N is omitted, use 1.&#10;]],&#10;&#10;out     = [[&#10;out [N]             -- run lines until stepped out of N functions|&#10;&#10;If N is omitted, use 1.&#10;If you are inside a function, using &quot;out 1&quot; will run until you return&#10;from that function to the caller.&#10;]],&#10;&#10;gotoo   = [[&#10;gotoo [line file]    -- step to line in file|&#10;&#10;This is equivalent to 'setb line file', followed by 'run', followed&#10;by 'delb line file'.&#10;]],&#10;&#10;listb   = [[&#10;listb               -- lists breakpoints|&#10;]],&#10;&#10;listw   = [[&#10;listw               -- lists watch expressions|&#10;]],&#10;&#10;set     = [[&#10;set [level]         -- set context to stack level, omitted=show|&#10;&#10;If level is omitted it just prints the current level set.&#10;This sets the current context to the level given. This affects the&#10;context used for several other functions (e.g. vars). The possible&#10;levels are those shown by trace.&#10;]],&#10;&#10;vars    = [[&#10;vars [depth]        -- list context locals to depth, omitted=1|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Lists all non-nil local variables and all non-nil upvalues in the&#10;currently set context. For variables that are tables, lists all fields&#10;to the given depth.&#10;]],&#10;&#10;fenv    = [[&#10;fenv [depth]        -- list context function env to depth, omitted=1|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Lists all function environment variables in the currently set context.&#10;For variables that are tables, lists all fields to the given depth.&#10;]],&#10;&#10;glob    = [[&#10;glob [depth]        -- list globals to depth, omitted=1|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Lists all global variables.&#10;For variables that are tables, lists all fields to the given depth.&#10;]],&#10;&#10;ups     = [[&#10;ups                 -- list all the upvalue names|&#10;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#10;This provides a means to identify which vars are upvalues and which are&#10;locals. If a name is both an upvalue and a local, the local value takes&#10;precedance.&#10;]],&#10;&#10;locs    = [[&#10;locs                -- list all the locals names|&#10;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#10;This provides a means to identify which vars are upvalues and which are&#10;locals. If a name is both an upvalue and a local, the local value takes&#10;precedance.&#10;]],&#10;&#10;dump    = [[&#10;dump &lt;var&gt; [depth]  -- dump all fields of variable to depth|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Prints the value of &lt;var&gt; in the currently set context level. If &lt;var&gt;&#10;is a table, lists all fields to the given depth. &lt;var&gt; can be just a&#10;name, or name.field or name.# to any depth, e.g. t.1.f accesses field&#10;'f' in array element 1 in table 't'.&#10;&#10;Can also be called from a script as dump(var,depth).&#10;]],&#10;&#10;tron    = [[&#10;tron [crl]          -- turn trace on for (c)alls, (r)etuns, (l)lines|&#10;&#10;If no parameter is given then tracing is turned off.&#10;When tracing is turned on a line is printed to the console for each&#10;debug 'event' selected. c=function calls, r=function returns, l=lines.&#10;]],&#10;&#10;trace   = [[&#10;trace               -- dumps a stack trace|&#10;&#10;Format is [level] = file,line,name&#10;The level is a candidate for use by the 'set' command.&#10;]],&#10;&#10;info    = [[&#10;info                -- dumps the complete debug info captured|&#10;&#10;Only useful as a diagnostic aid for the debugger itself. This information&#10;can be HUGE as it dumps all variables to the maximum depth, so be careful.&#10;]],&#10;&#10;show    = [[&#10;show line file X Y  -- show X lines before and Y after line in file|&#10;&#10;If line is omitted or is '-' then the current set context line is used.&#10;If file is omitted or is '-' then the current set context file is used.&#10;If file is not fully qualified and cannot be opened as specified, then&#10;a search for the file in the package[path] is performed using the usual&#10;&quot;require&quot; searching rules. If no file extension is given, .lua is used.&#10;Prints the lines from the source file around the given line.&#10;]],&#10;&#10;exit    = [[&#10;exit                -- exits debugger, re-start it using pause()|&#10;]],&#10;&#10;help    = [[&#10;help [command]      -- show this list or help for command|&#10;]],&#10;&#10;[&quot;&lt;statement&gt;&quot;] = [[&#10;&lt;statement&gt;         -- execute a statement in the current context|&#10;&#10;The statement can be anything that is legal in the context, including&#10;assignments. Such assignments affect the context and will be in force&#10;immediately. Any results returned are printed. Use '=' as a short-hand&#10;for 'return', e.g. &quot;=func(arg)&quot; will call 'func' with 'arg' and print&#10;the results, and &quot;=var&quot; will just print the value of 'var'.&#10;]],&#10;&#10;what    = [[&#10;what &lt;func&gt;         -- show where &lt;func&gt; is defined (if known)|&#10;]],&#10;&#10;}&#10;--}}}&#10;&#10;--{{{ Local function to get table size&#10;local function tsize(t)&#10;    local count=0&#10;&#10;    for k,v in pairs(t) do&#10;        count = count + 1&#10;    end&#10;&#10;    return count&#10;end&#10;---}}}&#10;&#10;---{{{ Global utility function to set breakpoints, used inside Ctrlr&#10;function setBreakpoint(line, file, shouldBeSet)&#10;    if not breakpoints[line] then&#10;        breakpoints[line] = {}&#10;    end&#10;&#10;    if shouldBeSet then&#10;        breakpoints[line][file] = true&#10;    else&#10;        breakpoints[line] = nil&#10;    end&#10;end&#10;---}}}&#10;&#10;&#10;--{{{  local function getinfo(level,field)&#10;&#10;--like debug.getinfo but copes with no activation record at the given level&#10;--and knows how to get 'field'. 'field' can be the name of any of the&#10;--activation record fields or any of the 'what' names or nil for everything.&#10;--only valid when using the stack level to get info, not a function name.&#10;&#10;local function getinfo(level,field)&#10;  level = level + 1  --to get to the same relative level as the caller&#10;  if not field then return debug.getinfo(level) end&#10;  local what&#10;  if field == 'name' or field == 'namewhat' then&#10;    what = 'n'&#10;  elseif field == 'what' or field == 'source' or field == 'linedefined' or field == 'lastlinedefined' or field == 'short_src' then&#10;    what = 'S'&#10;  elseif field == 'currentline' then&#10;    what = 'l'&#10;  elseif field == 'nups' then&#10;    what = 'u'&#10;  elseif field == 'func' then&#10;    what = 'f'&#10;  else&#10;    return debug.getinfo(level,field)&#10;  end&#10;  local ar = debug.getinfo(level,what)&#10;  if ar then return ar[field] else return nil end&#10;end&#10;&#10;--}}}&#10;--{{{  local function indented( level, ... )&#10;&#10;local function indented( level, ... )&#10;  ctrlrDebugger:write( string.format (&quot;%s%s\n&quot;, string.rep('  ',level), table.concat({...}) ))&#10;end&#10;&#10;--}}}&#10;--{{{  local function dumpval( level, name, value, limit )&#10;&#10;local dumpvisited&#10;&#10;local function dumpval( level, name, value, limit )&#10;    local index&#10;&#10;    if type(name) == 'number' then&#10;        index = string.format(&quot;%q,&quot;,name)&#10;    elseif type(name) == 'string' and (name == '__VARSLEVEL__' or name == '__ENVIRONMENT__' or name == '__GLOBALS__' or name == '__UPVALUES__' or name == '__LOCALS__') then&#10;        --ignore these, they are debugger generated&#10;        return&#10;    elseif type(name) == 'string' and string.find(name,'&#94;[_%a][_.%w]*$') then&#10;        index = string.format (&quot;%q: &quot;, name);&#10;    else&#10;        index = string.format (&quot;%q,&quot;, tostring(name))&#10;    end&#10;&#10;    if type(value) == 'table' then&#10;        if dumpvisited[value] then&#10;            indented (level, index, string.format(&quot;%q&quot;, dumpvisited[value]))&#10;        else&#10;            dumpvisited[value] = string.format (&quot;\&quot;table\&quot;: \&quot;%d\&quot;,&quot;, tsize (value))&#10;            if (limit or 0) &gt; 0 and level+1 &gt;= limit then&#10;                indented (level, index, string.format (&quot;{%s&quot;, string.gsub(dumpvisited[value], &quot;,&quot;, &quot;},&quot;)))&#10;            else&#10;                indented (level, index, &quot;{\n&quot;, dumpvisited[value])&#10;&#10;                for n,v in pairs(value) do&#10;                    dumpval (level+1, n, v, limit)&#10;                end&#10;&#10;                indented (level, &quot;}&quot;)&#10;            end&#10;        end&#10;    else&#10;        if type(value) == 'string' then&#10;            indented (level, index, string.format(&quot;{\&quot;string\&quot;: %q}&quot;,value), ',')&#10;        end&#10;&#10;        if type(value) == 'userdata' then&#10;            info = class_info (value)&#10;            indented (level, index, string.format (&quot;{\&quot;userdata\&quot;: %q}&quot;, info.name) , ',')&#10;        end&#10;&#10;        if type(value) == 'number' then&#10;            indented (level, index, string.format (&quot;{\&quot;number\&quot;: %q}&quot;,tostring(value)), ',')&#10;        end&#10;    end&#10;end&#10;&#10;--}}}&#10;--{{{  local function dumpvar( value, limit, name )&#10;&#10;local function dumpvar( value, limit, name )&#10;  ctrlrDebugger:write (&quot;\n::start dumpvar\n&quot;)&#10;  dumpvisited = {}&#10;  dumpval( 0, name or tostring(value), value, limit )&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#10;end&#10;&#10;--}}}&#10;--{{{  local function show(file,line,before,after)&#10;&#10;--show +/-N lines of a file around line M&#10;&#10;local function show(file,line,before,after)&#10;&#10;  line   = tonumber(line   or 1)&#10;  before = tonumber(before or 10)&#10;  after  = tonumber(after  or before)&#10;&#10;  if not string.find(file,'%.') then file = file..'.lua' end&#10;&#10;  local f = io.open(file,'r')&#10;  if not f then&#10;    --{{{  try to find the file in the path&#10;&#10;    --&#10;    -- looks for a file in the package path&#10;    --&#10;    local path = package.path or LUA_PATH or ''&#10;    for c in string.gmatch (path, &quot;[&#94;;]+&quot;) do&#10;      local c = string.gsub (c, &quot;%?%.lua&quot;, file)&#10;      f = io.open (c,'r')&#10;      if f then&#10;        break&#10;      end&#10;    end&#10;&#10;    --}}}&#10;    if not f then&#10;      ctrlrDebugger:write('Cannot find '..file..'\n')&#10;      return&#10;    end&#10;  end&#10;&#10;  local i = 0&#10;  for l in f:lines() do&#10;    i = i + 1&#10;    if i &gt;= (line-before) then&#10;      if i &gt; (line+after) then break end&#10;      if i == line then&#10;        ctrlrDebugger:write(i..'***\t'..l..'\n')&#10;      else&#10;        ctrlrDebugger:write(i..'\t'..l..'\n')&#10;      end&#10;    end&#10;  end&#10;&#10;  f:close()&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function tracestack(l)&#10;&#10;local function gi( i )&#10;  return function() i=i+1 return debug.getinfo(i),i end&#10;end&#10;&#10;local function gl( level, j )&#10;  return function() j=j+1 return debug.getlocal( level, j ) end&#10;end&#10;&#10;local function gu( func, k )&#10;  return function() k=k+1 return debug.getupvalue( func, k ) end&#10;end&#10;&#10;local  traceinfo&#10;&#10;local function tracestack(l)&#10;  local l = l + 1                        --NB: +1 to get level relative to caller&#10;  traceinfo = {}&#10;  traceinfo.pausemsg = pausemsg&#10;  for ar,i in gi(l) do&#10;    table.insert( traceinfo, ar )&#10;    if ar.what ~= 'C' then&#10;      local names  = {}&#10;      local values = {}&#10;      for n,v in gl(i,0) do&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#10;          table.insert( names, n )&#10;          table.insert( values, v )&#10;        end&#10;      end&#10;      if #names &gt; 0 then&#10;        ar.lnames  = names&#10;        ar.lvalues = values&#10;      end&#10;    end&#10;    if ar.func then&#10;      local names  = {}&#10;      local values = {}&#10;      for n,v in gu(ar.func,0) do&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#10;          table.insert( names, n )&#10;          table.insert( values, v )&#10;        end&#10;      end&#10;      if #names &gt; 0 then&#10;        ar.unames  = names&#10;        ar.uvalues = values&#10;      end&#10;    end&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  local function trace()&#10;&#10;local function trace(set)&#10;  ctrlrDebugger:write (&quot;\n::start trace\n&quot;)&#10;  local mark&#10;  for level,ar in ipairs(traceinfo) do&#10;    if level == set then&#10;      mark = '***'&#10;    else&#10;      mark = ''&#10;    end&#10;    ctrlrDebugger:write('['..level..']'..mark..'\t'..(ar.name or ar.what)..' in '..ar.short_src..':'..ar.currentline..'\n')&#10;  end&#10;&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#10;end&#10;&#10;--}}}&#10;--{{{  local function info()&#10;&#10;local function info()&#10;    dumpvar( traceinfo, 0, 'traceinfo' )&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  local function set_breakpoint(file, line, once)&#10;&#10;local function set_breakpoint(file, line, once)&#10;  if not breakpoints[line] then&#10;    breakpoints[line] = {}&#10;  end&#10;  if once then&#10;    breakpoints[line][file] = 1&#10;  else&#10;    breakpoints[line][file] = true&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  local function remove_breakpoint(file, line)&#10;&#10;local function remove_breakpoint(file, line)&#10;  if breakpoints[line] then&#10;    breakpoints[line][file] = nil&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  local function has_breakpoint(file, line)&#10;&#10;--allow for 'sloppy' file names&#10;--search for file and all variations walking up its directory hierachy&#10;--ditto for the file with no extension&#10;--a breakpoint can be permenant or once only, if once only its removed&#10;--after detection here, these are used for temporary breakpoints in the&#10;--debugger loop when executing the 'gotoo' command&#10;--a breakpoint on line 0 of a file means any line in that file&#10;&#10;local function has_breakpoint(file, line)&#10;  local isLine = breakpoints[line]&#10;  local isZero = breakpoints[0]&#10;  if not isLine and not isZero then return false end&#10;  local noext = string.gsub(file,&quot;(%..-)$&quot;,'',1)&#10;  if noext == file then noext = nil end&#10;  while file do&#10;    if isLine and isLine[file] then&#10;      if isLine[file] == 1 then isLine[file] = nil end&#10;      return true&#10;    end&#10;    if isZero and isZero[file] then&#10;      if isZero[file] == 1 then isZero[file] = nil end&#10;      return true&#10;    end&#10;    if IsWindows then&#10;      file = string.match(file,&quot;[:/\\](.+)$&quot;)&#10;    else&#10;      file = string.match(file,&quot;[:/](.+)$&quot;)&#10;    end&#10;  end&#10;  while noext do&#10;    if isLine and isLine[noext] then&#10;      if isLine[noext] == 1 then isLine[noext] = nil end&#10;      return true&#10;    end&#10;    if isZero and isZero[noext] then&#10;      if isZero[noext] == 1 then isZero[noext] = nil end&#10;      return true&#10;    end&#10;    if IsWindows then&#10;      noext = string.match(noext,&quot;[:/\\](.+)$&quot;)&#10;    else&#10;      noext = string.match(noext,&quot;[:/](.+)$&quot;)&#10;    end&#10;  end&#10;  return false&#10;end&#10;&#10;--}}}&#10;--{{{  local function capture_vars(ref,level,line)&#10;&#10;local function capture_vars(ref,level,line)&#10;  --get vars, file and line for the given level relative to debug_hook offset by ref&#10;&#10;  local lvl = ref + level                --NB: This includes an offset of +1 for the call to here&#10;&#10;  --{{{  capture variables&#10;&#10;  local ar = debug.getinfo(lvl, &quot;f&quot;)&#10;  if not ar then return {},'?',0 end&#10;&#10;  local vars = {__UPVALUES__={}, __LOCALS__={}}&#10;  local i&#10;&#10;  local func = ar.func&#10;  if func then&#10;    i = 1&#10;    while true do&#10;      local name, value = debug.getupvalue(func, i)&#10;      if not name then break end&#10;      if string.sub(name,1,1) ~= '(' then  --NB: ignoring internal control variables&#10;        vars[name] = value&#10;        vars.__UPVALUES__[i] = name&#10;      end&#10;      i = i + 1&#10;    end&#10;    vars.__ENVIRONMENT__ = getfenv(func)&#10;  end&#10;&#10;  vars.__GLOBALS__ = getfenv(0)&#10;&#10;  i = 1&#10;  while true do&#10;    local name, value = debug.getlocal(lvl, i)&#10;    if not name then break end&#10;    if string.sub(name,1,1) ~= '(' then    --NB: ignoring internal control variables&#10;      vars[name] = value&#10;      vars.__LOCALS__[i] = name&#10;    end&#10;    i = i + 1&#10;  end&#10;&#10;  vars.__VARSLEVEL__ = level&#10;&#10;  if func then&#10;    --NB: Do not do this until finished filling the vars table&#10;    setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })&#10;  end&#10;&#10;  --NB: Do not read or write the vars table anymore else the metatable functions will get invoked!&#10;&#10;  --}}}&#10;&#10;  local file = getinfo(lvl, &quot;source&quot;)&#10;  if string.find(file, &quot;@&quot;) == 1 then&#10;    file = string.sub(file, 2)&#10;  end&#10;  if IsWindows then file = string.lower(file) end&#10;&#10;  if not line then&#10;    line = getinfo(lvl, &quot;currentline&quot;)&#10;  end&#10;&#10;  return vars,file,line&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function restore_vars(ref,vars)&#10;&#10;local function restore_vars(ref,vars)&#10;&#10;  if type(vars) ~= 'table' then return end&#10;&#10;  local level = vars.__VARSLEVEL__       --NB: This level is relative to debug_hook offset by ref&#10;  if not level then return end&#10;&#10;  level = level + ref                    --NB: This includes an offset of +1 for the call to here&#10;&#10;  local i&#10;  local written_vars = {}&#10;&#10;  i = 1&#10;  while true do&#10;    local name, value = debug.getlocal(level, i)&#10;    if not name then break end&#10;    if vars[name] and string.sub(name,1,1) ~= '(' then     --NB: ignoring internal control variables&#10;      debug.setlocal(level, i, vars[name])&#10;      written_vars[name] = true&#10;    end&#10;    i = i + 1&#10;  end&#10;&#10;  local ar = debug.getinfo(level, &quot;f&quot;)&#10;  if not ar then return end&#10;&#10;  local func = ar.func&#10;  if func then&#10;&#10;    i = 1&#10;    while true do&#10;      local name, value = debug.getupvalue(func, i)&#10;      if not name then break end&#10;      if vars[name] and string.sub(name,1,1) ~= '(' then   --NB: ignoring internal control variables&#10;        if not written_vars[name] then&#10;          debug.setupvalue(func, i, vars[name])&#10;        end&#10;        written_vars[name] = true&#10;      end&#10;      i = i + 1&#10;    end&#10;&#10;  end&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function trace_event(event, line, level)&#10;&#10;local function print_trace(level,depth,event,file,line,name)&#10;&#10;  --NB: level here is relative to the caller of trace_event, so offset by 2 to get to there&#10;  level = level + 2&#10;&#10;  local file = file or getinfo(level,'short_src')&#10;  local line = line or getinfo(level,'currentline')&#10;  local name = name or getinfo(level,'name')&#10;&#10;  local prefix = ''&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#10;&#10;  ctrlrDebugger:write(prefix..&#10;           string.format('%08.2f:%02i.',os.clock(),depth)..&#10;           string.rep('.',depth%32)..&#10;           (file or '')..' ('..(line or '')..') '..&#10;           (name or '')..&#10;           ' ('..event..')\n')&#10;&#10;end&#10;&#10;local function trace_event(event, line, level)&#10;&#10;  if event == 'return' and trace_returns then&#10;    --note the line info for later&#10;    ret_file = getinfo(level+1,'short_src')&#10;    ret_line = getinfo(level+1,'currentline')&#10;    ret_name = getinfo(level+1,'name')&#10;  end&#10;&#10;  if event ~= 'line' then return end&#10;&#10;  local slevel = stack_level[current_thread]&#10;  local tlevel = trace_level[current_thread]&#10;&#10;  if trace_calls and slevel &gt; tlevel then&#10;    --we are now in the function called, so look back 1 level further to find the calling file and line&#10;    print_trace(level+1,slevel-1,'c',nil,nil,getinfo(level+1,'name'))&#10;  end&#10;&#10;  if trace_returns and slevel &lt; tlevel then&#10;    print_trace(level,slevel,'r',ret_file,ret_line,ret_name)&#10;  end&#10;&#10;  if trace_lines then&#10;    print_trace(level,slevel,'l')&#10;  end&#10;&#10;  trace_level[current_thread] = stack_level[current_thread]&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function report(ev, vars, file, line, idx_watch)&#10;&#10;local function report(ev, vars, file, line, idx_watch)&#10;  local vars = vars or {}&#10;  local file = file or '?'&#10;  local line = line or 0&#10;  local prefix = ''&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#10;  if ev == events.STEP then&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')\n')&#10;  elseif ev == events.BREAK then&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..') (breakpoint)\n')&#10;  elseif ev == events.WATCH then&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')'..&quot; (watch expression &quot;..idx_watch.. &quot;: [&quot;..watches[idx_watch].exp..&quot;])\n&quot;)&#10;  elseif ev == events.SET then&#10;    --do nothing&#10;  else&#10;    ctrlrDebugger:write(prefix..&quot;Error in application: &quot;..file..&quot; line &quot;..line..&quot;\n&quot;)&#10;  end&#10;  if ev ~= events.SET then&#10;    if pausemsg and pausemsg ~= '' then ctrlrDebugger:write('Message: '..pausemsg..'\n') end&#10;    pausemsg = ''&#10;  end&#10;  return vars, file, line&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  local function debugger_loop(ev, vars, file, line, idx_watch)&#10;&#10;local function debugger_loop(ev, vars, file, line, idx_watch)&#10;&#10;  local eval_env  = vars or {}&#10;  local breakfile = file or '?'&#10;  local breakline = line or 0&#10;&#10;  local command, args&#10;&#10;  --{{{  local function getargs(spec)&#10;&#10;  --get command arguments according to the given spec from the args string&#10;  --the spec has a single character for each argument, arguments are separated&#10;  --by white space, the spec characters can be one of:&#10;  -- F for a filename    (defaults to breakfile if - given in args)&#10;  -- L for a line number (defaults to breakline if - given in args)&#10;  -- N for a number&#10;  -- V for a variable name&#10;  -- S for a string&#10;&#10;  local function getargs(spec)&#10;    local res={}&#10;    local char,arg&#10;    local ptr=1&#10;    for i=1,string.len(spec) do&#10;      char = string.sub(spec,i,i)&#10;      if     char == 'F' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '-' end&#10;        if arg == '-' then arg = breakfile end&#10;      elseif char == 'L' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '-' end&#10;        if arg == '-' then arg = breakline end&#10;        arg = tonumber(arg) or 0&#10;      elseif char == 'N' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '0' end&#10;        arg = tonumber(arg) or 0&#10;      elseif char == 'V' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '' end&#10;      elseif char == 'S' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '' end&#10;      else&#10;        arg = ''&#10;      end&#10;      table.insert(res,arg or '')&#10;    end&#10;    return unpack(res)&#10;  end&#10;&#10;  --}}}&#10;&#10;  while true do&#10;    -- io.write(&quot;[DEBUG]&gt; &quot;)&#10;    ctrlrDebugger:write(&quot;[DEBUG]&gt; &quot;)&#10;    -- local line = io.read(&quot;*line&quot;)&#10;    local line = ctrlrDebugger:read()&#10;    if line == nil then ctrlrDebugger:write('\n'); line = 'exit' end&#10;&#10;    if string.find(line, &quot;&#94;[a-z]+&quot;) then&#10;      command = string.sub(line, string.find(line, &quot;&#94;[a-z]+&quot;))&#10;      args    = string.gsub(line,&quot;&#94;[a-z]+%s*&quot;,'',1)            --strip command off line&#10;    else&#10;      command = ''&#10;    end&#10;&#10;    if command == &quot;setb&quot; then&#10;      --{{{  set breakpoint&#10;&#10;      local line, filename  = getargs('LF')&#10;      if filename ~= '' and line ~= '' then&#10;        set_breakpoint(filename,line)&#10;        ctrlrDebugger:write(&quot;Breakpoint set in file &quot;..filename..' line '..line..'\n')&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delb&quot; then&#10;      --{{{  delete breakpoint&#10;&#10;      local line, filename = getargs('LF')&#10;      if filename ~= '' and line ~= '' then&#10;        remove_breakpoint(filename, line)&#10;        ctrlrDebugger:write(&quot;Breakpoint deleted from file &quot;..filename..' line '..line..&quot;\n&quot;)&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delallb&quot; then&#10;      --{{{  delete all breakpoints&#10;      breakpoints = {}&#10;      ctrlrDebugger:write('All breakpoints deleted\n')&#10;      --}}}&#10;&#10;    elseif command == &quot;listb&quot; then&#10;      --{{{  list breakpoints&#10;      for i, v in pairs(breakpoints) do&#10;        for ii, vv in pairs(v) do&#10;          ctrlrDebugger:write(&quot;Break at: &quot;..i..' in '..ii..'\n')&#10;        end&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;setw&quot; then&#10;      --{{{  set watch expression&#10;&#10;      if args and args ~= '' then&#10;        local func = loadstring(&quot;return(&quot; .. args .. &quot;)&quot;)&#10;        local newidx = #watches + 1&#10;        watches[newidx] = {func = func, exp = args}&#10;        ctrlrDebugger:write(&quot;Set watch exp no. &quot; .. newidx..'\n')&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delw&quot; then&#10;      --{{{  delete watch expression&#10;&#10;      local index = tonumber(args)&#10;      if index then&#10;        watches[index] = nil&#10;        ctrlrDebugger:write(&quot;Watch expression deleted\n&quot;)&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delallw&quot; then&#10;      --{{{  delete all watch expressions&#10;      watches = {}&#10;      ctrlrDebugger:write('All watch expressions deleted\n')&#10;      --}}}&#10;&#10;    elseif command == &quot;listw&quot; then&#10;      --{{{  list watch expressions&#10;      for i, v in pairs(watches) do&#10;        ctrlrDebugger:write(&quot;Watch exp. &quot; .. i .. &quot;: &quot; .. v.exp..'\n')&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;run&quot; then&#10;      --{{{  run until breakpoint&#10;      step_into = false&#10;      step_over = false&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;step&quot; then&#10;      --{{{  step N lines (into functions)&#10;      local N = tonumber(args) or 1&#10;      step_over  = false&#10;      step_into  = true&#10;      step_lines = tonumber(N or 1)&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;over&quot; then&#10;      --{{{  step N lines (over functions)&#10;      local N = tonumber(args) or 1&#10;      step_into  = false&#10;      step_over  = true&#10;      step_lines = tonumber(N or 1)&#10;      step_level[current_thread] = stack_level[current_thread]&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;out&quot; then&#10;      --{{{  step N lines (out of functions)&#10;      local N = tonumber(args) or 1&#10;      step_into  = false&#10;      step_over  = true&#10;      step_lines = 1&#10;      step_level[current_thread] = stack_level[current_thread] - tonumber(N or 1)&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;gotoo&quot; then&#10;      --{{{  step until reach line&#10;      local line, filename = getargs('LF')&#10;      if line ~= '' then&#10;        step_over  = false&#10;        step_into  = false&#10;        if has_breakpoint(filename,line) then&#10;          return 'cont'&#10;        else&#10;          set_breakpoint(filename,line,true)&#10;          return 'cont'&#10;        end&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;set&quot; then&#10;      --{{{  set/show context level&#10;      local level = args&#10;      if level and level == '' then level = nil end&#10;      if level then return level end&#10;      --}}}&#10;&#10;    elseif command == &quot;vars&quot; then&#10;      --{{{  list context variables&#10;      local depth = args&#10;      if depth and depth == '' then depth = nil end&#10;      depth = tonumber(depth) or 1&#10;      dumpvar(eval_env, depth+1, 'variables')&#10;      --}}}&#10;&#10;    elseif command == &quot;glob&quot; then&#10;      --{{{  list global variables&#10;      local depth = args&#10;      if depth and depth == '' then depth = nil end&#10;      depth = tonumber(depth) or 1&#10;      dumpvar(eval_env.__GLOBALS__,depth+1,'globals')&#10;      --}}}&#10;&#10;    elseif command == &quot;fenv&quot; then&#10;      --{{{  list function environment variables&#10;      local depth = args&#10;      if depth and depth == '' then depth = nil end&#10;      depth = tonumber(depth) or 1&#10;      dumpvar(eval_env.__ENVIRONMENT__,depth+1,'environment')&#10;      --}}}&#10;&#10;    elseif command == &quot;ups&quot; then&#10;      --{{{  list upvalue names&#10;      dumpvar(eval_env.__UPVALUES__,2,'upvalues')&#10;      --}}}&#10;&#10;    elseif command == &quot;locs&quot; then&#10;      --{{{  list locals names&#10;      dumpvar(eval_env.__LOCALS__,2,'upvalues')&#10;      --}}}&#10;&#10;    elseif command == &quot;what&quot; then&#10;      --{{{  show where a function is defined&#10;      if args and args ~= '' then&#10;        local v = eval_env&#10;        local n = nil&#10;        for w in string.gmatch(args,&quot;[%w_]+&quot;) do&#10;          v = v[w]&#10;          if n then n = n..'.'..w else n = w end&#10;          if not v then break end&#10;        end&#10;        if type(v) == 'function' then&#10;          local def = debug.getinfo(v,'S')&#10;          if def then&#10;            ctrlrDebugger:write(def.what..' in '..def.short_src..' '..def.linedefined..'..'..def.lastlinedefined..'\n')&#10;          else&#10;            ctrlrDebugger:write('Cannot get info for '..v..'\n')&#10;          end&#10;        else&#10;          ctrlrDebugger:write(v..' is not a function\n')&#10;        end&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;dump&quot; then&#10;      --{{{  dump a variable&#10;      local name, depth = getargs('VN')&#10;      if name ~= '' then&#10;        if depth == '' or depth == 0 then depth = nil end&#10;        depth = tonumber(depth or 1)&#10;        local v = eval_env&#10;        local n = nil&#10;        for w in string.gmatch(name,&quot;[&#94;%.]+&quot;) do     --get everything between dots&#10;          if tonumber(w) then&#10;            v = v[tonumber(w)]&#10;          else&#10;            v = v[w]&#10;          end&#10;          if n then n = n..'.'..w else n = w end&#10;          if not v then break end&#10;        end&#10;        dumpvar(v,depth+1,n)&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;show&quot; then&#10;      --{{{  show file around a line or the current breakpoint&#10;&#10;      local line, file, before, after = getargs('LFNN')&#10;      if before == 0 then before = 10     end&#10;      if after  == 0 then after  = before end&#10;&#10;      if file ~= '' and file ~= &quot;=stdin&quot; then&#10;        show(file,line,before,after)&#10;      else&#10;        ctrlrDebugger:write('Nothing to show\n')&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;poff&quot; then&#10;      --{{{  turn pause command off&#10;      pause_off = true&#10;      --}}}&#10;&#10;    elseif command == &quot;pon&quot; then&#10;      --{{{  turn pause command on&#10;      pause_off = false&#10;      --}}}&#10;&#10;    elseif command == &quot;tron&quot; then&#10;      --{{{  turn tracing on/off&#10;      local option = getargs('S')&#10;      trace_calls   = false&#10;      trace_returns = false&#10;      trace_lines   = false&#10;      if string.find(option,'c') then trace_calls   = true end&#10;      if string.find(option,'r') then trace_returns = true end&#10;      if string.find(option,'l') then trace_lines   = true end&#10;      --}}}&#10;&#10;    elseif command == &quot;trace&quot; then&#10;      --{{{  dump a stack trace&#10;      trace(eval_env.__VARSLEVEL__)&#10;      --}}}&#10;&#10;    elseif command == &quot;info&quot; then&#10;      --{{{  dump all debug info captured&#10;      info()&#10;      --}}}&#10;&#10;    elseif command == &quot;pause&quot; then&#10;      --{{{  not allowed in here&#10;      ctrlrDebugger:write('pause() should only be used in the script you are debugging\n')&#10;      --}}}&#10;&#10;    elseif command == &quot;help&quot; then&#10;      --{{{  help&#10;      local command = getargs('S')&#10;      if command ~= '' and hints[command] then&#10;        ctrlrDebugger:write(hints[command]..'\n')&#10;      else&#10;        for _,v in pairs(hints) do&#10;          local _,_,h = string.find(v,&quot;(.+)|&quot;)&#10;          ctrlrDebugger:write(h..'\n')&#10;        end&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;exit&quot; then&#10;      --{{{  exit debugger&#10;      return 'stop'&#10;      --}}}&#10;&#10;    elseif line ~= '' then&#10;      --{{{  just execute whatever it is in the current context&#10;&#10;      --map line starting with &quot;=...&quot; to &quot;return ...&quot;&#10;      if string.sub(line,1,1) == '=' then line = string.gsub(line,'=','return ',1) end&#10;&#10;      local ok, func = pcall(loadstring,line)&#10;      if func == nil then                             --Michael.Bringmann@lsi.com&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..line..'\n')&#10;      elseif not ok then&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..func..'\n')&#10;      else&#10;        setfenv(func, eval_env)&#10;        local res = {pcall(func)}&#10;        if res[1] then&#10;          if res[2] then&#10;            table.remove(res,1)&#10;            for _,v in ipairs(res) do&#10;              ctrlrDebugger:write(tostring(v))&#10;              ctrlrDebugger:write('\t')&#10;            end&#10;            ctrlrDebugger:write('\n')&#10;          end&#10;          --update in the context&#10;          return 0&#10;        else&#10;          ctrlrDebugger:write(&quot;Run error: &quot;..res[2]..'\n')&#10;        end&#10;      end&#10;&#10;      --}}}&#10;    end&#10;  end&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function debug_hook(event, line, level, thread)&#10;&#10;local function debug_hook(event, line, level, thread)&#10;  if not started then debug.sethook(); coro_debugger = nil; return end&#10;  current_thread = thread or 'main'&#10;  local level = level or 2&#10;  trace_event(event,line,level)&#10;  if event == &quot;call&quot; then&#10;    stack_level[current_thread] = stack_level[current_thread] + 1&#10;  elseif event == &quot;return&quot; then&#10;    stack_level[current_thread] = stack_level[current_thread] - 1&#10;    if stack_level[current_thread] &lt; 0 then stack_level[current_thread] = 0 end&#10;  else&#10;    local vars,file,line = capture_vars(level,1,line)&#10;    local stop, ev, idx = false, events.STEP, 0&#10;    while true do&#10;      for index, value in pairs(watches) do&#10;        setfenv(value.func, vars)&#10;        local status, res = pcall(value.func)&#10;        if status and res then&#10;          ev, idx = events.WATCH, index&#10;          stop = true&#10;          break&#10;        end&#10;      end&#10;      if stop then break end&#10;      if (step_into)&#10;      or (step_over and (stack_level[current_thread] &lt;= step_level[current_thread] or stack_level[current_thread] == 0)) then&#10;        step_lines = step_lines - 1&#10;        if step_lines &lt; 1 then&#10;          ev, idx = events.STEP, 0&#10;          break&#10;        end&#10;      end&#10;      if has_breakpoint(file, line) then&#10;        ev, idx = events.BREAK, 0&#10;        break&#10;      end&#10;      return&#10;    end&#10;    if not coro_debugger then&#10;      ctrlrDebugger:write(&quot;Lua Debugger\n&quot;)&#10;      vars, file, line = report(ev, vars, file, line, idx)&#10;      ctrlrDebugger:write(&quot;Type 'help' for commands\n&quot;)&#10;      coro_debugger = true&#10;    else&#10;      vars, file, line = report(ev, vars, file, line, idx)&#10;    end&#10;    tracestack(level)&#10;    local last_next = 1&#10;    local next = 'ask'&#10;    local silent = false&#10;    while true do&#10;      if next == 'ask' then&#10;        next = debugger_loop(ev, vars, file, line, idx)&#10;      elseif next == 'cont' then&#10;        return&#10;      elseif next == 'stop' then&#10;        started = false&#10;        debug.sethook()&#10;        coro_debugger = nil&#10;        return&#10;      elseif tonumber(next) then --get vars for given level or last level&#10;        next = tonumber(next)&#10;        if next == 0 then silent = true; next = last_next else silent = false end&#10;        last_next = next&#10;        restore_vars(level,vars)&#10;        vars, file, line = capture_vars(level,next)&#10;        if not silent then&#10;          if vars and vars.__VARSLEVEL__ then&#10;            ctrlrDebugger:write('Level: '..vars.__VARSLEVEL__..'\n')&#10;          else&#10;            ctrlrDebugger:write('No level set\n')&#10;          end&#10;        end&#10;        ev = events.SET&#10;        next = 'ask'&#10;      else&#10;        ctrlrDebugger:write('Unknown command from debugger_loop: '..tostring(next)..'\n')&#10;        ctrlrDebugger:write('Stopping debugger\n')&#10;        next = 'stop'&#10;      end&#10;    end&#10;  end&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  coroutine.create&#10;&#10;--This function overrides the built-in for the purposes of propagating&#10;--the debug hook settings from the creator into the created coroutine.&#10;&#10;_G.coroutine.create = function(f)&#10;  local thread&#10;  local hook, mask, count = debug.gethook()&#10;  if hook then&#10;    local function thread_hook(event,line)&#10;      hook(event,line,3,thread)&#10;    end&#10;    thread = cocreate(function(...)&#10;                        stack_level[thread] = 0&#10;                        trace_level[thread] = 0&#10;                        step_level [thread] = 0&#10;                        debug.sethook(thread_hook,mask,count)&#10;                        return f(...)&#10;                      end)&#10;    return thread&#10;  else&#10;    return cocreate(f)&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  coroutine.wrap&#10;&#10;--This function overrides the built-in for the purposes of propagating&#10;--the debug hook settings from the creator into the created coroutine.&#10;&#10;_G.coroutine.wrap = function(f)&#10;  local thread&#10;  local hook, mask, count = debug.gethook()&#10;  if hook then&#10;    local function thread_hook(event,line)&#10;      hook(event,line,3,thread)&#10;    end&#10;    thread = cowrap(function(...)&#10;                      stack_level[thread] = 0&#10;                      trace_level[thread] = 0&#10;                      step_level [thread] = 0&#10;                      debug.sethook(thread_hook,mask,count)&#10;                      return f(...)&#10;                    end)&#10;    return thread&#10;  else&#10;    return cowrap(f)&#10;  end&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  function pause(x,l,f)&#10;&#10;--&#10;-- Starts/resumes a debug session&#10;--&#10;&#10;function pause(x,l,f)&#10;  if not f and pause_off then return end       --being told to ignore pauses&#10;  pausemsg = x or 'pause'&#10;  local lines&#10;  local src = getinfo(2,'short_src')&#10;  if l then&#10;    lines = l   --being told when to stop&#10;  elseif src == &quot;stdin&quot; then&#10;    lines = 1   --if in a console session, stop now&#10;  else&#10;    lines = 2   --if in a script, stop when get out of pause()&#10;  end&#10;  if started then&#10;    --we'll stop now 'cos the existing debug hook will grab us&#10;    step_lines = lines&#10;    step_into  = true&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --reset it in case some external agent fiddled with it&#10;  else&#10;    --set to stop when get out of pause()&#10;    trace_level[current_thread] = 0&#10;    step_level [current_thread] = 0&#10;    stack_level[current_thread] = 1&#10;    step_lines = lines&#10;    step_into  = true&#10;    started    = true&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --NB: this will cause an immediate entry to the debugger_loop&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  function dump(v,depth)&#10;&#10;--shows the value of the given variable, only really useful&#10;--when the variable is a table&#10;--see dump debug command hints for full semantics&#10;&#10;function dump(v,depth)&#10;  dumpvar(v,(depth or 1)+1,tostring(v))&#10;end&#10;&#10;--}}}&#10;--{{{  function debug.traceback(x)&#10;&#10;local _traceback = debug.traceback       --note original function&#10;&#10;--override standard function&#10;debug.traceback = function(x)&#10;  local assertmsg = _traceback(x)        --do original function&#10;  pause(x)                               --let user have a look at stuff&#10;  return assertmsg                       --carry on&#10;end&#10;&#10;_TRACEBACK = debug.traceback             --Lua 5.0 function&#10;&#10;--}}}"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000005"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="inspect" luaMethodCode="function getInspect()&#10;local inspect ={&#10;  _VERSION = 'inspect.lua 3.0.0',&#10;  _URL     = 'http://github.com/kikito/inspect.lua',&#10;  _DESCRIPTION = 'human-readable representations of tables',&#10;  _LICENSE = [[&#10;    MIT LICENSE&#10;&#10;    Copyright (c) 2013 Enrique Garc&#237;a Cota&#10;&#10;    Permission is hereby granted, free of charge, to any person obtaining a&#10;    copy of this software and associated documentation files (the&#10;    &quot;Software&quot;), to deal in the Software without restriction, including&#10;    without limitation the rights to use, copy, modify, merge, publish,&#10;    distribute, sublicense, and/or sell copies of the Software, and to&#10;    permit persons to whom the Software is furnished to do so, subject to&#10;    the following conditions:&#10;&#10;    The above copyright notice and this permission notice shall be included&#10;    in all copies or substantial portions of the Software.&#10;&#10;    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&#10;    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&#10;    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.&#10;    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY&#10;    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,&#10;    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE&#10;    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#10;  ]]&#10;}&#10;&#10;inspect.KEY       = setmetatable({}, {__tostring = function() return 'inspect.KEY' end})&#10;inspect.METATABLE = setmetatable({}, {__tostring = function() return 'inspect.METATABLE' end})&#10;&#10;-- Apostrophizes the string if it has quotes, but not aphostrophes&#10;-- Otherwise, it returns a regular quoted string&#10;local function smartQuote(str)&#10;  if str:match('&quot;') and not str:match(&quot;'&quot;) then&#10;    return &quot;'&quot; .. str .. &quot;'&quot;&#10;  end&#10;  return '&quot;' .. str:gsub('&quot;', '\\&quot;') .. '&quot;'&#10;end&#10;&#10;local controlCharsTranslation = {&#10;  [&quot;\a&quot;] = &quot;\\a&quot;,  [&quot;\b&quot;] = &quot;\\b&quot;, [&quot;\f&quot;] = &quot;\\f&quot;,  [&quot;\n&quot;] = &quot;\\n&quot;,&#10;  [&quot;\r&quot;] = &quot;\\r&quot;,  [&quot;\t&quot;] = &quot;\\t&quot;, [&quot;\v&quot;] = &quot;\\v&quot;&#10;}&#10;&#10;local function escape(str)&#10;  local result = str:gsub(&quot;\\&quot;, &quot;\\\\&quot;):gsub(&quot;(%c)&quot;, controlCharsTranslation)&#10;  return result&#10;end&#10;&#10;local function isIdentifier(str)&#10;  return type(str) == 'string' and str:match( &quot;&#94;[_%a][_%a%d]*$&quot; )&#10;end&#10;&#10;local function isSequenceKey(k, length)&#10;  return type(k) == 'number'&#10;     and 1 &lt;= k&#10;     and k &lt;= length&#10;     and math.floor(k) == k&#10;end&#10;&#10;local defaultTypeOrders = {&#10;  ['number']   = 1, ['boolean']  = 2, ['string'] = 3, ['table'] = 4,&#10;  ['function'] = 5, ['userdata'] = 6, ['thread'] = 7&#10;}&#10;&#10;local function sortKeys(a, b)&#10;  local ta, tb = type(a), type(b)&#10;&#10;  -- strings and numbers are sorted numerically/alphabetically&#10;  if ta == tb and (ta == 'string' or ta == 'number') then return a &lt; b end&#10;&#10;  local dta, dtb = defaultTypeOrders[ta], defaultTypeOrders[tb]&#10;  -- Two default types are compared according to the defaultTypeOrders table&#10;  if dta and dtb then return defaultTypeOrders[ta] &lt; defaultTypeOrders[tb]&#10;  elseif dta     then return true  -- default types before custom ones&#10;  elseif dtb     then return false -- custom types after default ones&#10;  end&#10;&#10;  -- custom types are sorted out alphabetically&#10;  return ta &lt; tb&#10;end&#10;&#10;local function getNonSequentialKeys(t)&#10;  local keys, length = {}, #t&#10;  for k,_ in pairs(t) do&#10;    if not isSequenceKey(k, length) then table.insert(keys, k) end&#10;  end&#10;  table.sort(keys, sortKeys)&#10;  return keys&#10;end&#10;&#10;local function getToStringResultSafely(t, mt)&#10;  local __tostring = type(mt) == 'table' and rawget(mt, '__tostring')&#10;  local str, ok&#10;  if type(__tostring) == 'function' then&#10;    ok, str = pcall(__tostring, t)&#10;    str = ok and str or 'error: ' .. tostring(str)&#10;  end&#10;  if type(str) == 'string' and #str &gt; 0 then return str end&#10;end&#10;&#10;local maxIdsMetaTable = {&#10;  __index = function(self, typeName)&#10;    rawset(self, typeName, 0)&#10;    return 0&#10;  end&#10;}&#10;&#10;local idsMetaTable = {&#10;  __index = function (self, typeName)&#10;    local col = setmetatable({}, {__mode = &quot;kv&quot;})&#10;    rawset(self, typeName, col)&#10;    return col&#10;  end&#10;}&#10;&#10;local function countTableAppearances(t, tableAppearances)&#10;  tableAppearances = tableAppearances or setmetatable({}, {__mode = &quot;k&quot;})&#10;&#10;  if type(t) == 'table' then&#10;    if not tableAppearances[t] then&#10;      tableAppearances[t] = 1&#10;      for k,v in pairs(t) do&#10;        countTableAppearances(k, tableAppearances)&#10;        countTableAppearances(v, tableAppearances)&#10;      end&#10;      countTableAppearances(getmetatable(t), tableAppearances)&#10;    else&#10;      tableAppearances[t] = tableAppearances[t] + 1&#10;    end&#10;  end&#10;&#10;  return tableAppearances&#10;end&#10;&#10;local copySequence = function(s)&#10;  local copy, len = {}, #s&#10;  for i=1, len do copy[i] = s[i] end&#10;  return copy, len&#10;end&#10;&#10;local function makePath(path, ...)&#10;  local keys = {...}&#10;  local newPath, len = copySequence(path)&#10;  for i=1, #keys do&#10;    newPath[len + i] = keys[i]&#10;  end&#10;  return newPath&#10;end&#10;&#10;local function processRecursive(process, item, path)&#10;  if item == nil then return nil end&#10;&#10;  local processed = process(item, path)&#10;  if type(processed) == 'table' then&#10;    local processedCopy = {}&#10;    local processedKey&#10;&#10;    for k,v in pairs(processed) do&#10;      processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY))&#10;      if processedKey ~= nil then&#10;        processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey))&#10;      end&#10;    end&#10;&#10;    local mt  = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE))&#10;    setmetatable(processedCopy, mt)&#10;    processed = processedCopy&#10;  end&#10;  return processed&#10;end&#10;&#10;&#10;-------------------------------------------------------------------&#10;&#10;local Inspector = {}&#10;local Inspector_mt = {__index = Inspector}&#10;&#10;function Inspector:puts(...)&#10;  local args   = {...}&#10;  local buffer = self.buffer&#10;  local len    = #buffer&#10;  for i=1, #args do&#10;    len = len + 1&#10;    buffer[len] = tostring(args[i])&#10;  end&#10;end&#10;&#10;function Inspector:down(f)&#10;  self.level = self.level + 1&#10;  f()&#10;  self.level = self.level - 1&#10;end&#10;&#10;function Inspector:tabify()&#10;  self:puts(self.newline, string.rep(self.indent, self.level))&#10;end&#10;&#10;function Inspector:alreadyVisited(v)&#10;  return self.ids[type(v)][v] ~= nil&#10;end&#10;&#10;function Inspector:getId(v)&#10;  local tv = type(v)&#10;  local id = self.ids[tv][v]&#10;  if not id then&#10;    id              = self.maxIds[tv] + 1&#10;    self.maxIds[tv] = id&#10;    self.ids[tv][v] = id&#10;  end&#10;  return id&#10;end&#10;&#10;function Inspector:putKey(k)&#10;  if isIdentifier(k) then return self:puts(k) end&#10;  self:puts(&quot;[&quot;)&#10;  self:putValue(k)&#10;  self:puts(&quot;]&quot;)&#10;end&#10;&#10;function Inspector:putTable(t)&#10;  if t == inspect.KEY or t == inspect.METATABLE then&#10;    self:puts(tostring(t))&#10;  elseif self:alreadyVisited(t) then&#10;    self:puts('&lt;table ', self:getId(t), '&gt;')&#10;  elseif self.level &gt;= self.depth then&#10;    self:puts('{...}')&#10;  else&#10;    if self.tableAppearances[t] &gt; 1 then self:puts('&lt;', self:getId(t), '&gt;') end&#10;&#10;    local nonSequentialKeys = getNonSequentialKeys(t)&#10;    local length            = #t&#10;    local mt                = getmetatable(t)&#10;    local toStringResult    = getToStringResultSafely(t, mt)&#10;&#10;    self:puts('{')&#10;    self:down(function()&#10;      if toStringResult then&#10;        self:puts(' -- ', escape(toStringResult))&#10;        if length &gt;= 1 then self:tabify() end&#10;      end&#10;&#10;      local count = 0&#10;      for i=1, length do&#10;        if count &gt; 0 then self:puts(',') end&#10;        self:puts(' ')&#10;        self:putValue(t[i])&#10;        count = count + 1&#10;      end&#10;&#10;      for _,k in ipairs(nonSequentialKeys) do&#10;        if count &gt; 0 then self:puts(',') end&#10;        self:tabify()&#10;        self:putKey(k)&#10;        self:puts(' = ')&#10;        self:putValue(t[k])&#10;        count = count + 1&#10;      end&#10;&#10;      if mt then&#10;        if count &gt; 0 then self:puts(',') end&#10;        self:tabify()&#10;        self:puts('&lt;metatable&gt; = ')&#10;        self:putValue(mt)&#10;      end&#10;    end)&#10;&#10;    if #nonSequentialKeys &gt; 0 or mt then -- result is multi-lined. Justify closing }&#10;      self:tabify()&#10;    elseif length &gt; 0 then -- array tables have one extra space before closing }&#10;      self:puts(' ')&#10;    end&#10;&#10;    self:puts('}')&#10;  end&#10;end&#10;&#10;function Inspector:putValue(v)&#10;  local tv = type(v)&#10;&#10;  if tv == 'string' then&#10;    self:puts(smartQuote(escape(v)))&#10;  elseif tv == 'number' or tv == 'boolean' or tv == 'nil' then&#10;    self:puts(tostring(v))&#10;  elseif tv == 'table' then&#10;    self:putTable(v)&#10;  else&#10;    self:puts('&lt;',tv,' ',self:getId(v),'&gt;')&#10;  end&#10;end&#10;&#10;-------------------------------------------------------------------&#10;&#10;function inspect.inspect(root, options)&#10;  options       = options or {}&#10;&#10;  local depth   = options.depth   or math.huge&#10;  local newline = options.newline or '\n'&#10;  local indent  = options.indent  or '  '&#10;  local process = options.process&#10;&#10;  if process then&#10;    root = processRecursive(process, root, {})&#10;  end&#10;&#10;  local inspector = setmetatable({&#10;    depth            = depth,&#10;    buffer           = {},&#10;    level            = 0,&#10;    ids              = setmetatable({}, idsMetaTable),&#10;    maxIds           = setmetatable({}, maxIdsMetaTable),&#10;    newline          = newline,&#10;    indent           = indent,&#10;    tableAppearances = countTableAppearances(root)&#10;  }, Inspector_mt)&#10;&#10;  inspector:putValue(root)&#10;&#10;  return table.concat(inspector.buffer)&#10;end&#10;&#10;setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })&#10;&#10;return inspect&#10;end&#10;&#10;inspect = getInspect()"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000006"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="generic" uuid="bcf8c6ddd64646bfb2ee176936c6f4ee">
        <luaMethod luaMethodName="LuaObject" luaMethodCode="&#13;&#10;LuaObject = {}&#13;&#10;LuaObject.__index = LuaObject&#13;&#10;&#13;&#10;setmetatable(LuaObject, {&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;function LuaObject:_init()&#13;&#10;end&#13;&#10;&#13;&#10;function LuaObject:isSerializable()&#13;&#10;&#9;return self[LUA_CONTRUCTOR_NAME] ~= nil&#13;&#10;end&#13;&#10;&#13;&#10;function LuaObject:getLuaClassName()&#13;&#10;&#9;return self[LUA_CONTRUCTOR_NAME]&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="7b1d08a10fe2482fa989ff61f346f456"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="lutils" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- lutils: Lua Utils module&#13;&#10;-- lutils Module.&#13;&#10;-- Author: Pascal Collberg&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;--&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;local package = require(&quot;package&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;lutils&quot;)&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;function flipTable(t)&#13;&#10;  local r = { }&#13;&#10;  for k, v in base.pairs(t) do&#13;&#10;    r[v] = k -- overrides duplicate values if any&#13;&#10;  end&#13;&#10;  return r&#13;&#10;end&#13;&#10;&#13;&#10;function trim(s)&#13;&#10;  return s:match &quot;&#94;%s*(.-)%s*$&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function strStarts(str, prefix)&#13;&#10;  return string.sub(str, 1, string.len(prefix)) == prefix&#13;&#10;end&#13;&#10;&#13;&#10;function strEnds(str, suffix)&#13;&#10;  return suffix == '' or string.sub(str, -string.len(suffix)) == suffix&#13;&#10;end&#13;&#10;&#13;&#10;function strNotEmpty(str)&#13;&#10;  return str ~= nil and trim(str) ~= &quot;&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function split(text, delimiter)&#13;&#10;  local list = {}&#13;&#10;  local pos = 1&#13;&#10;  if string.find(&quot;&quot;, delimiter, 1) then -- this would result in endless loops&#13;&#10;    error(&quot;delimiter matches empty string!&quot;)&#13;&#10;  end&#13;&#10;  while 1 do&#13;&#10;    local first, last = string.find(text, delimiter, pos)&#13;&#10;    if first then -- found?&#13;&#10;      table.insert(list, string.sub(text, pos, first-1))&#13;&#10;      pos = last+1&#13;&#10;    else&#13;&#10;      table.insert(list, string.sub(text, pos))&#13;&#10;      break&#13;&#10;    end&#13;&#10;  end&#13;&#10;  return list&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="76e7ef49a35e4c7a9577dc2610a93939"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="mutils" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- mutils: Midi Utils module&#13;&#10;-- lutils Module.&#13;&#10;-- Author: Pascal Collberg&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;--&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local bit = require(&quot;bit&quot;)&#13;&#10;local package = require(&quot;package&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;mutils&quot;)&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;function f2n(value)&#13;&#10;  local nibbles = base.MemoryBlock(4, true)&#13;&#10;  local n = math.floor(math.abs(value) * 256 + 0.13)&#13;&#10;  n = value &lt; 0 and 0x10000 - n or n&#13;&#10;  for pos = 0, 3 do&#13;&#10;    nibbles:setByte(pos, n % 16)&#13;&#10;    n = math.floor(n / 16)&#13;&#10;  end&#13;&#10;  return nibbles&#13;&#10;end&#13;&#10;&#13;&#10;function n2f(memBlock, offset)&#13;&#10;  local bi = base.BigInteger(0)&#13;&#10;  bi:setBitRangeAsInt(0, 4, memBlock:getByte(offset))&#13;&#10;  bi:setBitRangeAsInt(4, 4, memBlock:getByte(offset + 1))&#13;&#10;  bi:setBitRangeAsInt(8, 4, memBlock:getByte(offset + 2))&#13;&#10;  bi:setBitRangeAsInt(12, 4, memBlock:getByte(offset + 3))&#13;&#10;  local n = 0&#13;&#10;  for i = 0, 15 do&#13;&#10;    local factor = math.pow(2, i - 8)&#13;&#10;    n = n + bi:getBitRangeAsInt(i, 1) * factor&#13;&#10;  end&#13;&#10;  return memBlock:getByte(offset + 3) &gt;= 0x8 and n - 256 or n&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] n2d&#13;&#10;--&#13;&#10;function n2d(ls, ms)&#13;&#10;  local bi = base.BigInteger(0)&#13;&#10;  bi:setBitRangeAsInt(0, 4, ls)&#13;&#10;  bi:setBitRangeAsInt(4, 4, ms)&#13;&#10;  local retval = bi:getBitRangeAsInt(0, 8)&#13;&#10;  if retval &gt; 127 then&#13;&#10;    return retval - 256&#13;&#10;  else&#13;&#10;    return retval&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] n2du&#13;&#10;--&#13;&#10;function n2du(ls, ms)&#13;&#10;  local bi = base.BigInteger(0)&#13;&#10;  bi:setBitRangeAsInt(0, 4, ls)&#13;&#10;  bi:setBitRangeAsInt(4, 4, ms)&#13;&#10;  return bi:getBitRangeAsInt(0, 8)&#13;&#10;end&#13;&#10;&#13;&#10;function n2d2(byte1, byte2)&#13;&#10;  return byte1 * 16 + byte2&#13;&#10;end&#13;&#10;&#13;&#10;function d2n2(value)&#13;&#10;  local msb = math.floor(value / 16)&#13;&#10;  local lsb = value - (msb * 16)&#13;&#10;  local nibbles = base.MemoryBlock(2, true)&#13;&#10;  nibbles:setByte(0, msb)&#13;&#10;  nibbles:setByte(1, lsb)&#13;&#10;  return nibbles&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] d2n&#13;&#10;--&#13;&#10;function d2n(x)&#13;&#10;  local internalX = x&#13;&#10;  if x &lt; 0 then&#13;&#10;    local hex = bit.tohex(x, 2)&#13;&#10;    internalX = base.tonumber(hex, 16)&#13;&#10;  end&#13;&#10;  local bi = base.BigInteger(internalX)&#13;&#10;&#13;&#10;  local nibbles = base.MemoryBlock(2, true)&#13;&#10;  nibbles:setByte(0, bi:getBitRangeAsInt(0, 4))&#13;&#10;  nibbles:setByte(1, bi:getBitRangeAsInt(4, 4))&#13;&#10;  return nibbles&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] du2n&#13;&#10;--&#13;&#10;function du2n(x)&#13;&#10;  local bi = base.BigInteger(x)&#13;&#10;&#13;&#10;  local nibbles = base.MemoryBlock(2, true)&#13;&#10;  nibbles:setByte(0, bi:getBitRangeAsInt(0, 4))&#13;&#10;  nibbles:setByte(1, bi:getBitRangeAsInt(4, 4))&#13;&#10;  return nibbles&#13;&#10;end&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] a2n&#13;&#10;-- calculate the akai-splitted parameter value,returns table named split with two values&#13;&#10;function a2n(byteBlock)&#13;&#10;  local nibblizedBlock = base.MemoryBlock(byteBlock:getSize() * 2, true)&#13;&#10;  for i = 1, byteBlock:getSize() do&#13;&#10;    local nibbles = d2n(byteBlock:getByte(i - 1))&#13;&#10;    nibblizedBlock:copyFrom(nibbles, (i - 1) * 2, 2)&#13;&#10;  end&#13;&#10;  return nibblizedBlock&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] n2a&#13;&#10;--&#13;&#10;function n2a(nibblizedBlock)&#13;&#10;  local byteBlock = base.MemoryBlock(nibblizedBlock:getSize() / 2, true)&#13;&#10;  for i = 0, nibblizedBlock:getSize() - 1, 2 do&#13;&#10;    byteBlock:setByte(i / 2, n2d(nibblizedBlock:getByte(i), nibblizedBlock:getByte(i + 1)))&#13;&#10;  end&#13;&#10;  return byteBlock&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#mutils] d2b&#13;&#10;--&#13;&#10;function d2b(value, msbFirst)&#13;&#10;  local MS = math.floor(value / 128)&#13;&#10;&#13;&#10;  local bytes = base.MemoryBlock(2, true)&#13;&#10;  if msbFirst then&#13;&#10;    bytes:setByte(0, MS)&#13;&#10;    bytes:setByte(1, value - (MS * 128))&#13;&#10;  else&#13;&#10;    bytes:setByte(0, value - (MS * 128))&#13;&#10;    bytes:setByte(1, MS)&#13;&#10;  end&#13;&#10;  return bytes&#13;&#10;end&#13;&#10;&#13;&#10;function b2d(byte1, byte2)&#13;&#10;  return byte1 * 128 + byte2&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="dfdab28e67fc4f82a8ec8707c5415acc"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="cutils" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- cutils: Ctrlr Utils module&#13;&#10;-- cutils Module.&#13;&#10;-- Author: Pascal Collberg&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;--&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;local package = require(&quot;package&quot;)&#13;&#10;local os = require(&quot;os&quot;)&#13;&#10;local io = require(&quot;io&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;cutils&quot;)&#13;&#10;&#13;&#10;STATE_PROD, STATE_DEV = 0, 1&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;function getPathSeparator()&#13;&#10;  return package.config:sub(1,1)&#13;&#10;end&#13;&#10;&#13;&#10;--- Returns the opertaing system name as string.&#13;&#10;-- @return the opertaing system name as string&#13;&#10;function getOsName()&#13;&#10;  if getPathSeparator() == &quot;/&quot; then&#13;&#10;    return &quot;mac&quot;&#13;&#10;  else&#13;&#10;    return &quot;win&quot;&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @return the EOL character based on os&#13;&#10;function getEolChar()&#13;&#10;  if getOsName() == &quot;win&quot; then&#13;&#10;    return &quot;\r\n&quot;&#13;&#10;  else&#13;&#10;    return &quot;\n&quot;&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function getUserHome()&#13;&#10;  if getOsName() == &quot;win&quot; then&#13;&#10;    return os.getenv(&quot;HOMEDRIVE&quot;)&#13;&#10;  else&#13;&#10;    return &quot;/&quot;&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function getFileSize(file)&#13;&#10;  local wavFile = io.open(file:getFullPathName(), &quot;r&quot;)&#13;&#10;  local size = wavFile:seek(&quot;end&quot;)    -- get file size&#13;&#10;  wavFile:close()&#13;&#10;  return size&#13;&#10;end&#13;&#10;&#13;&#10;function getSyxAsMemBlock(file)&#13;&#10;  local loadedData = base.MemoryBlock()&#13;&#10;  if file:existsAsFile() then&#13;&#10;    file:loadFileAsData(loadedData)&#13;&#10;  end&#13;&#10;  return loadedData&#13;&#10;end&#13;&#10;&#13;&#10;function getFileContents(filepath)&#13;&#10;  local f = io.open(filepath, &quot;rb&quot;)&#13;&#10;  local content = &quot;&quot;&#13;&#10;  if f ~= nil then&#13;&#10;    content = f:read(&quot;*all&quot;)&#13;&#10;    f:close()&#13;&#10;  end&#13;&#10;&#13;&#10;  return content&#13;&#10;end&#13;&#10;&#13;&#10;function writeToFile(fileName, contents)&#13;&#10;  local file = io.open(fileName, &quot;w+&quot;)&#13;&#10;  file:write(contents)&#13;&#10;  file:close()&#13;&#10;end&#13;&#10;&#13;&#10;function writeSyxDataToFile(data, outfile)&#13;&#10;  if not outfile:isValid() then&#13;&#10;    return&#13;&#10;  end&#13;&#10;  -- Check if the file exists&#13;&#10;  if not outfile:existsAsFile() then&#13;&#10;    -- If file does not exist, then create it&#13;&#10;    if not outfile:create() then&#13;&#10;      -- If file cannot be created, then fail here&#13;&#10;      base.utils.warnWindow (&quot;\n\nSorry, the Editor failed to\nsave the data to disk!&quot;, &quot;The file does not exist.&quot;)&#13;&#10;      return&#13;&#10;    end&#13;&#10;  end&#13;&#10;  -- If we reached this point, we have a valid file we can try to write to&#13;&#10;  if outfile:replaceWithData (data) == false then&#13;&#10;    base.utils.warnWindow (&quot;File write&quot;, &quot;Sorry, the Editor failed to\nwrite the data to file!&quot;)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function toFilePath(fileDir, fileName)&#13;&#10;  return string.format(&quot;%s%s%s&quot;, fileDir, getPathSeparator(), fileName)&#13;&#10;end&#13;&#10;&#13;&#10;function getFileName(filePath)&#13;&#10;  local pathSeparator = getPathSeparator()&#13;&#10;  local lastSlash = string.find(filePath, string.format(&quot;%s[&#94;%s]*$&quot;, pathSeparator, pathSeparator))&#13;&#10;  return string.sub(filePath, lastSlash + 1)&#13;&#10;end&#13;&#10;&#13;&#10;function getRotationTransform(angle, x, y, w, h)&#13;&#10;  local timesPi = angle / 180&#13;&#10;  local xRot = x + w / 2&#13;&#10;  local yRot = y + h / 2&#13;&#10;  local transform = AffineTransform.rotation(timesPi * 3.1415926536, xRot, yRot)&#13;&#10;&#13;&#10;  if transform:isSingularity() ~= true then&#13;&#10;    return transform&#13;&#10;  else&#13;&#10;    return nil&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function getErrorMessage(err)&#13;&#10;  if base.PANEL_STATE == STATE_DEBUG then&#13;&#10;    base.debug.traceback()&#13;&#10;  end&#13;&#10;&#13;&#10;  if base.type(err) == &quot;string&quot; then&#13;&#10;    return err:gsub(&quot;.*:%d+:%s*&quot;, &quot;&quot;)&#13;&#10;  else&#13;&#10;    return &quot;Unknown error occurred&quot;&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function mergeArrayOfMemBlocks(memBlockArray)&#13;&#10;  local size = 0&#13;&#10;  for k, memBlock in base.ipairs(memBlockArray) do&#13;&#10;    size = size + memBlock:getSize()&#13;&#10;  end&#13;&#10;  local buffer = base.MemoryBlock(size, true)&#13;&#10;  local offset = 0&#13;&#10;  for k, memBlock in base.ipairs(memBlockArray) do&#13;&#10;    buffer:copyFrom(memBlock, offset, memBlock:getSize())&#13;&#10;    offset = offset + memBlock:getSize()&#13;&#10;  end&#13;&#10;  return buffer&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="75f9d5fceb254091ba5c5948e8d9019d"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Dispatcher" luaMethodCode="&#13;&#10;Dispatcher = {}&#13;&#10;Dispatcher.__index = Dispatcher&#13;&#10;&#13;&#10;setmetatable(Dispatcher, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;function Dispatcher:_init()&#13;&#10;  LuaObject._init(self)&#13;&#10;  self.listeners = {}&#13;&#10;end&#13;&#10;&#13;&#10;local bind = function(t, k)&#13;&#10;&#9;return function(...) return t[k](t, ...) end&#13;&#10;end&#13;&#10;&#13;&#10;function Dispatcher:addListener(listener, funcName)&#13;&#10;&#9;table.insert(self.listeners, bind(listener, funcName))&#13;&#10;&#9;return table.getn(self.listeners)&#13;&#10;end&#13;&#10;&#13;&#10;function Dispatcher:removeListener(id)&#13;&#10;&#9;table.remove(self.listeners, id)&#13;&#10;end&#13;&#10;&#13;&#10;function Dispatcher:notifyListeners()&#13;&#10;&#9;for k,v in pairs(self.listeners) do&#13;&#10;&#9;&#9;v(self)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="e381d34c71eb41bfb42b2a68197caf2e"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="json4ctrlr" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- JSON4Lua: JSON encoding / decoding support for the Lua language.&#13;&#10;-- json Module.&#13;&#10;-- Author: Craig Mason-Jones&#13;&#10;-- Homepage: http://json.luaforge.net/&#13;&#10;-- Version: 0.9.40&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;-- Please see LICENCE.txt for details.&#13;&#10;--&#13;&#10;-- USAGE:&#13;&#10;-- This module exposes two functions:&#13;&#10;--   encode(o)&#13;&#10;--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.&#13;&#10;--   decode(json_string)&#13;&#10;--     Returns a Lua object populated with the data encoded in the JSON string json_string.&#13;&#10;--&#13;&#10;-- REQUIREMENTS:&#13;&#10;--   compat-5.1 if using Lua 5.0&#13;&#10;--&#13;&#10;-- CHANGELOG&#13;&#10;--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). &#13;&#10;--          Fixed Lua 5.1 compatibility issues.&#13;&#10;--   &#9;&#9;Introduced json.null to have null values in associative arrays.&#13;&#10;--          encode() performance improvement (more than 50%) through table.concat rather than ..&#13;&#10;--          Introduced decode ability to ignore /**/ comments in the JSON string.&#13;&#10;--   0.9.10 Fix to array encoding / decoding to correctly manage nil/null values in arrays.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;cson&quot;)&#13;&#10;&#13;&#10;-- Public functions&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;local decode_scanArray&#13;&#10;local decode_scanComment&#13;&#10;local decode_scanConstant&#13;&#10;local decode_scanNumber&#13;&#10;local decode_scanObject&#13;&#10;local decode_scanString&#13;&#10;local decode_scanWhitespace&#13;&#10;local encodeString&#13;&#10;local isArray&#13;&#10;local isEncodable&#13;&#10;local isEncodable&#13;&#10;local getNativeName&#13;&#10;&#13;&#10;local LUA_CONSTRUCTOR_NAME = &quot;LUA_CLASS_NAME&quot;&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;--- Encodes an arbitrary Lua object / variable.&#13;&#10;-- @param v The Lua object / variable to be JSON encoded.&#13;&#10;-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)&#13;&#10;function encode (v)&#13;&#10;  -- Handle nil values&#13;&#10;  if v==nil then&#13;&#10;    return &quot;null&quot;&#13;&#10;  end&#13;&#10;  local vtype = base.type(v)  &#13;&#10;&#13;&#10;  -- Handle strings&#13;&#10;  if vtype=='string' then    &#13;&#10;    return '&quot;' .. encodeString(v) .. '&quot;'&#9;    -- Need to handle encoding in string&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle booleans&#13;&#10;  if vtype=='number' or vtype=='boolean' then&#13;&#10;    return base.tostring(v)&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle tables&#13;&#10;  if vtype=='table' then&#13;&#10;    if hasIsSerializableMethod(v) and not v:isSerializable() then&#13;&#10;      assert(false,'encode attempt to encode not serializable type ' .. vtype .. ':' .. tostring(v))&#13;&#10;    end&#13;&#10;    local rval = {}&#13;&#10;    -- Consider arrays separately&#13;&#10;    local bArray, maxCount = isArray(v)&#13;&#10;    if bArray then&#13;&#10;      for i = 1,maxCount do&#13;&#10;        table.insert(rval, encode(v[i]))&#13;&#10;      end&#13;&#10;    else&#9;-- An object, not an array&#13;&#10;      for i,j in base.pairs(v) do&#13;&#10;        if isEncodable(i) and isEncodable(j) then&#13;&#10;          table.insert(rval, '&quot;' .. encodeString(i) .. '&quot;:' .. encode(j))&#13;&#10;        end&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if bArray then&#13;&#10;      return '[' .. table.concat(rval,',') ..']'&#13;&#10;    else&#13;&#10;      return '{' .. table.concat(rval,',') .. '}'&#13;&#10;    end&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- pascalc edit start&#13;&#10;  local vNativeName = getNativeName(v)&#13;&#10;  if vNativeName == &quot;MemoryBlock&quot; then&#13;&#10;    return string.format('{&quot;nativeName&quot;:&quot;MemoryBlock&quot;,&quot;hexString&quot;:&quot;%s&quot;}', v:toHexString(1))&#13;&#10;  end&#13;&#10;&#13;&#10;  if vNativeName == &quot;File&quot; then&#13;&#10;    return string.format('{&quot;nativeName&quot;:&quot;File&quot;,&quot;fullPathName&quot;:&quot;%s&quot;}', v:getFullPathName():gsub(&quot;\\&quot;, &quot;/&quot;))&#13;&#10;  end&#13;&#10;  -- pascalc edit end&#13;&#10;&#13;&#10;  -- Handle null values&#13;&#10;  if vtype=='function' and v==null then&#13;&#10;    return 'null'&#13;&#10;  end&#13;&#10;  &#13;&#10;  base.assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. base.tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.&#13;&#10;-- @param s The string to scan.&#13;&#10;-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.&#13;&#10;-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,&#13;&#10;-- and the position of the first character after&#13;&#10;-- the scanned JSON object.&#13;&#10;function decode(s, startPos)&#13;&#10;  startPos = startPos and startPos or 1&#13;&#10;  startPos = decode_scanWhitespace(s,startPos)&#13;&#10;  base.assert(startPos&lt;=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')&#13;&#10;  local curChar = string.sub(s,startPos,startPos)&#13;&#10;  -- Object&#13;&#10;  if curChar=='{' then&#13;&#10;    return decode_scanObject(s,startPos)&#13;&#10;  end&#13;&#10;  -- Array&#13;&#10;  if curChar=='[' then&#13;&#10;    return decode_scanArray(s,startPos)&#13;&#10;  end&#13;&#10;  -- Number&#13;&#10;  if string.find(&quot;+-0123456789.e&quot;, curChar, 1, true) then&#13;&#10;    return decode_scanNumber(s,startPos)&#13;&#10;  end&#13;&#10;  -- String&#13;&#10;  if curChar==[[&quot;]] or curChar==[[']] then&#13;&#10;    return decode_scanString(s,startPos)&#13;&#10;  end&#13;&#10;  if string.sub(s,startPos,startPos+1)=='/*' then&#13;&#10;    return decode(s, decode_scanComment(s,startPos))&#13;&#10;  end&#13;&#10;  -- Otherwise, it must be a constant&#13;&#10;  return decode_scanConstant(s,startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- The null function allows one to specify a null value in an associative array (which is otherwise&#13;&#10;-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null }&#13;&#10;function null()&#13;&#10;  return null -- so json.null() will also return null ;-)&#13;&#10;end&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Internal, PRIVATE functions.&#13;&#10;-- Following a Python-like convention, I have prefixed all these 'PRIVATE'&#13;&#10;-- functions with an underscore.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;--- Scans an array from JSON into a Lua object&#13;&#10;-- startPos begins at the start of the array.&#13;&#10;-- Returns the array and the next starting position&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position for the scan.&#13;&#10;-- @return table, int The scanned array as a table, and the position of the next character to scan.&#13;&#10;function decode_scanArray(s,startPos)&#13;&#10;  local array = {}&#9;-- The return value&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )&#13;&#10;  startPos = startPos + 1&#13;&#10;  -- Infinite loop for array elements&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen,'JSON String ended unexpectedly scanning array.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar==']') then&#13;&#10;      return array, startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON String ended unexpectedly scanning array.')&#13;&#10;    object, startPos = decode(s,startPos)&#13;&#10;    table.insert(array,object)&#13;&#10;  until false&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a comment and discards the comment.&#13;&#10;-- Returns the position of the next character following the comment.&#13;&#10;-- @param string s The JSON string to scan.&#13;&#10;-- @param int startPos The starting position of the comment&#13;&#10;function decode_scanComment(s, startPos)&#13;&#10;  base.assert( string.sub(s,startPos,startPos+1)=='/*', &quot;decode_scanComment called but comment does not start at position &quot; .. startPos)&#13;&#10;  local endPos = string.find(s,'*/',startPos+2)&#13;&#10;  base.assert(endPos~=nil, &quot;Unterminated comment in string at &quot; .. startPos)&#13;&#10;  return endPos+2  &#13;&#10;end&#13;&#10;&#13;&#10;--- Scans for given constants: true, false or null&#13;&#10;-- Returns the appropriate Lua type, and the position of the next character to read.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position in the string at which to start scanning.&#13;&#10;-- @return object, int The object (true, false or nil) and the position at which the next character should be &#13;&#10;-- scanned.&#13;&#10;function decode_scanConstant(s, startPos)&#13;&#10;  local consts = { [&quot;true&quot;] = true, [&quot;false&quot;] = false, [&quot;null&quot;] = nil }&#13;&#10;  local constNames = {&quot;true&quot;,&quot;false&quot;,&quot;null&quot;}&#13;&#10;&#13;&#10;  for i,k in base.pairs(constNames) do&#13;&#10;    --print (&quot;[&quot; .. string.sub(s,startPos, startPos + string.len(k) -1) ..&quot;]&quot;, k)&#13;&#10;    if string.sub(s,startPos, startPos + string.len(k) -1 )==k then&#13;&#10;      return consts[k], startPos + string.len(k)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  base.assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a number from the JSON encoded string.&#13;&#10;-- (in fact, also is able to scan numeric +- eqns, which is not&#13;&#10;-- in the JSON spec.)&#13;&#10;-- Returns the number, and the position of the next character&#13;&#10;-- after the number.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position at which to start scanning.&#13;&#10;-- @return number, int The extracted number and the position of the next character to scan.&#13;&#10;function decode_scanNumber(s,startPos)&#13;&#10;  local endPos = startPos+1&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local acceptableChars = &quot;+-0123456789.e&quot;&#13;&#10;  while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)&#13;&#10;&#9;and endPos&lt;=stringLen&#13;&#10;&#9;) do&#13;&#10;    endPos = endPos + 1&#13;&#10;  end&#13;&#10;  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)&#13;&#10;  local stringEval = base.loadstring(stringValue)&#13;&#10;  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)&#13;&#10;  return stringEval(), endPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON object into a Lua object.&#13;&#10;-- startPos begins at the start of the object.&#13;&#10;-- Returns the object and the next starting position.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return table, int The scanned object as a table and the position of the next character to scan.&#13;&#10;function decode_scanObject(s,startPos)&#13;&#10;  local object = {}&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local key, value&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)&#13;&#10;  startPos = startPos + 1&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly while scanning object.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar=='}') then&#13;&#10;      -- pascalc edit start&#13;&#10;      if object[LUA_CONSTRUCTOR_NAME] ~= nil then&#13;&#10;        local temp = base[object[LUA_CONSTRUCTOR_NAME]]()&#13;&#10;        for k,v in base.pairs(object)do&#13;&#10;          temp[k] = v&#13;&#10;        end&#13;&#10;        return temp,startPos+1&#13;&#10;      elseif object[&quot;nativeName&quot;] ~= nil then&#13;&#10;        if object[&quot;nativeName&quot;] == &quot;File&quot; then&#13;&#10;          return base.File(object[&quot;fullPathName&quot;]),startPos+1&#13;&#10;        elseif object[&quot;nativeName&quot;] == &quot;MemoryBlock&quot; then&#13;&#10;          return base.MemoryBlock(object[&quot;hexString&quot;]),startPos+1&#13;&#10;        end&#13;&#10;      else&#13;&#10;        return object,startPos+1&#13;&#10;      end&#13;&#10;      -- pascalc edit end&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly scanning object.')&#13;&#10;    -- Scan the key&#13;&#10;    key, startPos = decode(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    value, startPos = decode(s,startPos)&#13;&#10;    object[key]=value&#13;&#10;  until false&#9;-- infinite loop while key-value pairs are found&#13;&#10;end&#13;&#10;&#13;&#10;-- START SoniEx2&#13;&#10;-- Initialize some things used by decode_scanString&#13;&#10;-- You know, for efficiency&#13;&#10;local escapeSequences = {&#13;&#10;  [&quot;\\t&quot;] = &quot;\t&quot;,&#13;&#10;  [&quot;\\f&quot;] = &quot;\f&quot;,&#13;&#10;  [&quot;\\r&quot;] = &quot;\r&quot;,&#13;&#10;  [&quot;\\n&quot;] = &quot;\n&quot;,&#13;&#10;  [&quot;\\b&quot;] = &quot;\b&quot;&#13;&#10;}&#13;&#10;base.setmetatable(escapeSequences, {__index = function(t,k)&#13;&#10;  -- skip &quot;\&quot; aka strip escape&#13;&#10;  return string.sub(k,2)&#13;&#10;end})&#13;&#10;-- END SoniEx2&#13;&#10;&#13;&#10;--- Scans a JSON string from the opening inverted comma or single quote to the&#13;&#10;-- end of the string.&#13;&#10;-- Returns the string extracted as a Lua string,&#13;&#10;-- and the position of the next non-string character&#13;&#10;-- (after the closing inverted comma or single quote).&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return string, int The extracted string as a Lua string, and the next character to parse.&#13;&#10;function decode_scanString(s,startPos)&#13;&#10;  base.assert(startPos, 'decode_scanString(..) called without start position')&#13;&#10;  local startChar = string.sub(s,startPos,startPos)&#13;&#10;  -- START SoniEx2&#13;&#10;  -- PS: I don't think single quotes are valid JSON&#13;&#10;  base.assert(startChar == [[&quot;]] or startChar == [[']],'decode_scanString called for a non-string')&#13;&#10;  --base.assert(startPos, &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; for string at position &quot; .. oldStart)&#13;&#10;  local t = {}&#13;&#10;  local i,j = startPos,startPos&#13;&#10;  while string.find(s, startChar, j+1) ~= j+1 do&#13;&#10;    local oldj = j&#13;&#10;    i,j = string.find(s, &quot;\\.&quot;, j+1)&#13;&#10;    local x,y = string.find(s, startChar, oldj+1)&#13;&#10;    if not i or x &lt; i then&#13;&#10;--      base.print(s, startPos, string.sub(s,startPos,oldj))&#13;&#10;      i,j = x,y-1&#13;&#10;--      if not x then base.print(s, startPos, string.sub(s,startPos,oldj)) end&#13;&#10;    end&#13;&#10;    table.insert(t, string.sub(s, oldj+1, i-1))&#13;&#10;    if string.sub(s, i, j) == &quot;\\u&quot; then&#13;&#10;      local a = string.sub(s,j+1,j+4)&#13;&#10;      j = j + 4&#13;&#10;      local n = base.tonumber(a, 16)&#13;&#10;      base.assert(n, &quot;String decoding failed: bad Unicode escape &quot; .. a .. &quot; at position &quot; .. i .. &quot; : &quot; .. j)&#13;&#10;      -- math.floor(x/2&#94;y) == lazy right shift&#13;&#10;      -- a % 2&#94;b == bitwise_and(a, (2&#94;b)-1)&#13;&#10;      -- 64 = 2&#94;6&#13;&#10;      -- 4096 = 2&#94;12 (or 2&#94;6 * 2&#94;6)&#13;&#10;      local x&#13;&#10;      if n &lt; 0x80 then&#13;&#10;        x = string.char(n % 0x80)&#13;&#10;      elseif n &lt; 0x800 then&#13;&#10;        -- [110x xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xC0 + (math.floor(n/64) % 0x20), 0x80 + (n % 0x40))&#13;&#10;      else&#13;&#10;        -- [1110 xxxx] [10xx xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xE0 + (math.floor(n/4096) % 0x10), 0x80 + (math.floor(n/64) % 0x40), 0x80 + (n % 0x40))&#13;&#10;      end&#13;&#10;      table.insert(t, x)&#13;&#10;    else&#13;&#10;      table.insert(t, escapeSequences[string.sub(s, i, j)])&#13;&#10;    end&#13;&#10;  end&#13;&#10;  table.insert(t,string.sub(j, j+1))&#13;&#10;  base.assert(string.find(s, startChar, j+1), &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; at position &quot; .. j .. &quot;(for string at position &quot; .. startPos .. &quot;)&quot;)&#13;&#10;  return table.concat(t,&quot;&quot;), j+2&#13;&#10;  -- END SoniEx2&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON string skipping all whitespace from the current start position.&#13;&#10;-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.&#13;&#10;-- @param s The string being scanned&#13;&#10;-- @param startPos The starting position where we should begin removing whitespace.&#13;&#10;-- @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string&#13;&#10;-- was reached.&#13;&#10;function decode_scanWhitespace(s,startPos)&#13;&#10;  local whitespace=&quot; \n\r\t&quot;&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  and startPos &lt;= stringLen) do&#13;&#10;    startPos = startPos + 1&#13;&#10;  end&#13;&#10;  return startPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Encodes a string to be JSON-compatible.&#13;&#10;-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-)&#13;&#10;-- @param s The string to return as a JSON encoded (i.e. backquoted string)&#13;&#10;-- @return The string appropriately escaped.&#13;&#10;&#13;&#10;local escapeList = {&#13;&#10;    ['&quot;']  = '\\&quot;',&#13;&#10;    ['\\'] = '\\\\',&#13;&#10;    ['/']  = '\\/', &#13;&#10;    ['\b'] = '\\b',&#13;&#10;    ['\f'] = '\\f',&#13;&#10;    ['\n'] = '\\n',&#13;&#10;    ['\r'] = '\\r',&#13;&#10;    ['\t'] = '\\t'&#13;&#10;}&#13;&#10;&#13;&#10;function encodeString(s)&#13;&#10; return s:gsub(&quot;.&quot;, function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat&#13;&#10;end&#13;&#10;&#13;&#10;-- Determines whether the given Lua type is an array or a table / dictionary.&#13;&#10;-- We consider any table an array if it has indexes 1..n for its n items, and no&#13;&#10;-- other data in the table.&#13;&#10;-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...&#13;&#10;-- @param t The table to evaluate as an array&#13;&#10;-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,&#13;&#10;-- the second returned value is the maximum&#13;&#10;-- number of indexed elements in the array. &#13;&#10;function isArray(t)&#13;&#10;  -- Next we count all the elements, ensuring that any non-indexed elements are not-encodable &#13;&#10;  -- (with the possible exception of 'n')&#13;&#10;  local maxIndex = 0&#13;&#10;  for k,v in base.pairs(t) do&#13;&#10;    if (base.type(k)=='number' and math.floor(k)==k and 1&lt;=k) then&#9;-- k,v is an indexed pair&#13;&#10;      if (not isEncodable(v)) then return false end&#9;-- All array elements must be encodable&#13;&#10;      maxIndex = math.max(maxIndex,k)&#13;&#10;    else&#13;&#10;      if (k=='n') then&#13;&#10;        if v ~= table.getn(t) then return false end  -- False if n does not hold the number of elements&#13;&#10;      else -- Else of (k=='n')&#13;&#10;        if isEncodable(v) then return false end&#13;&#10;      end  -- End of (k~='n')&#13;&#10;    end -- End of k,v not an indexed pair&#13;&#10;  end  -- End of loop across all pairs&#13;&#10;  return true, maxIndex&#13;&#10;end&#13;&#10;&#13;&#10;--- Determines whether the given Lua object / table / variable can be JSON encoded. The only&#13;&#10;-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.&#13;&#10;-- In this implementation, all other types are ignored.&#13;&#10;-- @param o The object to examine.&#13;&#10;-- @return boolean True if the object should be JSON encoded, false if it should be ignored.&#13;&#10;function isEncodable(o)&#13;&#10;  local t = base.type(o)&#13;&#10;  if t == &quot;string&quot; and o == &quot;listeners&quot; then&#13;&#10;    return false&#13;&#10;  end&#13;&#10;  local nativeName = getNativeName(o)&#13;&#10;  return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table') or (t=='function' and o==null)&#13;&#10;    or nativeName == &quot;MemoryBlock&quot; or nativeName == &quot;File&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function getNativeName(o)&#13;&#10;  info = base.class_info(o)&#13;&#10;  return info.name&#13;&#10;end&#13;&#10;&#13;&#10;function hasIsSerializableMethod(o)&#13;&#10;  local meta = base.getmetatable(o)&#13;&#10;  if meta == nil then&#13;&#10;    return false&#13;&#10;  else&#13;&#10;    return base.type(meta[&quot;isSerializable&quot;]) == &quot;function&quot;&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="5dd93f96ef4d4b59bc6b92e374e9524d"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Logger" luaMethodCode="&#13;&#10;FINE, INFO, WARN = 2, 1, 0&#13;&#10;LOG_LEVEL = WARN&#13;&#10;&#13;&#10;local GLOBAL_LOG_FILE = io.open(&quot;akaiS2000Panel.log&quot;, &quot;w&quot;)&#13;&#10;&#13;&#10;function flushLogFile()&#13;&#10;  GLOBAL_LOG_FILE:flush()&#13;&#10;end&#13;&#10;&#13;&#10;local writeLogFile = function(line)&#13;&#10;  if GLOBAL_LOG_FILE ~= nil then  &#13;&#10;    GLOBAL_LOG_FILE:write(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;Logger = {}&#13;&#10;Logger.__index = Logger&#13;&#10;&#13;&#10;setmetatable(Logger, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;function Logger:_init(loggerName)&#13;&#10;  LuaObject._init(self)&#13;&#10;  self.name = loggerName&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:setLevel(level)&#13;&#10;  LOG_LEVEL = level&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:getLevel()&#13;&#10;  return LOG_LEVEL&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:warn(log, ...)&#13;&#10;  if LOG_LEVEL &gt;= WARN then&#13;&#10;    local line = string.format(&quot;[WARN] [%s] - %s&quot;, self.name, string.format(log, ...))&#13;&#10;    console(line)&#13;&#10;    writeLogFile(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:info(log, ...)&#13;&#10;  if LOG_LEVEL &gt;= INFO then&#13;&#10;    local line = string.format(&quot;[INFO] [%s] - %s&quot;, self.name, string.format(log, ...))&#13;&#10;    console(line)&#13;&#10;    writeLogFile(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:fine(log, ...)&#13;&#10;  if LOG_LEVEL &gt;= FINE then&#13;&#10;    local line = string.format(&quot;[FINE] [%s] - %s&quot;, self.name, string.format(log, ...))&#13;&#10;    console(line)&#13;&#10;    writeLogFile(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:warnIf(condition, log, ...)&#13;&#10;  if LOG_LEVEL &gt;= WARN and condition then&#13;&#10;    local line = string.format(&quot;[WARN] [%s] - %s&quot;, self.name, string.format(log, ...))&#13;&#10;    console(line)&#13;&#10;    writeLogFile(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:infoIf(condition, log, ...)&#13;&#10;  if LOG_LEVEL &gt;= INFO and condition then&#13;&#10;    local line = string.format(&quot;[INFO] [%s] - %s&quot;, self.name, string.format(log, ...))&#13;&#10;    console(line)&#13;&#10;    writeLogFile(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Logger:fineIf(condition, log, ...)&#13;&#10;  if LOG_LEVEL &gt;= FINE and condition then&#13;&#10;    local line = string.format(&quot;[FINE] [%s] - %s&quot;, self.name, string.format(log, ...))&#13;&#10;    console(line)&#13;&#10;    writeLogFile(line)&#13;&#10;  end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="902315381e9c4a58be2ae1b6089f5bc9"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="SyxMsg" luaMethodCode="&#13;&#10;SyxMsg = {}&#13;&#10;SyxMsg.__index = SyxMsg&#13;&#10;&#13;&#10;setmetatable(SyxMsg, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;function SyxMsg:_init()&#13;&#10;  LuaObject._init(self)&#13;&#10;  self.data = nil&#13;&#10;end&#13;&#10;&#13;&#10;function SyxMsg:toMidiMessage()&#13;&#10;&#9;return CtrlrMidiMessage(self.data)&#13;&#10;end&#13;&#10;&#13;&#10;function SyxMsg:toString()&#13;&#10;&#9;return self.data:toHexString(1)&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="c1ff207fc2154a46bf682d35709b546f"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="AbstractController" luaMethodCode="&#13;&#10;AbstractController = {}&#13;&#10;AbstractController.__index = AbstractController&#13;&#10;&#13;&#10;local log = Logger(&quot;AbstractController&quot;)&#13;&#10;&#13;&#10;setmetatable(AbstractController, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;function AbstractController:_init()&#13;&#10;  LuaObject._init(self)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setMax(compName, max)&#13;&#10;  panel:getComponent(compName):setProperty(&quot;uiSliderMax&quot;, max, false)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setText(compName, text)&#13;&#10;  panel:getComponent(compName):setText(text)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getText(compName)&#13;&#10;  local temp = panel:getComponent(compName):getProperty(&quot;uiLabelText&quot;)&#13;&#10;  if temp == nil then&#13;&#10;    return &quot;&quot;&#13;&#10;  else&#13;&#10;    return temp&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setValueByCustomName(modName, value, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local mod = panel:getModulatorWithProperty(&quot;modulatorCustomName&quot;, modName)&#13;&#10;  if mod == nil then&#13;&#10;    LOGGER:warn(&quot;Could not find modulator %s&quot;, modName)&#13;&#10;  else&#13;&#10;    mod:setValue(value, false, mute)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setValueByCustomNameMapped(modName, value, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local mod = panel:getModulatorWithProperty(&quot;modulatorCustomName&quot;, modName)&#13;&#10;  if mod == nil then&#13;&#10;    LOGGER:warn(&quot;Could not find modulator %s&quot;, modName)&#13;&#10;  else&#13;&#10;    mod:setValueMapped(value, false, mute)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setValueByCustomIndex(index, value, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local mod = self:getModulatorByCustomIndex(index)&#13;&#10;  if mod == nil then&#13;&#10;    LOGGER:warn(&quot;Could not find modulator %d&quot;, index)&#13;&#10;  else&#13;&#10;    mod:setValue(value, false, mute)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setValueByCustomIndexMapped(index, value, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local mod = self:getModulatorByCustomIndex(index)&#13;&#10;  if mod == nil then&#13;&#10;    LOGGER:warn(&quot;Could not find modulator %d&quot;, index)&#13;&#10;  else&#13;&#10;    mod:setValueMapped(value, false, mute)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setValue(modName, value, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local mod = panel:getModulatorByName(modName)&#13;&#10;  if mod == nil then&#13;&#10;    LOGGER:warn(&quot;Could not find modulator %s&quot;, modName)&#13;&#10;  else&#13;&#10;    mod:setValue(value, false, mute)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setValueForce(modName, value, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local mod = panel:getModulatorByName(modName)&#13;&#10;  if mod == nil then&#13;&#10;    LOGGER:warn(&quot;Could not find modulator %s&quot;, modName)&#13;&#10;  else&#13;&#10;    mod:setValue(value, true, mute)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getValue(modName)&#13;&#10;  return panel:getModulatorByName(modName):getValue()&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getValueByCustomName(modName)&#13;&#10;  return panel:getModulatorWithProperty(&quot;modulatorCustomName&quot;, modName):getValue()&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getValueByCustomIndex(index)&#13;&#10;  return self:getModulatorByCustomIndex(index):getValue()&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getModulatorByCustomName(modName)&#13;&#10;  local mod = panel:getModulatorWithProperty(&quot;modulatorCustomName&quot;, modName)&#13;&#10;  if mod ~= nil and mod:getProperty(&quot;modulatorCustomName&quot;) ~= nil then&#13;&#10;    return mod&#13;&#10;  else&#13;&#10;    return nil&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getModulatorByCustomIndex(index)&#13;&#10;  local mod = panel:getModulatorWithProperty(&quot;modulatorCustomIndex&quot;, string.format(&quot;%d&quot;, index))&#13;&#10;  if mod ~= nil and tonumber(mod:getProperty(&quot;modulatorCustomIndex&quot;)) == index then&#13;&#10;    return mod&#13;&#10;  else&#13;&#10;    return nil&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:getModulatorName(mod)&#13;&#10;  return mod:getProperty(&quot;name&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:toggleVisibility(name, visible)&#13;&#10;  if visible then&#13;&#10;    panel:getComponent(name):setProperty(&quot;componentVisibility&quot;, 1, false)&#13;&#10;  else&#13;&#10;    panel:getComponent(name):setProperty(&quot;componentVisibility&quot;, 0, false)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setListBoxContents(name, contents)&#13;&#10;  panel:getComponent(name):setProperty(&quot;uiListBoxContent&quot;, contents, false)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setComboBoxContents(name, contents)&#13;&#10;  panel:getComponent(name):setProperty(&quot;uiComboContent&quot;, contents, false)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:toggleLayerVisibility(layerName, visible)&#13;&#10;  local canvas = panel:getCanvas()&#13;&#10;  if visible then&#13;&#10;    canvas:getLayerByName(layerName):setPropertyInt(&quot;uiPanelCanvasLayerVisibility&quot;, 1)&#13;&#10;  else&#13;&#10;    canvas:getLayerByName(layerName):setPropertyInt(&quot;uiPanelCanvasLayerVisibility&quot;, 0)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:toggleActivation(name, enabled)&#13;&#10;  if enabled then&#13;&#10;    panel:getComponent(name):setProperty(&quot;componentDisabled&quot;, 0, false)&#13;&#10;  else&#13;&#10;    panel:getComponent(name):setProperty(&quot;componentDisabled&quot;, 1, false)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setVisibleName(name, visibleName)&#13;&#10;    panel:getComponent(name):setProperty(&quot;componentVisibleName&quot;, visibleName, false)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setVisibleName(name, visibleName)&#13;&#10;    panel:getComponent(name):setProperty(&quot;componentVisibleName&quot;, visibleName, false)&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractController:setFixedSliderContent(name, content)&#13;&#10;    panel:getComponent(name):setProperty(&quot;uiFixedSliderContent&quot;, content, false)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#AbstractController] sendMidiMessage&#13;&#10;--&#13;&#10;function AbstractController:sendMidiMessage(syxMsg)&#13;&#10;  panel:sendMidiMessageNow(syxMsg:toMidiMessage())&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#AbstractController] sendMidiMessages&#13;&#10;--&#13;&#10;function AbstractController:sendMidiMessages(msgs, interval)&#13;&#10;  for k, nextMsg in pairs(msgs) do&#13;&#10;    panel:sendMidi(nextMsg:toMidiMessage(), interval)&#13;&#10;  end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="eb3fdcf21e0f4bfcb23d09d1cf3ff466"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="DefaultControllerBase" luaMethodCode="&#13;&#10;---&#13;&#10;-- @field [parent=#DefaultControllerBase] log&#13;&#10;--&#13;&#10;local log = Logger(&quot;DefaultControllerBase&quot;)&#13;&#10;&#13;&#10;DefaultControllerBase = {}&#13;&#10;DefaultControllerBase.__index = DefaultControllerBase&#13;&#10;&#13;&#10;setmetatable(DefaultControllerBase, {&#13;&#10;  __index = AbstractController, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] _init&#13;&#10;--&#13;&#10;function DefaultControllerBase:_init(voiceSize, bankSize, standAlonePatchPointer, bankPointer)&#13;&#10;  AbstractController._init(self)&#13;&#10;  self.bank = bankPointer()&#13;&#10;  self.bankPointer = bankPointer&#13;&#10;  self.standAlonePatchPointer = standAlonePatchPointer&#13;&#10;  self.receiveBuffer = nil&#13;&#10;  self.receiveBankOffset = -1&#13;&#10;  self.voiceSize = voiceSize&#13;&#10;  self.bankSize = bankSize&#13;&#10;  self.midiFunction = loadData&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] patch2Mods&#13;&#10;--&#13;&#10;-- This method assigns modulators from a patch&#13;&#10;-- to all modulators in the panel&#13;&#10;function DefaultControllerBase:patch2Mods(patch, mute)&#13;&#10;  mute = mute or false&#13;&#10;  for i = 0, self.voiceSize do -- gets the voice parameter values&#13;&#10;    local mod = self:getModulatorByCustomName(string.format(&quot;Voice%d&quot;, i))&#13;&#10;    if mod ~= nil then&#13;&#10;      mod:setValue(patch:getValue(i), false, mute)&#13;&#10;    end&#13;&#10;&#13;&#10;  end&#13;&#10;  self:setStatus(patch:getPatchName())&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] mods2Patch&#13;&#10;--&#13;&#10;-- This method assembles the param values from&#13;&#10;-- all modulators and stores them in a patch&#13;&#10;function DefaultControllerBase:mods2Patch(patch)&#13;&#10;  -- run through all modulators and fetch their value&#13;&#10;  for i = 0, self.voiceSize do&#13;&#10;    local mod = self:getModulatorByCustomName(string.format(&quot;Voice%d&quot;, i))&#13;&#10;    if mod ~= nil then&#13;&#10;      patch:setValue(i, mod:getValue())&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  patch:setPatchName(self:getStatus())&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] assignBank&#13;&#10;--&#13;&#10;-- This method stores the param values from all modulators&#13;&#10;-- and stores them in a specified patch location of a bank&#13;&#10;function DefaultControllerBase:assignBank(bank)&#13;&#10;  self.bank = bank&#13;&#10;  self.bank:setSelectedPatchIndex(0)&#13;&#10;  self:patch2Mods(bank:getSelectedPatch(), true)&#13;&#10;&#13;&#10;  self:setValue(&quot;patchSelect&quot;, bank:getSelectedPatchIndex())&#13;&#10;  self:toggleActivation(&quot;patchSelect&quot;, true)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] loadData&#13;&#10;--&#13;&#10;function DefaultControllerBase:loadData(data, mute)&#13;&#10;  mute = mute or false&#13;&#10;  local midiSize = data:getSize()&#13;&#10;  if midiSize == self.bankSize then&#13;&#10;    local status, bank = pcall(self.bankPointer, data)&#13;&#10;    if status then&#13;&#10;      self:assignBank(bank)&#13;&#10;    else&#13;&#10;      log:warn(cutils.getErrorMessage(bank))&#13;&#10;      utils.warnWindow (&quot;Load Bank&quot;, cutils.getErrorMessage(bank))&#13;&#10;      return&#13;&#10;    end&#13;&#10;  elseif midiSize == self.voiceSize then&#13;&#10;    local status, patch = pcall(self.standAlonePatchPointer, data)&#13;&#10;    if not status then&#13;&#10;      log:warn(cutils.getErrorMessage(patch))&#13;&#10;      utils.warnWindow (&quot;Load Patch&quot;, cutils.getErrorMessage(patch))&#13;&#10;      return&#13;&#10;    end&#13;&#10;    -- Assign values&#13;&#10;    self:patch2Mods(patch, mute)&#13;&#10;  else&#13;&#10;    error(string.format(&quot;The loaded file does not contain valid sysex data: %s&quot;, data:toHexString(1)))&#13;&#10;    return&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] requestDump&#13;&#10;--&#13;&#10;function DefaultControllerBase:requestDump(requestMessages)&#13;&#10;  local midiMessageTimerIndex = 1002&#13;&#10;  local prevMidiReceivedFunc = self.midiFunction&#13;&#10;  local receivedMidiData = {}&#13;&#10;&#13;&#10;  local onMidiMessageTimeout = function()&#13;&#10;    -- Stop timer&#13;&#10;    timer:stopTimer(midiMessageTimerIndex)&#13;&#10;    self.midiFunction = prevMidiReceivedFunc&#13;&#10;&#13;&#10;    AlertWindow.showMessageBox(AlertWindow.WarningIcon, &quot;MIDI Timeout&quot;, &quot;No MIDI response from synth received&quot;, &quot;OK&quot;)&#13;&#10;  end&#13;&#10;&#13;&#10;  local midiReceived = function(myData)&#13;&#10;    timer:stopTimer(midiMessageTimerIndex)&#13;&#10;    table.insert(receivedMidiData, myData)&#13;&#10;&#13;&#10;    if table.getn(requestMessages) &gt; 0 then&#13;&#10;      timer:setCallback(midiMessageTimerIndex, onMidiMessageTimeout)&#13;&#10;      timer:startTimer(midiMessageTimerIndex, 1000)&#13;&#10;      self:sendMidiMessage(table.remove(requestMessages, 1))&#13;&#10;    else&#13;&#10;      self.midiFunction = prevMidiReceivedFunc&#13;&#10;      local data = cutils.mergeArrayOfMemBlocks(receivedMidiData)&#13;&#10;      self:loadData(data, true)&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  self.midiFunction = midiReceived&#13;&#10;  timer:setCallback(midiMessageTimerIndex, onMidiMessageTimeout)&#13;&#10;  timer:startTimer(midiMessageTimerIndex, 1000)&#13;&#10;  self:sendMidiMessage(table.remove(requestMessages, 1))&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] onMidiReceived&#13;&#10;--&#13;&#10;-- Called when a panel receives a midi message (does not need to match any modulator mask)&#13;&#10;-- @midi   http://ctrlr.org/api/class_ctrlr_midi_message.html&#13;&#10;function DefaultControllerBase:onMidiReceived(midi)&#13;&#10;  local data = midi:getData()&#13;&#10;  if data:getByte(0) == 0xF0 and self.midiFunction ~= nil then&#13;&#10;    self.midiFunction(data)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] loadVoiceFromFile&#13;&#10;--&#13;&#10;function DefaultControllerBase:loadVoiceFromFile(file)&#13;&#10;  if file:existsAsFile() then&#13;&#10;    local data = MemoryBlock()&#13;&#10;    file:loadFileAsData(data)&#13;&#10;    self:loadData(data)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] onLogLevelChanged&#13;&#10;--&#13;&#10;-- Called when a modulator value changes&#13;&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;&#10;-- @value    new numeric value of the modulator&#13;&#10;--&#13;&#10;function DefaultControllerBase:onLogLevelChanged(mod, value)&#13;&#10;  log:setLevel(value)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] onPatchSelect&#13;&#10;--&#13;&#10;-- This method assigns the selected patch to the panel modulators&#13;&#10;function DefaultControllerBase:onPatchSelect(mod, value)&#13;&#10;  if self.bank:isSelectedPatch(value) then&#13;&#10;    return&#13;&#10;  end&#13;&#10;&#13;&#10;  self:setStatus(&quot;Loading patch...&quot;)&#13;&#10;&#13;&#10;  self:mods2Patch(self.bank:getSelectedPatch())&#13;&#10;&#13;&#10;  self.bank:setSelectedPatchIndex(value)&#13;&#10;  self:patch2Mods(self.bank:getSelectedPatch(), true)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] setStatus&#13;&#10;--&#13;&#10;function DefaultControllerBase:setStatus(status)&#13;&#10;  self:setText(&quot;Name1&quot;, status)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] getStatus&#13;&#10;--&#13;&#10;function DefaultControllerBase:getStatus()&#13;&#10;  return self:getText(&quot;Name1&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] saveBankToFile&#13;&#10;--&#13;&#10;-- Saves the current bank to file&#13;&#10;function DefaultControllerBase:saveBankToFile()&#13;&#10;  self:mods2Patch(self.bank:getSelectedPatch())&#13;&#10;  cutils.writeSyxDataToFile(self.bank:toStandaloneData(), utils.saveFileWindow (&quot;Save bank&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true))&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] writeBankToSynth&#13;&#10;--&#13;&#10;-- Saves the current bank to file&#13;&#10;function DefaultControllerBase:writeBankToSynth(interval)&#13;&#10;  self:mods2Patch(self.bank:getSelectedPatch())&#13;&#10;  self:sendMidiMessages(self.bank:toSyxMessages(), interval)&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] savePatchToFile&#13;&#10;--&#13;&#10;-- Saves the current bank to file&#13;&#10;function DefaultControllerBase:savePatchToFile()&#13;&#10;  local patch = self.bank:getSelectedPatch()&#13;&#10;  self:mods2Patch(patch)&#13;&#10;  cutils.writeSyxDataToFile(patch:toStandaloneData(), utils.saveFileWindow (&quot;Save patch&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true))&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] writePatchToSynth&#13;&#10;--&#13;&#10;-- Saves the current bank to file&#13;&#10;function DefaultControllerBase:writePatchToSynth()&#13;&#10;  local patch = self.bank:getSelectedPatch()&#13;&#10;  self:mods2Patch(patch)&#13;&#10;  self:sendMidiMessage(patch:toSyxMsg())&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#DefaultControllerBase] loadBankFromFile&#13;&#10;--&#13;&#10;function DefaultControllerBase:loadBankFromFile()&#13;&#10;  -- Prompt user to save bank&#13;&#10;  if not AlertWindow.showOkCancelBox(AlertWindow.InfoIcon, &quot;Overwrite bank?&quot;, &quot;You have loaded a bank. The current action will overwrite your existing bank. Are you sure you want to continue?&quot;, &quot;OK&quot;, &quot;Cancel&quot;) then&#13;&#10;    return&#13;&#10;  end&#13;&#10;&#13;&#10;  local file = utils.openFileWindow (&quot;Open Bank&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;  if file:existsAsFile() then&#13;&#10;    local data = MemoryBlock()&#13;&#10;    file:loadFileAsData(data)&#13;&#10;    self:loadData(data)&#13;&#10;  end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="28c8e37a0826442c8bdafdf3b89950f4"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="AbstractBank" luaMethodCode="&#13;&#10;local log = Logger(&quot;AbstractBank&quot;)&#13;&#10;&#13;&#10;AbstractBank = {}&#13;&#10;AbstractBank.__index = AbstractBank&#13;&#10;&#13;&#10;setmetatable(AbstractBank, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;function AbstractBank:_init()&#13;&#10;  LuaObject._init(self)&#13;&#10;&#13;&#10;  self.selectedPatchIndex = 0&#13;&#10;  self.patches = {}&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:getSelectedPatchIndex()&#13;&#10;  return self.selectedPatchIndex&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:getSelectedPatch()&#13;&#10;  return self.patches[self.selectedPatchIndex + 1]&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:selectPatch(patchIndex)&#13;&#10;  self.selectedPatchIndex = patchIndex&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:isSelectedPatch(patchIndex)&#13;&#10;  return self.selectedPatchIndex == patchIndex&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:setSelectedPatchIndex(selectedPatchIndex)&#13;&#10;  self.selectedPatchIndex = selectedPatchIndex&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:toStandaloneData()&#13;&#10;  local buf = MemoryBlock(self.data:getSite(), true)&#13;&#10;  buf:copyFrom(self.data, 0, self.data:getSite())&#13;&#10;  return buf&#13;&#10;end&#13;&#10;&#13;&#10;function AbstractBank:toSyxMessages()&#13;&#10;  local m = SyxMsg()&#13;&#10;  m.data = MemoryBlock(self.data:getSite(), true)&#13;&#10;  m.data:copyFrom(self.data, 0, self.data:getSite())&#13;&#10;  return {m}&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="1fe090bd11a84df3b801251c0a976c2b"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Queue" luaMethodCode="&#13;&#10;local log = Logger(&quot;Queue&quot;)&#13;&#10;&#13;&#10;Queue = {}&#13;&#10;Queue.__index = Queue&#13;&#10;&#13;&#10;setmetatable(Queue, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;---&#13;&#10;--@module __Queue&#13;&#10;function Queue:_init()&#13;&#10;  LuaObject._init(self)&#13;&#10;  self.first = 0&#13;&#10;  self.last = -1&#13;&#10;  self.list = {}&#13;&#10;end&#13;&#10;&#13;&#10;function Queue:pushFirst(value)&#13;&#10;  local first = self.first - 1&#13;&#10;  self.first = first&#13;&#10;  self.list[first] = value&#13;&#10;end&#13;&#10;&#13;&#10;function Queue:pushLast(value)&#13;&#10;  local last = self.last + 1&#13;&#10;  self.last = last&#13;&#10;  self.list[last] = value&#13;&#10;end&#13;&#10;&#13;&#10;function Queue:popFirst()&#13;&#10;  local first = self.first&#13;&#10;  if first &gt; self.last then return nil end&#13;&#10;  local value = self.list[first]&#13;&#10;  self.list[first] = nil        -- to allow garbage collection&#13;&#10;  self.first = first + 1&#13;&#10;  return value&#13;&#10;end&#13;&#10;&#13;&#10;function Queue:popLast()&#13;&#10;  local last = self.last&#13;&#10;  if self.first &gt; last then return nil end&#13;&#10;  local value = self.list[last]&#13;&#10;  self.list[last] = nil         -- to allow garbage collection&#13;&#10;  self.last = last - 1&#13;&#10;  return value&#13;&#10;end&#13;&#10;&#13;&#10;function Queue:getSize()&#13;&#10;&#9;if self.last &lt;= 0 then&#13;&#10;&#9; return 0&#13;&#10;else&#13;&#10;  return self.last - self.first + 1&#13;&#10;end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="131abfc9549c46d2ba7a20fd1a775efb"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="EffectParamService" luaMethodCode="&#13;&#10;local getSliderContentFromSequence = function(min, max)&#13;&#10;  local contents = &quot;&quot;&#13;&#10;  for i = min, max do&#13;&#10;    contents = string.format(&quot;%s\n%d&quot;, contents, i)&#13;&#10;  end&#13;&#10;  return contents&#13;&#10;end&#13;&#10;&#13;&#10;local getSliderContentFromArray = function(array)&#13;&#10;  local contents = &quot;&quot;&#13;&#10;  for i = 1, table.getn(array) do&#13;&#10;    contents = string.format(&quot;%s\n%s&quot;, contents, array[i])&#13;&#10;  end&#13;&#10;  return contents&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @field [parent=#EffectParamService] log&#13;&#10;--&#13;&#10;local log = Logger(&quot;EffectParamService&quot;)&#13;&#10;&#13;&#10;EffectParamService = {}&#13;&#10;EffectParamService.__index = EffectParamService&#13;&#10;&#13;&#10;setmetatable(EffectParamService, {&#13;&#10;  __index = LuaObject, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#EffectParamService] _init&#13;&#10;--&#13;&#10;function EffectParamService:_init(effectParams, effectParamValues, defaultEffectIndex)&#13;&#10;  LuaObject._init(self)&#13;&#10;  self.effectParams       = effectParams&#13;&#10;  self.effectParamValues  = effectParamValues&#13;&#10;  self.defaultEffectIndex = defaultEffectIndex&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#EffectParamService] onEffectTypeChanged&#13;&#10;--&#13;&#10;function EffectParamService:getEffectData(effectIndex, paramIndex)&#13;&#10;  local effectParamList = self.effectParams[self.defaultEffectIndex]&#13;&#10;  if effectIndex &gt; 0 then&#13;&#10;    effectParamList = self.effectParams[string.format(&quot;0x%.2X&quot;, effectIndex)]&#13;&#10;  end&#13;&#10;  if effectParamList == nil then&#13;&#10;    effectParamList = self.effectParams[self.defaultEffectIndex]&#13;&#10;  end&#13;&#10;&#13;&#10;  local paramValues = lutils.split(effectParamList[paramIndex], &quot;:&quot;)&#13;&#10;  if table.getn(paramValues) ~= 5 then&#13;&#10;    error(string.format(&quot;Invalid param value string '%s'&quot;, effectParamList[paramIndex]))&#13;&#10;  end&#13;&#10;&#13;&#10;  local name = paramValues[1]&#13;&#10;  if name == &quot;&quot; then&#13;&#10;    return nil&#13;&#10;  else&#13;&#10;    local dataArrayIndex = paramValues[2]&#13;&#10;    local min = paramValues[3]&#13;&#10;    local max = paramValues[4]&#13;&#10;    -- TODO: Take offset into account&#13;&#10;    local offset = paramValues[5]&#13;&#10;&#13;&#10;    local sliderContents = &quot;&quot;&#13;&#10;    if dataArrayIndex == &quot;&quot; then&#13;&#10;      sliderContents = getSliderContentFromSequence(min, max)&#13;&#10;    else&#13;&#10;      sliderContents = getSliderContentFromArray(self.effectParamValues[tonumber(dataArrayIndex)])&#13;&#10;    end&#13;&#10;    return { name, sliderContents }&#13;&#10;  end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="9d565c6bf5754316af1a63c86d4f62a9"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="controller" uuid="08ad010f6d4f479f872b11e6172a9d35">
        <luaMethodGroup name="behringermodulizer" uuid="861794112bd741cc86b5a1c7d1549385">
          <luaMethod luaMethodName="BehringerModulizerController" luaMethodCode="&#13;&#10;local log = Logger(&quot;BehringerModulizerController&quot;)&#13;&#10;&#13;&#10;local variations = { &quot;LFO Speed::::*&quot;, &quot;LFO Speed::::*&quot;, &quot;HP Shape::::&quot;,&#13;&#10;  &quot;Mode:L1,L2,A1,A2&quot;, &quot;Mode:L1,L2,A1,A2&quot;, &quot;Mode:L1,L2,A1,A2&quot;,&#13;&#10;  &quot;LFO Speed::::*&quot;, &quot;LFO Speed::::*&quot;, &quot;LFO Speed::::&quot;, &quot;Xover Freq.::::&quot;,&#13;&#10;  &quot;In / Out::1:2:-1&quot;, &quot;Gate Thresh.::::&quot;, &quot;Pre Delay::::&quot;,&#13;&#10;  &quot;Bass Freq.::::&quot;, &quot;Ratio:::24:&quot;, &quot;Ratio:::24:&quot;, &quot;Threshold::::&quot;,&#13;&#10;  &quot;Mode:L,E,R0,R1,R2,R3,R4,R5,R6,R7,S0,S1,S2,S3,S4,S5,S6,S7&quot;,&#13;&#10;  &quot;Clicks Level::::&quot;, &quot;Tube Type::1:3:-1&quot;, &quot;Type::1:3:-1&quot;,&#13;&#10;  &quot;Speaker Type::1:3:-1&quot;, &quot;Frequency::::&quot;,&#13;&#10;  &quot;Mode:L,E,R0,R1,R2,R3,R4,R5,R6,R7&quot; }&#13;&#10;&#13;&#10;local editA = { &quot;Intensity::1:8:&quot;, &quot;Intensity::1:8:&quot;, &quot;Tune::::&quot;,&#13;&#10;  &quot;Frequency::::&quot;, &quot;Frequency::::&quot;, &quot;Frequency::::&quot;, &quot;Delay::1:128:-1&quot;,&#13;&#10;  &quot;Delay::1:128:-1&quot;, &quot;Delay::1:128:-1&quot;, &quot;Gain::-6:6:6&quot;, &quot;Gain::-6:6:6&quot;,&#13;&#10;  &quot;Gate Hold::::&quot;, &quot;Size::::&quot;, &quot;Gain::-6:6:6&quot;, &quot;Threshold::-60:0:60&quot;,&#13;&#10;  &quot;Threshold::-60:0:60&quot;, &quot;Hold::::&quot;, &quot;Carrier Freq.::::&quot;, &quot;Noise Level::::&quot;,&#13;&#10;  &quot;In Gain::::&quot;, &quot;In Gain::::&quot;, &quot;Peak Freq.::::&quot;, &quot;Density::::&quot;, &quot;Frequency::::&quot; }&#13;&#10;&#13;&#10;local editB = { &quot;Depth::::&quot;, &quot;Depth::::&quot;, &quot;Harmonics::::&quot;, &quot;Resonance::::&quot;,&#13;&#10;  &quot;Resonance::::&quot;, &quot;Resonance::::&quot;, &quot;Depth::::&quot;, &quot;Depth::::&quot;, &quot;Depth::::&quot;,&#13;&#10;  &quot;Spread::::&quot;, &quot;Spread::::&quot;, &quot;Gate Rel.::::&quot;, &quot;Wall Damp::::&quot;,&#13;&#10;  &quot;Bass Pan.:2:-100:100:50&quot;, &quot;Out Gain::-24:24:24&quot;, &quot;Out Gain::-24:24:24&quot;,&#13;&#10;  &quot;Range::::&quot;, &quot;LFO / Speed::::*&quot;, &quot;Noise BP.::::&quot;, &quot;Low Cut::::&quot;, &quot;Drive::::&quot;,&#13;&#10;  &quot;Peak Q:::100:&quot;, &quot;Ratio:::6:&quot;, &quot;LFO / Speed::::*&quot; }&#13;&#10;&#13;&#10;local editC = { &quot;Feedback::::&quot;, &quot;Feedback::::&quot;, &quot;::::&quot;, &quot;Mod. Depth::::&quot;, &quot;Mod. Depth::::&quot;,&#13;&#10;  &quot;Mod. Depth::::&quot;, &quot;Feedback:2:-100:100:50&quot;, &quot;Feedback:2:-100:100:50&quot;, &quot;Stereo Width::::&quot;,&#13;&#10;  &quot;Mono Pan.:2:-100:100:50&quot;, &quot;Xover Freq.::::&quot;, &quot;LP Freq.::::&quot;, &quot;Stereo Width::::&quot;,&#13;&#10;  &quot;Treble Pan.:2:-100:100:50&quot;, &quot;Attack::::&quot;, &quot;Attack::::&quot;, &quot;Attack::::&quot;,&#13;&#10;  &quot;Mod. Depth::::&quot;, &quot;Buzz Level::::&quot;, &quot;High Cut::::&quot;, &quot;Presence::::&quot;,&#13;&#10;  &quot;Peak Gain::-12:12:12&quot;, &quot;Bass Level::::&quot;, &quot;Mod. Depth::::&quot;,  }&#13;&#10;&#13;&#10;local editD = { &quot;::::&quot;, &quot;::::&quot;, &quot;::::&quot;, &quot;Env. / LFO Speed::::*&quot;, &quot;Env. / LFO Speed::::*&quot;,&#13;&#10;  &quot;Env. / LFO Speed::::*&quot;, &quot;Band Limit::::&quot;, &quot;Band Limit::::&quot;, &quot;Wideness::::&quot;,&#13;&#10;  &quot;St. Center:2:-100:100:50&quot;, &quot;::::&quot;, &quot;LP Depth::::&quot;, &quot;Reflections::1:15:-1&quot;,&#13;&#10;  &quot;::::&quot;, &quot;Release::::&quot;, &quot;Release::::&quot;, &quot;Release::::&quot;, &quot;Band Limit::::&quot;,&#13;&#10;  &quot;Signal BP.::::&quot;, &quot;Band Limit::::&quot;, &quot;Speaker::1:3:-1&quot;, &quot;HF Cut::::&quot;, &quot;::::&quot;,&#13;&#10;  &quot;Feedback:2:-100:100:50&quot; }&#13;&#10;&#13;&#10;&#13;&#10;BehringerModulizerController = {}&#13;&#10;BehringerModulizerController.__index = BehringerModulizerController&#13;&#10;&#13;&#10;local setComponentProperties = function(mod, dataString)&#13;&#10;  local comp = mod:getComponent()&#13;&#10;  local splitData = lutils.split(dataString, &quot;:&quot;)&#13;&#10;&#13;&#10;  local variationBtnGrp = panel:getModulatorByName(&quot;variationBtnGrp&quot;):getComponent()&#13;&#10;  local variationGrp = panel:getModulatorByName(&quot;variationGrp&quot;):getComponent()&#13;&#10;  local splitLength = table.getn(splitData)&#13;&#10;  if splitLength == 2 then&#13;&#10;    variationGrp:setProperty(&quot;componentVisibility&quot;, 0, false)&#13;&#10;    variationBtnGrp:setProperty(&quot;componentVisibility&quot;, 1, false)&#13;&#10;    comp = panel:getModulatorByName(&quot;variationBtn&quot;):getComponent()&#13;&#10;  elseif splitLength == 5 and mod:getProperty(&quot;name&quot;) == &quot;variation&quot; then&#13;&#10;    variationBtnGrp:setProperty(&quot;componentVisibility&quot;, 0, false)&#13;&#10;    variationGrp:setProperty(&quot;componentVisibility&quot;, 1, false)&#13;&#10;  elseif splitLength ~= 5 then&#13;&#10;    error(string.format(&quot;Invalid data string: '%s'&quot;, dataString))&#13;&#10;    return&#13;&#10;  end&#13;&#10;&#13;&#10;  local name = splitData[1]&#13;&#10;&#13;&#10;  comp:setProperty(&quot;componentVisibleName&quot;, name:upper(), false)&#13;&#10;  comp:setProperty(&quot;componentVisibility&quot;, 1, false)&#13;&#10;  if name == &quot;&quot; then&#13;&#10;    comp:setProperty(&quot;componentVisibility&quot;, 0, false)&#13;&#10;  end&#13;&#10;&#13;&#10;  local increment = 1&#13;&#10;  local min = 0&#13;&#10;  local max = 127&#13;&#10;  if splitLength == 2 then&#13;&#10;    local values = lutils.split(splitData[2], &quot;,&quot;)&#13;&#10;    local valuesLength = table.getn(values)&#13;&#10;    local valueStr = values[1]&#13;&#10;    for i = 2, valuesLength do&#13;&#10;      valueStr = string.format(&quot;%s\n%s&quot;, valueStr, values[i])&#13;&#10;    end&#13;&#10;    comp:setProperty(&quot;uiFixedSliderContent&quot;, valueStr, false)&#13;&#10;  else&#13;&#10;    if splitData[2] ~= &quot;&quot; then&#13;&#10;      increment = splitData[2]&#13;&#10;    end&#13;&#10;    comp:setProperty(&quot;uiSliderInterval&quot;, increment, false)&#13;&#10;&#13;&#10;    if splitData[3] ~= &quot;&quot; then&#13;&#10;      min = splitData[3]&#13;&#10;    end&#13;&#10;    comp:setProperty(&quot;uiSliderMin&quot;, min, false)&#13;&#10;&#13;&#10;    if splitData[4] ~= &quot;&quot; then&#13;&#10;      max = splitData[4]&#13;&#10;    end&#13;&#10;    comp:setProperty(&quot;uiSliderMax&quot;, max, false)&#13;&#10;&#13;&#10;    if splitData[5] ~= &quot;*&quot; then&#13;&#10;      local exprSuffix = &quot;&quot;&#13;&#10;      local exprRevSuffix = &quot;&quot;&#13;&#10;      local exprSign = &quot;+&quot;&#13;&#10;      local exprRevSign = &quot;-&quot;&#13;&#10;      if increment ~= 1 then&#13;&#10;        exprSuffix = string.format(&quot; / %d&quot;, increment)&#13;&#10;        exprRevSuffix = string.format(&quot; * %d&quot;, increment)&#13;&#10;      end&#13;&#10;&#13;&#10;      if splitData[5] ~= &quot;&quot; then&#13;&#10;        local offset = tonumber(splitData[5])&#13;&#10;        if offset &lt; 0 then&#13;&#10;          offset = offset * -1&#13;&#10;          exprSuffix = string.format(&quot;%s - %d&quot;, exprSuffix, offset)&#13;&#10;          exprRevSuffix = string.format(&quot;%s + %d&quot;, exprRevSuffix, offset)&#13;&#10;        else&#13;&#10;          exprSuffix = string.format(&quot;%s + %d&quot;, exprSuffix, offset)&#13;&#10;          exprRevSuffix = string.format(&quot;%s - %d&quot;, exprRevSuffix, offset)&#13;&#10;        end&#13;&#10;      end&#13;&#10;      mod:setProperty(&quot;modulatorValueExpression&quot;, string.format(&quot;modulatorValue%s&quot;, exprSuffix), false)&#13;&#10;      mod:setProperty(&quot;modulatorValueExpressionReverse&quot;, string.format(&quot;midiValue%s&quot;, exprRevSuffix), false)&#13;&#10;    end&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;setmetatable(BehringerModulizerController, {&#13;&#10;  __index = AbstractController, -- this is what makes the inheritance work&#13;&#10;  __call = function (cls, ...)&#13;&#10;    local self = setmetatable({}, cls)&#13;&#10;    self:_init(...)&#13;&#10;    return self&#13;&#10;  end,&#13;&#10;})&#13;&#10;&#13;&#10;---&#13;&#10;-- @function [parent=#EnsoniqEsq1Controller] _init&#13;&#10;--&#13;&#10;function BehringerModulizerController:_init()&#13;&#10;  AbstractController._init(self)&#13;&#10;end&#13;&#10;&#13;&#10;function BehringerModulizerController:loadVoiceFromFile(file)&#13;&#10;  if file:existsAsFile() then&#13;&#10;    local data = MemoryBlock()&#13;&#10;    file:loadFileAsData(data)&#13;&#10;    if data:getSize() ~= 10 then&#13;&#10;      error(&quot;The loaded file does not contain a Behringer Modulizer patch&quot;)&#13;&#10;      return&#13;&#10;    end&#13;&#10;&#13;&#10;    -- Assign values&#13;&#10;    self:setValue(&quot;variation&quot;, data:getByte(0))&#13;&#10;    self:setValue(&quot;editA&quot;, data:getByte(1))&#13;&#10;    self:setValue(&quot;editB&quot;, data:getByte(2))&#13;&#10;    self:setValue(&quot;editC&quot;, data:getByte(3))&#13;&#10;    self:setValue(&quot;editD&quot;, data:getByte(4))&#13;&#10;    self:setValue(&quot;effect&quot;, data:getByte(5))&#13;&#10;    self:setValue(&quot;eqLow&quot;, data:getByte(6))&#13;&#10;    self:setValue(&quot;eqHigh&quot;, data:getByte(7))&#13;&#10;    self:setValue(&quot;mix&quot;, data:getByte(8))&#13;&#10;    self:setValue(&quot;inOut&quot;, data:getByte(9))&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;---&#13;&#10;-- Called when a modulator value changes&#13;&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;&#10;-- @value    new numeric value of the modulator&#13;&#10;--&#13;&#10;function BehringerModulizerController:onEffectChange(mod, value)&#13;&#10;&#13;&#10;  --console(string.format(&quot;[onEffectChange] %d&quot;, value))&#13;&#10;  -- name:increment:min:max:offset&#13;&#10;&#13;&#10;  local varMod = panel:getModulatorByName(&quot;variation&quot;)&#13;&#10;  local editAMod = panel:getModulatorByName(&quot;editA&quot;)&#13;&#10;  local editBMod = panel:getModulatorByName(&quot;editB&quot;)&#13;&#10;  local editCMod = panel:getModulatorByName(&quot;editC&quot;)&#13;&#10;  local editDMod = panel:getModulatorByName(&quot;editD&quot;)&#13;&#10;&#13;&#10;  setComponentProperties(varMod, variations[value + 1])&#13;&#10;  setComponentProperties(editAMod, editA[value + 1])&#13;&#10;  setComponentProperties(editBMod, editB[value + 1])&#13;&#10;  setComponentProperties(editCMod, editC[value + 1])&#13;&#10;  setComponentProperties(editDMod, editD[value + 1])&#13;&#10;end&#13;&#10;&#13;&#10;function BehringerModulizerController:onLoadVoice(mod, value)&#13;&#10;  local file = utils.openFileWindow (&quot;Open Patch&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;  self:loadVoiceFromFile(file)&#13;&#10;end&#13;&#10;&#13;&#10;function BehringerModulizerController:onSaveVoice(mod, value)&#13;&#10;  local f = utils.saveFileWindow (&quot;Save patch&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;  if f:isValid() == false then&#13;&#10;    return&#13;&#10;  end&#13;&#10;  f:create()&#13;&#10;  if f:existsAsFile() then&#13;&#10;    -- Fetch values&#13;&#10;    local data = MemoryBlock(10, true)&#13;&#10;    data:setByte(0, self:getValue(&quot;variation&quot;))&#13;&#10;    data:setByte(1, self:getValue(&quot;editA&quot;))&#13;&#10;    data:setByte(2, self:getValue(&quot;editB&quot;))&#13;&#10;    data:setByte(3, self:getValue(&quot;editC&quot;))&#13;&#10;    data:setByte(4, self:getValue(&quot;editD&quot;))&#13;&#10;    data:setByte(5, self:getValue(&quot;effect&quot;))&#13;&#10;    data:setByte(6, self:getValue(&quot;eqLow&quot;))&#13;&#10;    data:setByte(7, self:getValue(&quot;eqHigh&quot;))&#13;&#10;    data:setByte(8, self:getValue(&quot;mix&quot;))&#13;&#10;    data:setByte(9, self:getValue(&quot;inOut&quot;))&#13;&#10;&#13;&#10;    -- Check if the file exists&#13;&#10;    if f:existsAsFile() == false then&#13;&#10;      -- If file does not exist, then create it&#13;&#10;      if f:create() == false then&#13;&#10;        -- If file cannot be created, then fail here&#13;&#10;        utils.warnWindow (&quot;\n\nSorry, the Editor failed to\nsave the patch to disk!&quot;, &quot;The file does not exist.&quot;)&#13;&#10;        return&#13;&#10;      end&#13;&#10;    end&#13;&#10;    -- If we reached this point, we have a valid file we can try to write to&#13;&#10;    if f:replaceWithData (data) == false then&#13;&#10;      utils.warnWindow (&quot;File write&quot;, &quot;Sorry, the Editor failed to\nwrite the data to file!&quot;)&#13;&#10;    end&#13;&#10;    console (&quot;File save complete, Editor patch saved to disk&quot;)&#13;&#10;  end&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="a9292abc92cb46bab3f1ef84d1e6b854"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onEffectChange" luaMethodCode="function onEffectChange(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;      return&#13;&#10;    end&#13;&#10;&#13;&#10;    LOGGER:warn(&quot;\&quot;{'methodName':'onEffectChange', 'modulator':'%s', 'value':%s},\&quot; ..&quot;, mod:getProperty('name'), value)&#13;&#10;&#13;&#10;    behringerModulizerController:onEffectChange(mod, value)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="91ff9ebdf31847f4a058d17ecf57e8d8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onLoadVoice" luaMethodCode="function onLoadVoice(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;      return&#13;&#10;    end&#13;&#10;&#13;&#10;    LOGGER:warn(&quot;\&quot;{'methodName':'onLoadVoice', 'modulator':'%s', 'value':%s},\&quot; ..&quot;, mod:getProperty('name'), value)&#13;&#10;&#13;&#10;    behringerModulizerController:onLoadVoice(mod, value)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="a2e28604a142463aafa6b8744f427c35"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onSaveVoice" luaMethodCode="function onSaveVoice(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;      return&#13;&#10;    end&#13;&#10;&#13;&#10;    LOGGER:warn(&quot;\&quot;{'methodName':'onSaveVoice', 'modulator':'%s', 'value':%s},\&quot; ..&quot;, mod:getProperty('name'), value)&#13;&#10;&#13;&#10;    behringerModulizerController:onSaveVoice(mod, value)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="31d6db5ba01d4b7b86dcede698a1eb51"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethod luaMethodName="onFilesDroppedToPanel" luaMethodCode="---&#13;&#10;-- Callback to indicate that the user has dropped the files onto this panel&#13;&#10;--&#13;&#10;-- @files   - StringArray object that has the file paths&#13;&#10;-- @x       - x coordinate where the event occured-- @y       - y coordinate where the event occured&#13;&#10;function onFilesDroppedToPanel(files, x, y)&#13;&#10;    if files:size() &gt; 0 then&#13;&#10;        local f = File(files:get(0))&#13;&#10;        behringerModulizerController:loadVoiceFromFile(f)&#13;&#10;    end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="5c238c8bad9d4d049ca02f1e6807b98f"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="onPanelBeforeLoad" luaMethodCode="--&#13;&#10;-- Called when the panel has finished loading&#13;&#10;--&#13;&#10;-- @type the type of instance beeing started, types available in the CtrlrPanel&#13;&#10;-- class as enum&#13;&#10;--&#13;&#10;-- InstanceSingle&#13;&#10;-- InstanceMulti&#13;&#10;-- InstanceSingleRestriced&#13;&#10;-- InstanceSingleEngine&#13;&#10;-- InstanceMultiEngine&#13;&#10;-- InstanceSingleRestrictedEngine&#13;&#10;--&#13;&#10;function onPanelBeforeLoad(type)&#13;&#10;&#13;&#10;  -- Init global constants&#13;&#10;  LUA_CONTRUCTOR_NAME = &quot;LUA_CLASS_NAME&quot;&#13;&#10;  &#13;&#10;  -- Init logger&#13;&#10;  LOGGER = Logger(&quot;Global&quot;)&#13;&#10;  LOGGER:info(&quot;[initPanel] Initializing...&quot;)&#13;&#10;&#13;&#10;  behringerModulizerController = BehringerModulizerController()&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="fdfdf5cabbd8420fb27342f641f37d6f"
                   luaMethodValid="1"/>
      </luaMethodGroup>
    </luaManagerMethods>
  </luaManager>
  <panelResources>
    <resource resourceHash="-4336215752221709292" resourceLoadedTime="1512924876310"
              resourceSize="305778" resourceFile="BehringerBackground.png"
              resourceSourceFile="C:\ctrlr\Panels\pascalc\BehringerModulizer1200DSP\BehringerBackground.png"
              resourceName="BehringerBackground" resourceType="Image"/>
    <resource resourceHash="335086382150679760" resourceLoadedTime="1512924876311"
              resourceSize="22829" resourceFile="BehringerButton.png" resourceSourceFile="C:\ctrlr\Panels\pascalc\BehringerModulizer1200DSP\BehringerButton.png"
              resourceName="BehringerButton" resourceType="Image"/>
    <resource resourceHash="1665698814020629220" resourceLoadedTime="1512924876311"
              resourceSize="19898" resourceFile="BehringerButtonOffOn.png"
              resourceSourceFile="C:\ctrlr\Panels\pascalc\BehringerModulizer1200DSP\BehringerButtonOffOn.png"
              resourceName="BehringerButtonOffOn" resourceType="Image"/>
  </panelResources>
  <uiPanelEditor uiPanelCanvasRectangle="0 0 1157 230" uiPanelSnapSize="8" uiPanelBackgroundColour="0xffffffff"
                 uiPanelBackgroundColour1="0xffffffff" uiPanelBackgroundColour2="0xffffffff"
                 uiPanelBackgroundGradientType="1" uiPanelImageResource="BehringerBackground"
                 uiPanelEditMode="0" uiPanelLock="0" uiPanelDisabledOnEdit="0"
                 uiPanelMenuBarVisible="1" uiPanelMenuBarHideOnExport="0" uiPanelWidth="400"
                 uiPanelHeight="400" name="Behringer Modulizer 1200DSP" uiPanelImageAlpha="255"
                 uiPanelImageLayout="1" uiPanelSnapActive="1" uiPanelPropertiesOnRight="0"
                 luaPanelPaintBackground="-- None" luaPanelResized="-- None" luaPanelFileDragDropHandler="onFilesDroppedToPanel"
                 luaPanelFileDragEnterHandler="-- None" luaPanelFileDragExitHandler="-- None"
                 uiPanelInvisibleComponentAlpha="0.5" uiPanelTooltipBackgroundColour="0xffeeeebb"
                 uiPanelTooltipOutlineColour="0xff000000" uiPanelTooltipColour="0xff000000"
                 uiPanelTooltipCornerRound="1" uiPanelTooltipPlacement="2" uiPanelTooltipFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1;3"
                 uiPanelZoom="0.90000000000000002" uiPanelPropertiesSize="296"
                 uiPanelViewPortSize="1186">
    <uiPanelCanvasLayer uiPanelCanvasLayerName="New layer" uiPanelCanvasLayerUid="682175e0eb060000a800000020196608"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="0"/>
  </uiPanelEditor>
  <modulator modulatorVstExported="1" modulatorMax="23" vstIndex="1" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onEffectChange"
             name="effect" modulatorMin="0" modulatorValue="13">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="50" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="EFFECT"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="1" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="96" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="ff272727" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiFixedSliderContent="Ultra Phaser&#10;Spatial Phaser&#10;Harmonic Exciter&#10;Auto Lowpass&#10;Auto Highpass&#10;Auto Bandpass&#10;Jetstream Flngr&#10;Spatial Flanger&#10;Ultra Chorus&#10;Stereo Imager&#10;3D Space Maker&#10;Denoiser&#10;Ultra Ambience&#10;Voice Canceler&#10;Comp./Limiter&#10;Expander&#10;Noise Gate&#10;Ring Modulator&#10;Vintager&#10;Tube Distortion&#10;Guitar Combo&#10;Guitar Speaker&#10;Super Bass&#10;Resonator"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1.2;3" uiSliderIncDecButtonColour="0xff0000ff"
               uiSliderIncDecTextColour="0xffffffff" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="350 16 96 96" uiType="uiFixedSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="2" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="variation" modulatorMin="0" modulatorValue="103">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="51" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="BASS FREQ."
               componentMouseCursor="2" componentGroupName="variationGrp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="0 0 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="6" vstIndex="3" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue + 6"
             modulatorValueExpressionReverse="midiValue - 6" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="editA" modulatorMin="-6" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="52" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="GAIN"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-6" uiSliderMax="6" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="464 118 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="100" vstIndex="4" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue / 2 + 50"
             modulatorValueExpressionReverse="midiValue * 2 - 50" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="editB" modulatorMin="-100" modulatorValue="82">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="53" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="BASS PAN."
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-100" uiSliderMax="100" uiSliderInterval="2" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="578 118 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="100" vstIndex="5" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue / 2 + 50"
             modulatorValueExpressionReverse="midiValue * 2 - 50" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="editC" modulatorMin="-100" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="54" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="TREBLE PAN."
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-100" uiSliderMax="100" uiSliderInterval="2" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="692 118 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="6" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="editD" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="55" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="ff000000"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff000000" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="806 118 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="16" vstIndex="8" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue + 16"
             modulatorValueExpressionReverse="midiValue - 16" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="eqLow" modulatorMin="-16" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="57" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="EQ LOW"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-16" uiSliderMax="16" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="464 16 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="16" vstIndex="9" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue + 16"
             modulatorValueExpressionReverse="midiValue - 16" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="eqHigh" modulatorMin="-16" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="58" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="EQ HIGH"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-16" uiSliderMax="16" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="578 16 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="100" vstIndex="10" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="mix" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="59" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="MIX"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="100" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff272727"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="692 16 96 96" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="11" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="inOut" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="61" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="25" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="IN/OUT"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="BehringerButtonOffOn" componentRectangle="806 16 96 75"
               resourceImageWidth="96" resourceImageHeight="64" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="OFF&#10;ON&#10;" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="96" uiImageButtonTextHeight="64" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentLayerUid="682175e0eb060000a800000020196608" uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="17" vstIndex="12" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="variationBtn" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="variationBtn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="51" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="MODE"
               componentMouseCursor="2" componentGroupName="variationBtnGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="1" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="96" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="ff272727" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiFixedSliderContent="L&#10;E&#10;R0&#10;R1&#10;R2&#10;R3&#10;R4&#10;R5&#10;R6&#10;R7&#10;S0&#10;S1&#10;S2&#10;S3&#10;S4&#10;S5&#10;S6&#10;S7"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderIncDecButtonColour="0xff0000ff"
               uiSliderIncDecTextColour="0xffffffff" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="682175e0eb060000a800000020196608"
               componentRectangle="0 0 96 96" uiComboContent="L&#10;E&#10;R0&#10;R1&#10;R2&#10;R3&#10;R4&#10;R5&#10;R6&#10;R7&#10;S0&#10;S1&#10;S2&#10;S3&#10;S4&#10;S5&#10;S6&#10;S7"
               uiType="uiFixedSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="variationGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0"
               uiGroupOutlineColour1="0" uiGroupOutlineColour2="0" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="350 118 96 96"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="682175e0eb060000a800000020196608" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="variationBtnGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="variationBtnGrp"
               componentMouseCursor="2" componentGroupName="" componentGroupped=""
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0"
               uiGroupOutlineColour1="0" uiGroupOutlineColour2="0" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="350 118 96 96"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="682175e0eb060000a800000020196608" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="loadVoice"
             name="load" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="25" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="LOAD"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="1"
               uiImageButtonResource="BehringerButton" componentRectangle="236 16 96 75"
               resourceImageWidth="96" resourceImageHeight="64" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="ff000000"
               uiImageButtonContent="OFF&#10;ON" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="14" uiButtonTextFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentLayerUid="682175e0eb060000a800000020196608" uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="13" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="saveVoice"
             name="save" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="25" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Monospaced&gt;;12;1;0;0;0;1;3" componentVisibleName="SAVE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="1"
               uiImageButtonResource="BehringerButton" componentRectangle="238 118 96 75"
               resourceImageWidth="96" resourceImageHeight="64" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="OFF&#10;ON" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentLayerUid="682175e0eb060000a800000020196608" uiType="uiImageButton"/>
  </modulator>
</panel>
