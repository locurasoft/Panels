<?xml version="1.0" encoding="UTF-8"?>

<panel name="AKAI S2000" panelShowDialogs="1" panelMessageTime="10000"
       panelAuthorName="pascalc, Hecticcc" panelAuthorEmail="packe01@gmail.com, jan.duprez@gmail.com"
       panelAuthorUrl="" panelAuthorDesc="" panelVersionMajor="1" panelVersionMinor="0"
       panelVersionName="Hell-O-Kitty" panelVendor="" panelDevice=""
       panelMidiSnapshotAfterLoad="0" panelMidiSnapshotAfterProgramChange="0"
       panelMidiSnapshotDelay="10" panelMidiSnapshotShowProgress="0"
       panelMidiInputChannelDevice="0" panelMidiInputDevice="4- MIDISPORT 2x2 In B"
       panelMidiControllerChannelDevice="1" panelMidiControllerDevice="-- None"
       panelMidiOutputChannelDevice="1" panelMidiOutputDevice="4- MIDISPORT 2x2 Out B"
       panelMidiInputFromHost="0" panelMidiInputChannelHost="1" panelMidiOutputToHost="0"
       panelMidiOutputChannelHost="1" panelMidiThruH2H="0" panelMidiThruH2HChannelize="0"
       panelMidiThruH2D="0" panelMidiThruH2DChannelize="0" panelMidiThruD2D="0"
       panelMidiThruD2DChannelize="0" panelMidiThruD2H="0" panelMidiThruD2HChannelize="0"
       panelMidiRealtimeIgnore="1" panelMidiInputThreadPriority="7"
       panelMidiProgram="0" panelMidiBankLsb="0" panelMidiBankMsb="0"
       panelMidiSendProgramChangeOnLoad="0" panelMidiProgramCalloutOnprogramChange="0"
       panelMidiMatchCacheSize="32" panelMidiGlobalDelay="0" panelMidiPauseOut="0"
       panelMidiPauseIn="0" panelOSCEnabled="0" panelOSCPort="7770"
       panelOSCProtocol="0" luaPanelMidiChannelChanged="-- None" luaPanelMidiReceived="onMidiReceived"
       luaPanelLoaded="onPanelLoaded" luaPanelBeforeLoad="onPanelBeforeLoad"
       luaPanelSaved="-- None" luaPanelResourcesLoaded="-- None" luaPanelProgramChanged="-- None"
       luaPanelGlobalChanged="-- None" luaPanelMessageHandler="-- None"
       luaPanelModulatorValueChanged="-- None" luaPanelSaveState="onPanelSaveState"
       luaPanelRestoreState="onPanelRestoreState" luaPanelMidiSnapshotPost="-- None"
       luaPanelMidiSnapshotPre="-- None" luaAudioProcessBlock="-- None"
       luaPanelOSCReceived="-- None" panelFilePath="C:\ctrlr\Panels\pascalc\Akai-S2000.panel"
       panelUID="8.OxrgztmRAzN" panelInstanceUID="frAQ" panelInstanceManufacturerID="Bc8W"
       panelModulatorListColumns="&lt;TABLELAYOUT sortedCol=&quot;611&quot; sortForwards=&quot;1&quot;&gt;&lt;COLUMN id=&quot;611&quot; visible=&quot;1&quot; width=&quot;269&quot;/&gt;&lt;COLUMN id=&quot;612&quot; visible=&quot;1&quot; width=&quot;269&quot;/&gt;&lt;COLUMN id=&quot;126&quot; visible=&quot;1&quot; width=&quot;285&quot;/&gt;&lt;COLUMN id=&quot;127&quot; visible=&quot;1&quot; width=&quot;246&quot;/&gt;&lt;COLUMN id=&quot;18&quot; visible=&quot;1&quot; width=&quot;225&quot;/&gt;&lt;COLUMN id=&quot;19&quot; visible=&quot;1&quot; width=&quot;225&quot;/&gt;&lt;COLUMN id=&quot;610&quot; visible=&quot;1&quot; width=&quot;58&quot;/&gt;&lt;/TABLELAYOUT&gt;"
       panelModulatorListCsvDelimiter="," panelModulatorListXmlRoot="ctrlrModulatorList"
       panelModulatorListXmlModulator="ctrlrModulator" panelModulatorListSortOption="1"
       panelGlobalVariables="0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0"
       panelResources="-- None" panelPropertyDisplayIDs="0" ctrlrMenuItemBackgroundColour="ffffffff"
       ctrlrMenuItemTextColour="ff000000" ctrlrMenuItemHighlightedTextColour="ffffffff"
       ctrlrMenuItemHighlightColour="ff4364ff" ctrlrMenuItemFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
       ctrlrMenuItemSeparatorColour="44000000" ctrlrMenuItemHeaderColour="ff000000"
       ctrlrMenuBarBackgroundColour1="fff7f7f7" ctrlrMenuBarBackgroundColour2="ffcccccc"
       ctrlrMenuBarTextColour="ff000000" ctrlrMenuBarHighlightedTextColour="ffffffff"
       ctrlrMenuBarHighlightColour="ff4364ff" ctrlrMenuBarFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
       ctrlrUseEditorWrapper="0" luaPanelMidiMultiReceived="-- None"
       panelIndex="0" uiPanelModulatorListViewTree="0">
  <uiWindowManager>
    <uiChildWindow uiChildWindowName="ModulatorList" uiChildWindowState="fs 0 0 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LayerEditor" uiChildWindowState="539 196 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaMethodEditor" uiChildWindowState="fs 0 0 800 500">
      <uiChildWindowContentState luaMethodEditor="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;OPEN id=&quot;LUA&quot; scrollPos=&quot;218&quot;&gt;&#13;&#10;  &lt;OPEN id=&quot;Built-In&quot;/&gt;&#13;&#10;  &lt;OPEN id=&quot;model&quot;/&gt;&#13;&#10;  &lt;OPEN id=&quot;service&quot;/&gt;&#13;&#10;  &lt;OPEN id=&quot;controller&quot;&gt;&#13;&#10;    &lt;OPEN id=&quot;global&quot;/&gt;&#13;&#10;  &lt;/OPEN&gt;&#13;&#10;  &lt;OPEN id=&quot;generic&quot;/&gt;&#13;&#10;  &lt;SELECTED id=&quot;/LUA/controller/global/onPanelSaveState&quot;/&gt;&#13;&#10;&lt;/OPEN&gt;&#13;&#10;;944e95685a504ce39516e9c33fc20159:295a3739f5aa4a24aa97c55a5eb2eb6d:8519b1cc782340c9b21785ee49a16691:b85fb52ba25640e599a1d43caf2138af:08a70a85f1b240ebbd54c833ca60ab6d:bb0027611d344d4e88349944eb556e77"
                                 luaMethodEditorFont="Courier New;16;0;0;0;0;1;0" luaMethodEditorBgColour="ffffffff"/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaConsole" uiChildWindowState="400 180 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
  </uiWindowManager>
  <midiLibrary uuid="e43835edc0e2477e85ea0047d8cae1ce" luaTransInfo="-- None"
               midiLibraryParameterIndexProperty="modulatorCustomIndex" midiLibraryMidiProgramChangeControl="0"
               midiLibrarySendSnapAfterPChg="0" midiLibraryDefaultBankName="New Bank - %H:%M:%S"
               midiLibraryDefaultProgramName="New Program - %H:%M:%S" midiLibraryDefaultSnapshotName="Snapshot - %H:%M:%S"
               midiLibraryCustomRequests="">
    <midiLibrarySnapshots name="Snapshots"/>
    <midiLibraryFirmware name="Firmware"/>
    <midiLibraryEditBuffer name="Edit buffer"/>
    <midiLibraryTransactions name="Transactions"/>
  </midiLibrary>
  <luaManager>
    <luaManagerMethods>
      <luaMethodGroup name="Built-In" uuid="0717f91120b24a49bdfa02174b3e51a5">
        <luaMethod luaMethodName="table_dump" luaMethodCode="-- @1.1&#13;&#10;--&#13;&#10;-- Print table contents&#13;&#10;--&#13;&#10;function table_dump(table)&#13;&#10;&#9;for key,value in ipairs(table) do&#13;&#10;&#9;&#9;_DBG (&quot;KEY= [&quot;..key..&quot;]&quot;)&#13;&#10;&#13;&#10;&#9;&#9;if (type(value) == &quot;table&quot;) then&#13;&#10;&#9;&#9;&#9;table_dump(value)&#13;&#10;&#9;&#9;elseif (type(value) == &quot;nil&quot;) then&#13;&#10;&#9;&#9;&#9;_DBG (&quot; = NIL&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;what (value)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000001"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="what" luaMethodCode="-- @1.1&#13;&#10;--&#13;&#10;-- Print methods for an object&#13;&#10;--&#13;&#10;function what(o)&#13;&#10;&#9;info = class_info(o)&#13;&#10;&#9;if info ~= nil then&#13;&#10;&#9;&#9;ret = &quot;Object type [&quot; .. info.name .. &quot;]\n-----------------------------------------------------------------\n\n&quot;..&quot;Members:\n&quot;&#13;&#10;&#13;&#10;&#9;&#9;if info.name == &quot;table&quot; then&#13;&#10;&#9;&#9;&#9;table_dump(o)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;for k, v in pairs(info.methods) do&#13;&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;ret = ret .. &quot;\n\nAttributes:\n&quot;&#13;&#10;&#9;&#9;for k, v in pairs(info.attributes) do&#13;&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;console (ret)&#13;&#10;&#9;return ret&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000002"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="how" luaMethodCode="-- @1.1&#13;&#10;--&#13;&#10;-- Print all available classes&#13;&#10;--&#13;&#10;function how()&#13;&#10;&#9;ret = &quot;Available classes:\n&quot;&#13;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#13;&#10;&#9;for i,v in ipairs(class_names()) do&#13;&#10;&#9;&#9;ret = ret .. &quot;\t&quot;.. v .. &quot;\n&quot;&#13;&#10;&#9;end&#13;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#13;&#10;&#9;console (J(ret))&#13;&#10;&#9;return ret&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000003"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="json4lua" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- JSON4Lua: JSON encoding / decoding support for the Lua language.&#13;&#10;-- json Module.&#13;&#10;-- Author: Craig Mason-Jones&#13;&#10;-- Homepage: http://json.luaforge.net/&#13;&#10;-- Version: 0.9.40&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;-- Please see LICENCE.txt for details.&#13;&#10;--&#13;&#10;-- USAGE:&#13;&#10;-- This module exposes two functions:&#13;&#10;--   encode(o)&#13;&#10;--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.&#13;&#10;--   decode(json_string)&#13;&#10;--     Returns a Lua object populated with the data encoded in the JSON string json_string.&#13;&#10;--&#13;&#10;-- REQUIREMENTS:&#13;&#10;--   compat-5.1 if using Lua 5.0&#13;&#10;--&#13;&#10;-- CHANGELOG&#13;&#10;--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). &#13;&#10;--          Fixed Lua 5.1 compatibility issues.&#13;&#10;--   &#9;&#9;Introduced json.null to have null values in associative arrays.&#13;&#10;--          encode() performance improvement (more than 50%) through table.concat rather than ..&#13;&#10;--          Introduced decode ability to ignore /**/ comments in the JSON string.&#13;&#10;--   0.9.10 Fix to array encoding / decoding to correctly manage nil/null values in arrays.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;json&quot;)&#13;&#10;&#13;&#10;-- Public functions&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;local decode_scanArray&#13;&#10;local decode_scanComment&#13;&#10;local decode_scanConstant&#13;&#10;local decode_scanNumber&#13;&#10;local decode_scanObject&#13;&#10;local decode_scanString&#13;&#10;local decode_scanWhitespace&#13;&#10;local encodeString&#13;&#10;local isArray&#13;&#10;local isEncodable&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;--- Encodes an arbitrary Lua object / variable.&#13;&#10;-- @param v The Lua object / variable to be JSON encoded.&#13;&#10;-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)&#13;&#10;function encode (v)&#13;&#10;  -- Handle nil values&#13;&#10;  if v==nil then&#13;&#10;    return &quot;null&quot;&#13;&#10;  end&#13;&#10;  &#13;&#10;  local vtype = base.type(v)  &#13;&#10;&#13;&#10;  -- Handle strings&#13;&#10;  if vtype=='string' then    &#13;&#10;    return '&quot;' .. encodeString(v) .. '&quot;'&#9;    -- Need to handle encoding in string&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle booleans&#13;&#10;  if vtype=='number' or vtype=='boolean' then&#13;&#10;    return base.tostring(v)&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle tables&#13;&#10;  if vtype=='table' then&#13;&#10;    local rval = {}&#13;&#10;    -- Consider arrays separately&#13;&#10;    local bArray, maxCount = isArray(v)&#13;&#10;    if bArray then&#13;&#10;      for i = 1,maxCount do&#13;&#10;        table.insert(rval, encode(v[i]))&#13;&#10;      end&#13;&#10;    else&#9;-- An object, not an array&#13;&#10;      for i,j in base.pairs(v) do&#13;&#10;        if isEncodable(i) and isEncodable(j) then&#13;&#10;          table.insert(rval, '&quot;' .. encodeString(i) .. '&quot;:' .. encode(j))&#13;&#10;        end&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if bArray then&#13;&#10;      return '[' .. table.concat(rval,',') ..']'&#13;&#10;    else&#13;&#10;      return '{' .. table.concat(rval,',') .. '}'&#13;&#10;    end&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle null values&#13;&#10;  if vtype=='function' and v==null then&#13;&#10;    return 'null'&#13;&#10;  end&#13;&#10;  &#13;&#10;  base.assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. base.tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.&#13;&#10;-- @param s The string to scan.&#13;&#10;-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.&#13;&#10;-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,&#13;&#10;-- and the position of the first character after&#13;&#10;-- the scanned JSON object.&#13;&#10;function decode(s, startPos)&#13;&#10;  startPos = startPos and startPos or 1&#13;&#10;  startPos = decode_scanWhitespace(s,startPos)&#13;&#10;  base.assert(startPos&lt;=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')&#13;&#10;  local curChar = string.sub(s,startPos,startPos)&#13;&#10;  -- Object&#13;&#10;  if curChar=='{' then&#13;&#10;    return decode_scanObject(s,startPos)&#13;&#10;  end&#13;&#10;  -- Array&#13;&#10;  if curChar=='[' then&#13;&#10;    return decode_scanArray(s,startPos)&#13;&#10;  end&#13;&#10;  -- Number&#13;&#10;  if string.find(&quot;+-0123456789.e&quot;, curChar, 1, true) then&#13;&#10;    return decode_scanNumber(s,startPos)&#13;&#10;  end&#13;&#10;  -- String&#13;&#10;  if curChar==[[&quot;]] or curChar==[[']] then&#13;&#10;    return decode_scanString(s,startPos)&#13;&#10;  end&#13;&#10;  if string.sub(s,startPos,startPos+1)=='/*' then&#13;&#10;    return decode(s, decode_scanComment(s,startPos))&#13;&#10;  end&#13;&#10;  -- Otherwise, it must be a constant&#13;&#10;  return decode_scanConstant(s,startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- The null function allows one to specify a null value in an associative array (which is otherwise&#13;&#10;-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null }&#13;&#10;function null()&#13;&#10;  return null -- so json.null() will also return null ;-)&#13;&#10;end&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Internal, PRIVATE functions.&#13;&#10;-- Following a Python-like convention, I have prefixed all these 'PRIVATE'&#13;&#10;-- functions with an underscore.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;--- Scans an array from JSON into a Lua object&#13;&#10;-- startPos begins at the start of the array.&#13;&#10;-- Returns the array and the next starting position&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position for the scan.&#13;&#10;-- @return table, int The scanned array as a table, and the position of the next character to scan.&#13;&#10;function decode_scanArray(s,startPos)&#13;&#10;  local array = {}&#9;-- The return value&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )&#13;&#10;  startPos = startPos + 1&#13;&#10;  -- Infinite loop for array elements&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen,'JSON String ended unexpectedly scanning array.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar==']') then&#13;&#10;      return array, startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON String ended unexpectedly scanning array.')&#13;&#10;    object, startPos = decode(s,startPos)&#13;&#10;    table.insert(array,object)&#13;&#10;  until false&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a comment and discards the comment.&#13;&#10;-- Returns the position of the next character following the comment.&#13;&#10;-- @param string s The JSON string to scan.&#13;&#10;-- @param int startPos The starting position of the comment&#13;&#10;function decode_scanComment(s, startPos)&#13;&#10;  base.assert( string.sub(s,startPos,startPos+1)=='/*', &quot;decode_scanComment called but comment does not start at position &quot; .. startPos)&#13;&#10;  local endPos = string.find(s,'*/',startPos+2)&#13;&#10;  base.assert(endPos~=nil, &quot;Unterminated comment in string at &quot; .. startPos)&#13;&#10;  return endPos+2  &#13;&#10;end&#13;&#10;&#13;&#10;--- Scans for given constants: true, false or null&#13;&#10;-- Returns the appropriate Lua type, and the position of the next character to read.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position in the string at which to start scanning.&#13;&#10;-- @return object, int The object (true, false or nil) and the position at which the next character should be &#13;&#10;-- scanned.&#13;&#10;function decode_scanConstant(s, startPos)&#13;&#10;  local consts = { [&quot;true&quot;] = true, [&quot;false&quot;] = false, [&quot;null&quot;] = nil }&#13;&#10;  local constNames = {&quot;true&quot;,&quot;false&quot;,&quot;null&quot;}&#13;&#10;&#13;&#10;  for i,k in base.pairs(constNames) do&#13;&#10;    --print (&quot;[&quot; .. string.sub(s,startPos, startPos + string.len(k) -1) ..&quot;]&quot;, k)&#13;&#10;    if string.sub(s,startPos, startPos + string.len(k) -1 )==k then&#13;&#10;      return consts[k], startPos + string.len(k)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  base.assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a number from the JSON encoded string.&#13;&#10;-- (in fact, also is able to scan numeric +- eqns, which is not&#13;&#10;-- in the JSON spec.)&#13;&#10;-- Returns the number, and the position of the next character&#13;&#10;-- after the number.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position at which to start scanning.&#13;&#10;-- @return number, int The extracted number and the position of the next character to scan.&#13;&#10;function decode_scanNumber(s,startPos)&#13;&#10;  local endPos = startPos+1&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local acceptableChars = &quot;+-0123456789.e&quot;&#13;&#10;  while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)&#13;&#10;&#9;and endPos&lt;=stringLen&#13;&#10;&#9;) do&#13;&#10;    endPos = endPos + 1&#13;&#10;  end&#13;&#10;  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)&#13;&#10;  local stringEval = base.loadstring(stringValue)&#13;&#10;  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)&#13;&#10;  return stringEval(), endPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON object into a Lua object.&#13;&#10;-- startPos begins at the start of the object.&#13;&#10;-- Returns the object and the next starting position.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return table, int The scanned object as a table and the position of the next character to scan.&#13;&#10;function decode_scanObject(s,startPos)&#13;&#10;  local object = {}&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local key, value&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)&#13;&#10;  startPos = startPos + 1&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly while scanning object.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar=='}') then&#13;&#10;      return object,startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly scanning object.')&#13;&#10;    -- Scan the key&#13;&#10;    key, startPos = decode(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    value, startPos = decode(s,startPos)&#13;&#10;    object[key]=value&#13;&#10;  until false&#9;-- infinite loop while key-value pairs are found&#13;&#10;end&#13;&#10;&#13;&#10;-- START SoniEx2&#13;&#10;-- Initialize some things used by decode_scanString&#13;&#10;-- You know, for efficiency&#13;&#10;local escapeSequences = {&#13;&#10;  [&quot;\\t&quot;] = &quot;\t&quot;,&#13;&#10;  [&quot;\\f&quot;] = &quot;\f&quot;,&#13;&#10;  [&quot;\\r&quot;] = &quot;\r&quot;,&#13;&#10;  [&quot;\\n&quot;] = &quot;\n&quot;,&#13;&#10;  [&quot;\\b&quot;] = &quot;\b&quot;&#13;&#10;}&#13;&#10;base.setmetatable(escapeSequences, {__index = function(t,k)&#13;&#10;  -- skip &quot;\&quot; aka strip escape&#13;&#10;  return string.sub(k,2)&#13;&#10;end})&#13;&#10;-- END SoniEx2&#13;&#10;&#13;&#10;--- Scans a JSON string from the opening inverted comma or single quote to the&#13;&#10;-- end of the string.&#13;&#10;-- Returns the string extracted as a Lua string,&#13;&#10;-- and the position of the next non-string character&#13;&#10;-- (after the closing inverted comma or single quote).&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return string, int The extracted string as a Lua string, and the next character to parse.&#13;&#10;function decode_scanString(s,startPos)&#13;&#10;  base.assert(startPos, 'decode_scanString(..) called without start position')&#13;&#10;  local startChar = string.sub(s,startPos,startPos)&#13;&#10;  -- START SoniEx2&#13;&#10;  -- PS: I don't think single quotes are valid JSON&#13;&#10;  base.assert(startChar == [[&quot;]] or startChar == [[']],'decode_scanString called for a non-string')&#13;&#10;  --base.assert(startPos, &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; for string at position &quot; .. oldStart)&#13;&#10;  local t = {}&#13;&#10;  local i,j = startPos,startPos&#13;&#10;  while string.find(s, startChar, j+1) ~= j+1 do&#13;&#10;    local oldj = j&#13;&#10;    i,j = string.find(s, &quot;\\.&quot;, j+1)&#13;&#10;    local x,y = string.find(s, startChar, oldj+1)&#13;&#10;    if not i or x &lt; i then&#13;&#10;      base.print(s, startPos, string.sub(s,startPos,oldj))&#13;&#10;      i,j = x,y-1&#13;&#10;      if not x then base.print(s, startPos, string.sub(s,startPos,oldj)) end&#13;&#10;    end&#13;&#10;    table.insert(t, string.sub(s, oldj+1, i-1))&#13;&#10;    if string.sub(s, i, j) == &quot;\\u&quot; then&#13;&#10;      local a = string.sub(s,j+1,j+4)&#13;&#10;      j = j + 4&#13;&#10;      local n = base.tonumber(a, 16)&#13;&#10;      base.assert(n, &quot;String decoding failed: bad Unicode escape &quot; .. a .. &quot; at position &quot; .. i .. &quot; : &quot; .. j)&#13;&#10;      -- math.floor(x/2&#94;y) == lazy right shift&#13;&#10;      -- a % 2&#94;b == bitwise_and(a, (2&#94;b)-1)&#13;&#10;      -- 64 = 2&#94;6&#13;&#10;      -- 4096 = 2&#94;12 (or 2&#94;6 * 2&#94;6)&#13;&#10;      local x&#13;&#10;      if n &lt; 0x80 then&#13;&#10;        x = string.char(n % 0x80)&#13;&#10;      elseif n &lt; 0x800 then&#13;&#10;        -- [110x xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xC0 + (math.floor(n/64) % 0x20), 0x80 + (n % 0x40))&#13;&#10;      else&#13;&#10;        -- [1110 xxxx] [10xx xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xE0 + (math.floor(n/4096) % 0x10), 0x80 + (math.floor(n/64) % 0x40), 0x80 + (n % 0x40))&#13;&#10;      end&#13;&#10;      table.insert(t, x)&#13;&#10;    else&#13;&#10;      table.insert(t, escapeSequences[string.sub(s, i, j)])&#13;&#10;    end&#13;&#10;  end&#13;&#10;  table.insert(t,string.sub(j, j+1))&#13;&#10;  base.assert(string.find(s, startChar, j+1), &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; at position &quot; .. j .. &quot;(for string at position &quot; .. startPos .. &quot;)&quot;)&#13;&#10;  return table.concat(t,&quot;&quot;), j+2&#13;&#10;  -- END SoniEx2&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON string skipping all whitespace from the current start position.&#13;&#10;-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.&#13;&#10;-- @param s The string being scanned&#13;&#10;-- @param startPos The starting position where we should begin removing whitespace.&#13;&#10;-- @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string&#13;&#10;-- was reached.&#13;&#10;function decode_scanWhitespace(s,startPos)&#13;&#10;  local whitespace=&quot; \n\r\t&quot;&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  and startPos &lt;= stringLen) do&#13;&#10;    startPos = startPos + 1&#13;&#10;  end&#13;&#10;  return startPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Encodes a string to be JSON-compatible.&#13;&#10;-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-)&#13;&#10;-- @param s The string to return as a JSON encoded (i.e. backquoted string)&#13;&#10;-- @return The string appropriately escaped.&#13;&#10;&#13;&#10;local escapeList = {&#13;&#10;    ['&quot;']  = '\\&quot;',&#13;&#10;    ['\\'] = '\\\\',&#13;&#10;    ['/']  = '\\/', &#13;&#10;    ['\b'] = '\\b',&#13;&#10;    ['\f'] = '\\f',&#13;&#10;    ['\n'] = '\\n',&#13;&#10;    ['\r'] = '\\r',&#13;&#10;    ['\t'] = '\\t'&#13;&#10;}&#13;&#10;&#13;&#10;function encodeString(s)&#13;&#10; return s:gsub(&quot;.&quot;, function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat&#13;&#10;end&#13;&#10;&#13;&#10;-- Determines whether the given Lua type is an array or a table / dictionary.&#13;&#10;-- We consider any table an array if it has indexes 1..n for its n items, and no&#13;&#10;-- other data in the table.&#13;&#10;-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...&#13;&#10;-- @param t The table to evaluate as an array&#13;&#10;-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,&#13;&#10;-- the second returned value is the maximum&#13;&#10;-- number of indexed elements in the array. &#13;&#10;function isArray(t)&#13;&#10;  -- Next we count all the elements, ensuring that any non-indexed elements are not-encodable &#13;&#10;  -- (with the possible exception of 'n')&#13;&#10;  local maxIndex = 0&#13;&#10;  for k,v in base.pairs(t) do&#13;&#10;    if (base.type(k)=='number' and math.floor(k)==k and 1&lt;=k) then&#9;-- k,v is an indexed pair&#13;&#10;      if (not isEncodable(v)) then return false end&#9;-- All array elements must be encodable&#13;&#10;      maxIndex = math.max(maxIndex,k)&#13;&#10;    else&#13;&#10;      if (k=='n') then&#13;&#10;        if v ~= table.getn(t) then return false end  -- False if n does not hold the number of elements&#13;&#10;      else -- Else of (k=='n')&#13;&#10;        if isEncodable(v) then return false end&#13;&#10;      end  -- End of (k~='n')&#13;&#10;    end -- End of k,v not an indexed pair&#13;&#10;  end  -- End of loop across all pairs&#13;&#10;  return true, maxIndex&#13;&#10;end&#13;&#10;&#13;&#10;--- Determines whether the given Lua object / table / variable can be JSON encoded. The only&#13;&#10;-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.&#13;&#10;-- In this implementation, all other types are ignored.&#13;&#10;-- @param o The object to examine.&#13;&#10;-- @return boolean True if the object should be JSON encoded, false if it should be ignored.&#13;&#10;function isEncodable(o)&#13;&#10;  local t = base.type(o)&#13;&#10;  return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table') or (t=='function' and o==null) &#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000004"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="debugger.lua" luaMethodCode="--{{{  history&#13;&#10;&#13;&#10;--15/03/06 DCN Created based on RemDebug&#13;&#10;--28/04/06 DCN Update for Lua 5.1&#13;&#10;--01/06/06 DCN Fix command argument parsing&#13;&#10;--             Add step/over N facility&#13;&#10;--             Add trace lines facility&#13;&#10;--05/06/06 DCN Add trace call/return facility&#13;&#10;--06/06/06 DCN Make it behave when stepping through the creation of a coroutine&#13;&#10;--06/06/06 DCN Integrate the simple debugger into the main one&#13;&#10;--07/06/06 DCN Provide facility to step into coroutines&#13;&#10;--13/06/06 DCN Fix bug that caused the function environment to get corrupted with the global one&#13;&#10;--14/06/06 DCN Allow 'sloppy' file names when setting breakpoints&#13;&#10;--04/08/06 DCN Allow for no space after command name&#13;&#10;--11/08/06 DCN Use io.write not print&#13;&#10;--30/08/06 DCN Allow access to array elements in 'dump'&#13;&#10;--10/10/06 DCN Default to breakfile for all commands that require a filename and give '-'&#13;&#10;--06/12/06 DCN Allow for punctuation characters in DUMP variable names&#13;&#10;--03/01/07 DCN Add pause on/off facility&#13;&#10;--19/06/07 DCN Allow for duff commands being typed in the debugger (thanks to Michael.Bringmann@lsi.com)&#13;&#10;--             Allow for case sensitive file systems               (thanks to Michael.Bringmann@lsi.com)&#13;&#10;--04/08/09 DCN Add optional line count param to pause&#13;&#10;--05/08/09 DCN Reset the debug hook in Pause() even if we think we're started&#13;&#10;--30/09/09 DCN Re-jig to not use co-routines (makes debugging co-routines awkward)&#13;&#10;--01/10/09 DCN Add ability to break on reaching any line in a file&#13;&#10;--24/07/13 TWW Added code for emulating setfenv/getfenv in Lua 5.2 as per&#13;&#10;--             http://lua-users.org/lists/lua-l/2010-06/msg00313.html&#13;&#10;--25/07/13 TWW Copied Alex Parrill's fix for errors when tracing back across a C frame&#13;&#10;--             (https://github.com/ColonelThirtyTwo/clidebugger, 26/01/12)&#13;&#10;--25/07/13 DCN Allow for windows and unix file name conventions in has_breakpoint&#13;&#10;--26/07/13 DCN Allow for \ being interpreted as an escape inside a [] pattern in 5.2&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  description&#13;&#10;&#13;&#10;--A simple command line debug system for Lua written by Dave Nichols of&#13;&#10;--Match-IT Limited. Its public domain software. Do with it as you wish.&#13;&#10;&#13;&#10;--This debugger was inspired by:&#13;&#10;-- RemDebug 1.0 Beta&#13;&#10;-- Copyright Kepler Project 2005 (http://www.keplerproject.org/remdebug)&#13;&#10;&#13;&#10;--Usage:&#13;&#10;--  require('debugger')        --load the debug library&#13;&#10;--  pause(message)             --start/resume a debug session&#13;&#10;&#13;&#10;--An assert() failure will also invoke the debugger.&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;local IsWindows = string.find(string.lower(os.getenv('OS') or ''),'&#94;windows')&#13;&#10;&#13;&#10;local coro_debugger&#13;&#10;local events = { BREAK = 1, WATCH = 2, STEP = 3, SET = 4 }&#13;&#10;breakpoints = {}&#13;&#10;local watches = {}&#13;&#10;local step_into   = false&#13;&#10;local step_over   = false&#13;&#10;local step_lines  = 0&#13;&#10;local step_level  = {main=0}&#13;&#10;local stack_level = {main=0}&#13;&#10;local trace_level = {main=0}&#13;&#10;local trace_calls = false&#13;&#10;local trace_returns = false&#13;&#10;local trace_lines = false&#13;&#10;local ret_file, ret_line, ret_name&#13;&#10;local current_thread = 'main'&#13;&#10;local started = false&#13;&#10;local pause_off = false&#13;&#10;local _g      = _G&#13;&#10;local cocreate, cowrap = coroutine.create, coroutine.wrap&#13;&#10;local pausemsg = 'pause'&#13;&#10;&#13;&#10;--{{{  make Lua 5.2 compatible&#13;&#10;&#13;&#10;if not setfenv then -- Lua 5.2&#13;&#10;  --[[&#13;&#10;  As far as I can see, the only missing detail of these functions (except&#13;&#10;  for occasional bugs) to achieve 100% compatibility is the case of&#13;&#10;  'getfenv' over a function that does not have an _ENV variable (that is,&#13;&#10;  it uses no globals).&#13;&#10;&#13;&#10;  We could use a weak table to keep the environments of these functions&#13;&#10;  when set by setfenv, but that still misses the case of a function&#13;&#10;  without _ENV that was not subjected to setfenv.&#13;&#10;&#13;&#10;  -- Roberto&#13;&#10;  ]]--&#13;&#10;&#13;&#10;  setfenv = setfenv or function(f, t)&#13;&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#13;&#10;    local name&#13;&#10;    local up = 0&#13;&#10;    repeat&#13;&#10;      up = up + 1&#13;&#10;      name = debug.getupvalue(f, up)&#13;&#10;    until name == '_ENV' or name == nil&#13;&#10;    if name then&#13;&#10;      debug.upvaluejoin(f, up, function() return name end, 1) -- use unique upvalue&#13;&#10;      debug.setupvalue(f, up, t)&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  getfenv = getfenv or function(f)&#13;&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#13;&#10;    local name, val&#13;&#10;    local up = 0&#13;&#10;    repeat&#13;&#10;      up = up + 1&#13;&#10;      name, val = debug.getupvalue(f, up)&#13;&#10;    until name == '_ENV' or name == nil&#13;&#10;    return val&#13;&#10;  end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  local hints -- command help&#13;&#10;--The format in here is name=summary|description&#13;&#10;local hints = {&#13;&#10;&#13;&#10;pause =   [[&#13;&#10;pause(msg[,lines][,force]) -- start/resume a debugger session|&#13;&#10;&#13;&#10;This can only be used in your code or from the console as a means to&#13;&#10;start/resume a debug session.&#13;&#10;If msg is given that is shown when the session starts/resumes. Useful to&#13;&#10;give a context if you've instrumented your code with pause() statements.&#13;&#10;&#13;&#10;If lines is given, the script pauses after that many lines, else it pauses&#13;&#10;immediately.&#13;&#10;&#13;&#10;If force is true, the pause function is honoured even if poff has been used.&#13;&#10;This is useful when in an interactive console session to regain debugger&#13;&#10;control.&#13;&#10;]],&#13;&#10;&#13;&#10;poff =    [[&#13;&#10;poff                -- turn off pause() command|&#13;&#10;&#13;&#10;This causes all pause() commands to be ignored. This is useful if you have&#13;&#10;instrumented your code in a busy loop and want to continue normal execution&#13;&#10;with no further interruption.&#13;&#10;]],&#13;&#10;&#13;&#10;pon =     [[&#13;&#10;pon                 -- turn on pause() command|&#13;&#10;&#13;&#10;This re-instates honouring the pause() commands you may have instrumented&#13;&#10;your code with.&#13;&#10;]],&#13;&#10;&#13;&#10;setb =    [[&#13;&#10;setb [line file]    -- set a breakpoint to line/file|, line 0 means 'any'&#13;&#10;&#13;&#10;If file is omitted or is &quot;-&quot; the breakpoint is set at the file for the&#13;&#10;currently set level (see &quot;set&quot;). Execution pauses when this line is about&#13;&#10;to be executed and the debugger session is re-activated.&#13;&#10;&#13;&#10;The file can be given as the fully qualified name, partially qualified or&#13;&#10;just the file name. E.g. if file is set as &quot;myfile.lua&quot;, then whenever&#13;&#10;execution reaches any file that ends with &quot;myfile.lua&quot; it will pause. If&#13;&#10;no extension is given, any extension will do.&#13;&#10;&#13;&#10;If the line is given as 0, then reaching any line in the file will do.&#13;&#10;]],&#13;&#10;&#13;&#10;delb =    [[&#13;&#10;delb [line file]    -- removes a breakpoint|&#13;&#10;&#13;&#10;If file is omitted or is &quot;-&quot; the breakpoint is removed for the file of the&#13;&#10;currently set level (see &quot;set&quot;).&#13;&#10;]],&#13;&#10;&#13;&#10;delallb = [[&#13;&#10;delallb             -- removes all breakpoints|&#13;&#10;]],&#13;&#10;&#13;&#10;setw =    [[&#13;&#10;setw &lt;exp&gt;          -- adds a new watch expression|&#13;&#10;&#13;&#10;The expression is evaluated before each line is executed. If the expression&#13;&#10;yields true then execution is paused and the debugger session re-activated.&#13;&#10;The expression is executed in the context of the line about to be executed.&#13;&#10;]],&#13;&#10;&#13;&#10;delw =    [[&#13;&#10;delw &lt;index&gt;        -- removes the watch expression at index|&#13;&#10;&#13;&#10;The index is that returned when the watch expression was set by setw.&#13;&#10;]],&#13;&#10;&#13;&#10;delallw = [[&#13;&#10;delallw             -- removes all watch expressions|&#13;&#10;]],&#13;&#10;&#13;&#10;run     = [[&#13;&#10;run                 -- run until next breakpoint or watch expression|&#13;&#10;]],&#13;&#10;&#13;&#10;step    = [[&#13;&#10;step [N]            -- run next N lines, stepping into function calls|&#13;&#10;&#13;&#10;If N is omitted, use 1.&#13;&#10;]],&#13;&#10;&#13;&#10;over    = [[&#13;&#10;over [N]            -- run next N lines, stepping over function calls|&#13;&#10;&#13;&#10;If N is omitted, use 1.&#13;&#10;]],&#13;&#10;&#13;&#10;out     = [[&#13;&#10;out [N]             -- run lines until stepped out of N functions|&#13;&#10;&#13;&#10;If N is omitted, use 1.&#13;&#10;If you are inside a function, using &quot;out 1&quot; will run until you return&#13;&#10;from that function to the caller.&#13;&#10;]],&#13;&#10;&#13;&#10;gotoo   = [[&#13;&#10;gotoo [line file]    -- step to line in file|&#13;&#10;&#13;&#10;This is equivalent to 'setb line file', followed by 'run', followed&#13;&#10;by 'delb line file'.&#13;&#10;]],&#13;&#10;&#13;&#10;listb   = [[&#13;&#10;listb               -- lists breakpoints|&#13;&#10;]],&#13;&#10;&#13;&#10;listw   = [[&#13;&#10;listw               -- lists watch expressions|&#13;&#10;]],&#13;&#10;&#13;&#10;set     = [[&#13;&#10;set [level]         -- set context to stack level, omitted=show|&#13;&#10;&#13;&#10;If level is omitted it just prints the current level set.&#13;&#10;This sets the current context to the level given. This affects the&#13;&#10;context used for several other functions (e.g. vars). The possible&#13;&#10;levels are those shown by trace.&#13;&#10;]],&#13;&#10;&#13;&#10;vars    = [[&#13;&#10;vars [depth]        -- list context locals to depth, omitted=1|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Lists all non-nil local variables and all non-nil upvalues in the&#13;&#10;currently set context. For variables that are tables, lists all fields&#13;&#10;to the given depth.&#13;&#10;]],&#13;&#10;&#13;&#10;fenv    = [[&#13;&#10;fenv [depth]        -- list context function env to depth, omitted=1|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Lists all function environment variables in the currently set context.&#13;&#10;For variables that are tables, lists all fields to the given depth.&#13;&#10;]],&#13;&#10;&#13;&#10;glob    = [[&#13;&#10;glob [depth]        -- list globals to depth, omitted=1|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Lists all global variables.&#13;&#10;For variables that are tables, lists all fields to the given depth.&#13;&#10;]],&#13;&#10;&#13;&#10;ups     = [[&#13;&#10;ups                 -- list all the upvalue names|&#13;&#10;&#13;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#13;&#10;This provides a means to identify which vars are upvalues and which are&#13;&#10;locals. If a name is both an upvalue and a local, the local value takes&#13;&#10;precedance.&#13;&#10;]],&#13;&#10;&#13;&#10;locs    = [[&#13;&#10;locs                -- list all the locals names|&#13;&#10;&#13;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#13;&#10;This provides a means to identify which vars are upvalues and which are&#13;&#10;locals. If a name is both an upvalue and a local, the local value takes&#13;&#10;precedance.&#13;&#10;]],&#13;&#10;&#13;&#10;dump    = [[&#13;&#10;dump &lt;var&gt; [depth]  -- dump all fields of variable to depth|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Prints the value of &lt;var&gt; in the currently set context level. If &lt;var&gt;&#13;&#10;is a table, lists all fields to the given depth. &lt;var&gt; can be just a&#13;&#10;name, or name.field or name.# to any depth, e.g. t.1.f accesses field&#13;&#10;'f' in array element 1 in table 't'.&#13;&#10;&#13;&#10;Can also be called from a script as dump(var,depth).&#13;&#10;]],&#13;&#10;&#13;&#10;tron    = [[&#13;&#10;tron [crl]          -- turn trace on for (c)alls, (r)etuns, (l)lines|&#13;&#10;&#13;&#10;If no parameter is given then tracing is turned off.&#13;&#10;When tracing is turned on a line is printed to the console for each&#13;&#10;debug 'event' selected. c=function calls, r=function returns, l=lines.&#13;&#10;]],&#13;&#10;&#13;&#10;trace   = [[&#13;&#10;trace               -- dumps a stack trace|&#13;&#10;&#13;&#10;Format is [level] = file,line,name&#13;&#10;The level is a candidate for use by the 'set' command.&#13;&#10;]],&#13;&#10;&#13;&#10;info    = [[&#13;&#10;info                -- dumps the complete debug info captured|&#13;&#10;&#13;&#10;Only useful as a diagnostic aid for the debugger itself. This information&#13;&#10;can be HUGE as it dumps all variables to the maximum depth, so be careful.&#13;&#10;]],&#13;&#10;&#13;&#10;show    = [[&#13;&#10;show line file X Y  -- show X lines before and Y after line in file|&#13;&#10;&#13;&#10;If line is omitted or is '-' then the current set context line is used.&#13;&#10;If file is omitted or is '-' then the current set context file is used.&#13;&#10;If file is not fully qualified and cannot be opened as specified, then&#13;&#10;a search for the file in the package[path] is performed using the usual&#13;&#10;&quot;require&quot; searching rules. If no file extension is given, .lua is used.&#13;&#10;Prints the lines from the source file around the given line.&#13;&#10;]],&#13;&#10;&#13;&#10;exit    = [[&#13;&#10;exit                -- exits debugger, re-start it using pause()|&#13;&#10;]],&#13;&#10;&#13;&#10;help    = [[&#13;&#10;help [command]      -- show this list or help for command|&#13;&#10;]],&#13;&#10;&#13;&#10;[&quot;&lt;statement&gt;&quot;] = [[&#13;&#10;&lt;statement&gt;         -- execute a statement in the current context|&#13;&#10;&#13;&#10;The statement can be anything that is legal in the context, including&#13;&#10;assignments. Such assignments affect the context and will be in force&#13;&#10;immediately. Any results returned are printed. Use '=' as a short-hand&#13;&#10;for 'return', e.g. &quot;=func(arg)&quot; will call 'func' with 'arg' and print&#13;&#10;the results, and &quot;=var&quot; will just print the value of 'var'.&#13;&#10;]],&#13;&#10;&#13;&#10;what    = [[&#13;&#10;what &lt;func&gt;         -- show where &lt;func&gt; is defined (if known)|&#13;&#10;]],&#13;&#10;&#13;&#10;}&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{ Local function to get table size&#13;&#10;local function tsize(t)&#13;&#10;    local count=0&#13;&#10;&#13;&#10;    for k,v in pairs(t) do&#13;&#10;        count = count + 1&#13;&#10;    end&#13;&#10;&#13;&#10;    return count&#13;&#10;end&#13;&#10;---}}}&#13;&#10;&#13;&#10;---{{{ Global utility function to set breakpoints, used inside Ctrlr&#13;&#10;function setBreakpoint(line, file, shouldBeSet)&#13;&#10;    if not breakpoints[line] then&#13;&#10;        breakpoints[line] = {}&#13;&#10;    end&#13;&#10;&#13;&#10;    if shouldBeSet then&#13;&#10;        breakpoints[line][file] = true&#13;&#10;    else&#13;&#10;        breakpoints[line] = nil&#13;&#10;    end&#13;&#10;end&#13;&#10;---}}}&#13;&#10;&#13;&#10;&#13;&#10;--{{{  local function getinfo(level,field)&#13;&#10;&#13;&#10;--like debug.getinfo but copes with no activation record at the given level&#13;&#10;--and knows how to get 'field'. 'field' can be the name of any of the&#13;&#10;--activation record fields or any of the 'what' names or nil for everything.&#13;&#10;--only valid when using the stack level to get info, not a function name.&#13;&#10;&#13;&#10;local function getinfo(level,field)&#13;&#10;  level = level + 1  --to get to the same relative level as the caller&#13;&#10;  if not field then return debug.getinfo(level) end&#13;&#10;  local what&#13;&#10;  if field == 'name' or field == 'namewhat' then&#13;&#10;    what = 'n'&#13;&#10;  elseif field == 'what' or field == 'source' or field == 'linedefined' or field == 'lastlinedefined' or field == 'short_src' then&#13;&#10;    what = 'S'&#13;&#10;  elseif field == 'currentline' then&#13;&#10;    what = 'l'&#13;&#10;  elseif field == 'nups' then&#13;&#10;    what = 'u'&#13;&#10;  elseif field == 'func' then&#13;&#10;    what = 'f'&#13;&#10;  else&#13;&#10;    return debug.getinfo(level,field)&#13;&#10;  end&#13;&#10;  local ar = debug.getinfo(level,what)&#13;&#10;  if ar then return ar[field] else return nil end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function indented( level, ... )&#13;&#10;&#13;&#10;local function indented( level, ... )&#13;&#10;  ctrlrDebugger:write( string.format (&quot;%s%s\n&quot;, string.rep('  ',level), table.concat({...}) ))&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function dumpval( level, name, value, limit )&#13;&#10;&#13;&#10;local dumpvisited&#13;&#10;&#13;&#10;local function dumpval( level, name, value, limit )&#13;&#10;    local index&#13;&#10;&#13;&#10;    if type(name) == 'number' then&#13;&#10;        index = string.format(&quot;%q,&quot;,name)&#13;&#10;    elseif type(name) == 'string' and (name == '__VARSLEVEL__' or name == '__ENVIRONMENT__' or name == '__GLOBALS__' or name == '__UPVALUES__' or name == '__LOCALS__') then&#13;&#10;        --ignore these, they are debugger generated&#13;&#10;        return&#13;&#10;    elseif type(name) == 'string' and string.find(name,'&#94;[_%a][_.%w]*$') then&#13;&#10;        index = string.format (&quot;%q: &quot;, name);&#13;&#10;    else&#13;&#10;        index = string.format (&quot;%q,&quot;, tostring(name))&#13;&#10;    end&#13;&#10;&#13;&#10;    if type(value) == 'table' then&#13;&#10;        if dumpvisited[value] then&#13;&#10;            indented (level, index, string.format(&quot;%q&quot;, dumpvisited[value]))&#13;&#10;        else&#13;&#10;            dumpvisited[value] = string.format (&quot;\&quot;table\&quot;: \&quot;%d\&quot;,&quot;, tsize (value))&#13;&#10;            if (limit or 0) &gt; 0 and level+1 &gt;= limit then&#13;&#10;                indented (level, index, string.format (&quot;{%s&quot;, string.gsub(dumpvisited[value], &quot;,&quot;, &quot;},&quot;)))&#13;&#10;            else&#13;&#10;                indented (level, index, &quot;{\n&quot;, dumpvisited[value])&#13;&#10;&#13;&#10;                for n,v in pairs(value) do&#13;&#10;                    dumpval (level+1, n, v, limit)&#13;&#10;                end&#13;&#10;&#13;&#10;                indented (level, &quot;}&quot;)&#13;&#10;            end&#13;&#10;        end&#13;&#10;    else&#13;&#10;        if type(value) == 'string' then&#13;&#10;            indented (level, index, string.format(&quot;{\&quot;string\&quot;: %q}&quot;,value), ',')&#13;&#10;        end&#13;&#10;&#13;&#10;        if type(value) == 'userdata' then&#13;&#10;            info = class_info (value)&#13;&#10;            indented (level, index, string.format (&quot;{\&quot;userdata\&quot;: %q}&quot;, info.name) , ',')&#13;&#10;        end&#13;&#10;&#13;&#10;        if type(value) == 'number' then&#13;&#10;            indented (level, index, string.format (&quot;{\&quot;number\&quot;: %q}&quot;,tostring(value)), ',')&#13;&#10;        end&#13;&#10;    end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function dumpvar( value, limit, name )&#13;&#10;&#13;&#10;local function dumpvar( value, limit, name )&#13;&#10;  ctrlrDebugger:write (&quot;\n::start dumpvar\n&quot;)&#13;&#10;  dumpvisited = {}&#13;&#10;  dumpval( 0, name or tostring(value), value, limit )&#13;&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function show(file,line,before,after)&#13;&#10;&#13;&#10;--show +/-N lines of a file around line M&#13;&#10;&#13;&#10;local function show(file,line,before,after)&#13;&#10;&#13;&#10;  line   = tonumber(line   or 1)&#13;&#10;  before = tonumber(before or 10)&#13;&#10;  after  = tonumber(after  or before)&#13;&#10;&#13;&#10;  if not string.find(file,'%.') then file = file..'.lua' end&#13;&#10;&#13;&#10;  local f = io.open(file,'r')&#13;&#10;  if not f then&#13;&#10;    --{{{  try to find the file in the path&#13;&#10;&#13;&#10;    --&#13;&#10;    -- looks for a file in the package path&#13;&#10;    --&#13;&#10;    local path = package.path or LUA_PATH or ''&#13;&#10;    for c in string.gmatch (path, &quot;[&#94;;]+&quot;) do&#13;&#10;      local c = string.gsub (c, &quot;%?%.lua&quot;, file)&#13;&#10;      f = io.open (c,'r')&#13;&#10;      if f then&#13;&#10;        break&#13;&#10;      end&#13;&#10;    end&#13;&#10;&#13;&#10;    --}}}&#13;&#10;    if not f then&#13;&#10;      ctrlrDebugger:write('Cannot find '..file..'\n')&#13;&#10;      return&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  local i = 0&#13;&#10;  for l in f:lines() do&#13;&#10;    i = i + 1&#13;&#10;    if i &gt;= (line-before) then&#13;&#10;      if i &gt; (line+after) then break end&#13;&#10;      if i == line then&#13;&#10;        ctrlrDebugger:write(i..'***\t'..l..'\n')&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(i..'\t'..l..'\n')&#13;&#10;      end&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  f:close()&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function tracestack(l)&#13;&#10;&#13;&#10;local function gi( i )&#13;&#10;  return function() i=i+1 return debug.getinfo(i),i end&#13;&#10;end&#13;&#10;&#13;&#10;local function gl( level, j )&#13;&#10;  return function() j=j+1 return debug.getlocal( level, j ) end&#13;&#10;end&#13;&#10;&#13;&#10;local function gu( func, k )&#13;&#10;  return function() k=k+1 return debug.getupvalue( func, k ) end&#13;&#10;end&#13;&#10;&#13;&#10;local  traceinfo&#13;&#10;&#13;&#10;local function tracestack(l)&#13;&#10;  local l = l + 1                        --NB: +1 to get level relative to caller&#13;&#10;  traceinfo = {}&#13;&#10;  traceinfo.pausemsg = pausemsg&#13;&#10;  for ar,i in gi(l) do&#13;&#10;    table.insert( traceinfo, ar )&#13;&#10;    if ar.what ~= 'C' then&#13;&#10;      local names  = {}&#13;&#10;      local values = {}&#13;&#10;      for n,v in gl(i,0) do&#13;&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#13;&#10;          table.insert( names, n )&#13;&#10;          table.insert( values, v )&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if #names &gt; 0 then&#13;&#10;        ar.lnames  = names&#13;&#10;        ar.lvalues = values&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if ar.func then&#13;&#10;      local names  = {}&#13;&#10;      local values = {}&#13;&#10;      for n,v in gu(ar.func,0) do&#13;&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#13;&#10;          table.insert( names, n )&#13;&#10;          table.insert( values, v )&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if #names &gt; 0 then&#13;&#10;        ar.unames  = names&#13;&#10;        ar.uvalues = values&#13;&#10;      end&#13;&#10;    end&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function trace()&#13;&#10;&#13;&#10;local function trace(set)&#13;&#10;  ctrlrDebugger:write (&quot;\n::start trace\n&quot;)&#13;&#10;  local mark&#13;&#10;  for level,ar in ipairs(traceinfo) do&#13;&#10;    if level == set then&#13;&#10;      mark = '***'&#13;&#10;    else&#13;&#10;      mark = ''&#13;&#10;    end&#13;&#10;    ctrlrDebugger:write('['..level..']'..mark..'\t'..(ar.name or ar.what)..' in '..ar.short_src..':'..ar.currentline..'\n')&#13;&#10;  end&#13;&#10;&#13;&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function info()&#13;&#10;&#13;&#10;local function info()&#13;&#10;    dumpvar( traceinfo, 0, 'traceinfo' )&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  local function set_breakpoint(file, line, once)&#13;&#10;&#13;&#10;local function set_breakpoint(file, line, once)&#13;&#10;  if not breakpoints[line] then&#13;&#10;    breakpoints[line] = {}&#13;&#10;  end&#13;&#10;  if once then&#13;&#10;    breakpoints[line][file] = 1&#13;&#10;  else&#13;&#10;    breakpoints[line][file] = true&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function remove_breakpoint(file, line)&#13;&#10;&#13;&#10;local function remove_breakpoint(file, line)&#13;&#10;  if breakpoints[line] then&#13;&#10;    breakpoints[line][file] = nil&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function has_breakpoint(file, line)&#13;&#10;&#13;&#10;--allow for 'sloppy' file names&#13;&#10;--search for file and all variations walking up its directory hierachy&#13;&#10;--ditto for the file with no extension&#13;&#10;--a breakpoint can be permenant or once only, if once only its removed&#13;&#10;--after detection here, these are used for temporary breakpoints in the&#13;&#10;--debugger loop when executing the 'gotoo' command&#13;&#10;--a breakpoint on line 0 of a file means any line in that file&#13;&#10;&#13;&#10;local function has_breakpoint(file, line)&#13;&#10;  local isLine = breakpoints[line]&#13;&#10;  local isZero = breakpoints[0]&#13;&#10;  if not isLine and not isZero then return false end&#13;&#10;  local noext = string.gsub(file,&quot;(%..-)$&quot;,'',1)&#13;&#10;  if noext == file then noext = nil end&#13;&#10;  while file do&#13;&#10;    if isLine and isLine[file] then&#13;&#10;      if isLine[file] == 1 then isLine[file] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if isZero and isZero[file] then&#13;&#10;      if isZero[file] == 1 then isZero[file] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if IsWindows then&#13;&#10;      file = string.match(file,&quot;[:/\\](.+)$&quot;)&#13;&#10;    else&#13;&#10;      file = string.match(file,&quot;[:/](.+)$&quot;)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  while noext do&#13;&#10;    if isLine and isLine[noext] then&#13;&#10;      if isLine[noext] == 1 then isLine[noext] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if isZero and isZero[noext] then&#13;&#10;      if isZero[noext] == 1 then isZero[noext] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if IsWindows then&#13;&#10;      noext = string.match(noext,&quot;[:/\\](.+)$&quot;)&#13;&#10;    else&#13;&#10;      noext = string.match(noext,&quot;[:/](.+)$&quot;)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  return false&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function capture_vars(ref,level,line)&#13;&#10;&#13;&#10;local function capture_vars(ref,level,line)&#13;&#10;  --get vars, file and line for the given level relative to debug_hook offset by ref&#13;&#10;&#13;&#10;  local lvl = ref + level                --NB: This includes an offset of +1 for the call to here&#13;&#10;&#13;&#10;  --{{{  capture variables&#13;&#10;&#13;&#10;  local ar = debug.getinfo(lvl, &quot;f&quot;)&#13;&#10;  if not ar then return {},'?',0 end&#13;&#10;&#13;&#10;  local vars = {__UPVALUES__={}, __LOCALS__={}}&#13;&#10;  local i&#13;&#10;&#13;&#10;  local func = ar.func&#13;&#10;  if func then&#13;&#10;    i = 1&#13;&#10;    while true do&#13;&#10;      local name, value = debug.getupvalue(func, i)&#13;&#10;      if not name then break end&#13;&#10;      if string.sub(name,1,1) ~= '(' then  --NB: ignoring internal control variables&#13;&#10;        vars[name] = value&#13;&#10;        vars.__UPVALUES__[i] = name&#13;&#10;      end&#13;&#10;      i = i + 1&#13;&#10;    end&#13;&#10;    vars.__ENVIRONMENT__ = getfenv(func)&#13;&#10;  end&#13;&#10;&#13;&#10;  vars.__GLOBALS__ = getfenv(0)&#13;&#10;&#13;&#10;  i = 1&#13;&#10;  while true do&#13;&#10;    local name, value = debug.getlocal(lvl, i)&#13;&#10;    if not name then break end&#13;&#10;    if string.sub(name,1,1) ~= '(' then    --NB: ignoring internal control variables&#13;&#10;      vars[name] = value&#13;&#10;      vars.__LOCALS__[i] = name&#13;&#10;    end&#13;&#10;    i = i + 1&#13;&#10;  end&#13;&#10;&#13;&#10;  vars.__VARSLEVEL__ = level&#13;&#10;&#13;&#10;  if func then&#13;&#10;    --NB: Do not do this until finished filling the vars table&#13;&#10;    setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })&#13;&#10;  end&#13;&#10;&#13;&#10;  --NB: Do not read or write the vars table anymore else the metatable functions will get invoked!&#13;&#10;&#13;&#10;  --}}}&#13;&#10;&#13;&#10;  local file = getinfo(lvl, &quot;source&quot;)&#13;&#10;  if string.find(file, &quot;@&quot;) == 1 then&#13;&#10;    file = string.sub(file, 2)&#13;&#10;  end&#13;&#10;  if IsWindows then file = string.lower(file) end&#13;&#10;&#13;&#10;  if not line then&#13;&#10;    line = getinfo(lvl, &quot;currentline&quot;)&#13;&#10;  end&#13;&#10;&#13;&#10;  return vars,file,line&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function restore_vars(ref,vars)&#13;&#10;&#13;&#10;local function restore_vars(ref,vars)&#13;&#10;&#13;&#10;  if type(vars) ~= 'table' then return end&#13;&#10;&#13;&#10;  local level = vars.__VARSLEVEL__       --NB: This level is relative to debug_hook offset by ref&#13;&#10;  if not level then return end&#13;&#10;&#13;&#10;  level = level + ref                    --NB: This includes an offset of +1 for the call to here&#13;&#10;&#13;&#10;  local i&#13;&#10;  local written_vars = {}&#13;&#10;&#13;&#10;  i = 1&#13;&#10;  while true do&#13;&#10;    local name, value = debug.getlocal(level, i)&#13;&#10;    if not name then break end&#13;&#10;    if vars[name] and string.sub(name,1,1) ~= '(' then     --NB: ignoring internal control variables&#13;&#10;      debug.setlocal(level, i, vars[name])&#13;&#10;      written_vars[name] = true&#13;&#10;    end&#13;&#10;    i = i + 1&#13;&#10;  end&#13;&#10;&#13;&#10;  local ar = debug.getinfo(level, &quot;f&quot;)&#13;&#10;  if not ar then return end&#13;&#10;&#13;&#10;  local func = ar.func&#13;&#10;  if func then&#13;&#10;&#13;&#10;    i = 1&#13;&#10;    while true do&#13;&#10;      local name, value = debug.getupvalue(func, i)&#13;&#10;      if not name then break end&#13;&#10;      if vars[name] and string.sub(name,1,1) ~= '(' then   --NB: ignoring internal control variables&#13;&#10;        if not written_vars[name] then&#13;&#10;          debug.setupvalue(func, i, vars[name])&#13;&#10;        end&#13;&#10;        written_vars[name] = true&#13;&#10;      end&#13;&#10;      i = i + 1&#13;&#10;    end&#13;&#10;&#13;&#10;  end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function trace_event(event, line, level)&#13;&#10;&#13;&#10;local function print_trace(level,depth,event,file,line,name)&#13;&#10;&#13;&#10;  --NB: level here is relative to the caller of trace_event, so offset by 2 to get to there&#13;&#10;  level = level + 2&#13;&#10;&#13;&#10;  local file = file or getinfo(level,'short_src')&#13;&#10;  local line = line or getinfo(level,'currentline')&#13;&#10;  local name = name or getinfo(level,'name')&#13;&#10;&#13;&#10;  local prefix = ''&#13;&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#13;&#10;&#13;&#10;  ctrlrDebugger:write(prefix..&#13;&#10;           string.format('%08.2f:%02i.',os.clock(),depth)..&#13;&#10;           string.rep('.',depth%32)..&#13;&#10;           (file or '')..' ('..(line or '')..') '..&#13;&#10;           (name or '')..&#13;&#10;           ' ('..event..')\n')&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;local function trace_event(event, line, level)&#13;&#10;&#13;&#10;  if event == 'return' and trace_returns then&#13;&#10;    --note the line info for later&#13;&#10;    ret_file = getinfo(level+1,'short_src')&#13;&#10;    ret_line = getinfo(level+1,'currentline')&#13;&#10;    ret_name = getinfo(level+1,'name')&#13;&#10;  end&#13;&#10;&#13;&#10;  if event ~= 'line' then return end&#13;&#10;&#13;&#10;  local slevel = stack_level[current_thread]&#13;&#10;  local tlevel = trace_level[current_thread]&#13;&#10;&#13;&#10;  if trace_calls and slevel &gt; tlevel then&#13;&#10;    --we are now in the function called, so look back 1 level further to find the calling file and line&#13;&#10;    print_trace(level+1,slevel-1,'c',nil,nil,getinfo(level+1,'name'))&#13;&#10;  end&#13;&#10;&#13;&#10;  if trace_returns and slevel &lt; tlevel then&#13;&#10;    print_trace(level,slevel,'r',ret_file,ret_line,ret_name)&#13;&#10;  end&#13;&#10;&#13;&#10;  if trace_lines then&#13;&#10;    print_trace(level,slevel,'l')&#13;&#10;  end&#13;&#10;&#13;&#10;  trace_level[current_thread] = stack_level[current_thread]&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function report(ev, vars, file, line, idx_watch)&#13;&#10;&#13;&#10;local function report(ev, vars, file, line, idx_watch)&#13;&#10;  local vars = vars or {}&#13;&#10;  local file = file or '?'&#13;&#10;  local line = line or 0&#13;&#10;  local prefix = ''&#13;&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#13;&#10;  if ev == events.STEP then&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')\n')&#13;&#10;  elseif ev == events.BREAK then&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..') (breakpoint)\n')&#13;&#10;  elseif ev == events.WATCH then&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')'..&quot; (watch expression &quot;..idx_watch.. &quot;: [&quot;..watches[idx_watch].exp..&quot;])\n&quot;)&#13;&#10;  elseif ev == events.SET then&#13;&#10;    --do nothing&#13;&#10;  else&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Error in application: &quot;..file..&quot; line &quot;..line..&quot;\n&quot;)&#13;&#10;  end&#13;&#10;  if ev ~= events.SET then&#13;&#10;    if pausemsg and pausemsg ~= '' then ctrlrDebugger:write('Message: '..pausemsg..'\n') end&#13;&#10;    pausemsg = ''&#13;&#10;  end&#13;&#10;  return vars, file, line&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  local function debugger_loop(ev, vars, file, line, idx_watch)&#13;&#10;&#13;&#10;local function debugger_loop(ev, vars, file, line, idx_watch)&#13;&#10;&#13;&#10;  local eval_env  = vars or {}&#13;&#10;  local breakfile = file or '?'&#13;&#10;  local breakline = line or 0&#13;&#10;&#13;&#10;  local command, args&#13;&#10;&#13;&#10;  --{{{  local function getargs(spec)&#13;&#10;&#13;&#10;  --get command arguments according to the given spec from the args string&#13;&#10;  --the spec has a single character for each argument, arguments are separated&#13;&#10;  --by white space, the spec characters can be one of:&#13;&#10;  -- F for a filename    (defaults to breakfile if - given in args)&#13;&#10;  -- L for a line number (defaults to breakline if - given in args)&#13;&#10;  -- N for a number&#13;&#10;  -- V for a variable name&#13;&#10;  -- S for a string&#13;&#10;&#13;&#10;  local function getargs(spec)&#13;&#10;    local res={}&#13;&#10;    local char,arg&#13;&#10;    local ptr=1&#13;&#10;    for i=1,string.len(spec) do&#13;&#10;      char = string.sub(spec,i,i)&#13;&#10;      if     char == 'F' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '-' end&#13;&#10;        if arg == '-' then arg = breakfile end&#13;&#10;      elseif char == 'L' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '-' end&#13;&#10;        if arg == '-' then arg = breakline end&#13;&#10;        arg = tonumber(arg) or 0&#13;&#10;      elseif char == 'N' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '0' end&#13;&#10;        arg = tonumber(arg) or 0&#13;&#10;      elseif char == 'V' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '' end&#13;&#10;      elseif char == 'S' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '' end&#13;&#10;      else&#13;&#10;        arg = ''&#13;&#10;      end&#13;&#10;      table.insert(res,arg or '')&#13;&#10;    end&#13;&#10;    return unpack(res)&#13;&#10;  end&#13;&#10;&#13;&#10;  --}}}&#13;&#10;&#13;&#10;  while true do&#13;&#10;    -- io.write(&quot;[DEBUG]&gt; &quot;)&#13;&#10;    ctrlrDebugger:write(&quot;[DEBUG]&gt; &quot;)&#13;&#10;    -- local line = io.read(&quot;*line&quot;)&#13;&#10;    local line = ctrlrDebugger:read()&#13;&#10;    if line == nil then ctrlrDebugger:write('\n'); line = 'exit' end&#13;&#10;&#13;&#10;    if string.find(line, &quot;&#94;[a-z]+&quot;) then&#13;&#10;      command = string.sub(line, string.find(line, &quot;&#94;[a-z]+&quot;))&#13;&#10;      args    = string.gsub(line,&quot;&#94;[a-z]+%s*&quot;,'',1)            --strip command off line&#13;&#10;    else&#13;&#10;      command = ''&#13;&#10;    end&#13;&#10;&#13;&#10;    if command == &quot;setb&quot; then&#13;&#10;      --{{{  set breakpoint&#13;&#10;&#13;&#10;      local line, filename  = getargs('LF')&#13;&#10;      if filename ~= '' and line ~= '' then&#13;&#10;        set_breakpoint(filename,line)&#13;&#10;        ctrlrDebugger:write(&quot;Breakpoint set in file &quot;..filename..' line '..line..'\n')&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delb&quot; then&#13;&#10;      --{{{  delete breakpoint&#13;&#10;&#13;&#10;      local line, filename = getargs('LF')&#13;&#10;      if filename ~= '' and line ~= '' then&#13;&#10;        remove_breakpoint(filename, line)&#13;&#10;        ctrlrDebugger:write(&quot;Breakpoint deleted from file &quot;..filename..' line '..line..&quot;\n&quot;)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delallb&quot; then&#13;&#10;      --{{{  delete all breakpoints&#13;&#10;      breakpoints = {}&#13;&#10;      ctrlrDebugger:write('All breakpoints deleted\n')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;listb&quot; then&#13;&#10;      --{{{  list breakpoints&#13;&#10;      for i, v in pairs(breakpoints) do&#13;&#10;        for ii, vv in pairs(v) do&#13;&#10;          ctrlrDebugger:write(&quot;Break at: &quot;..i..' in '..ii..'\n')&#13;&#10;        end&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;setw&quot; then&#13;&#10;      --{{{  set watch expression&#13;&#10;&#13;&#10;      if args and args ~= '' then&#13;&#10;        local func = loadstring(&quot;return(&quot; .. args .. &quot;)&quot;)&#13;&#10;        local newidx = #watches + 1&#13;&#10;        watches[newidx] = {func = func, exp = args}&#13;&#10;        ctrlrDebugger:write(&quot;Set watch exp no. &quot; .. newidx..'\n')&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delw&quot; then&#13;&#10;      --{{{  delete watch expression&#13;&#10;&#13;&#10;      local index = tonumber(args)&#13;&#10;      if index then&#13;&#10;        watches[index] = nil&#13;&#10;        ctrlrDebugger:write(&quot;Watch expression deleted\n&quot;)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delallw&quot; then&#13;&#10;      --{{{  delete all watch expressions&#13;&#10;      watches = {}&#13;&#10;      ctrlrDebugger:write('All watch expressions deleted\n')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;listw&quot; then&#13;&#10;      --{{{  list watch expressions&#13;&#10;      for i, v in pairs(watches) do&#13;&#10;        ctrlrDebugger:write(&quot;Watch exp. &quot; .. i .. &quot;: &quot; .. v.exp..'\n')&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;run&quot; then&#13;&#10;      --{{{  run until breakpoint&#13;&#10;      step_into = false&#13;&#10;      step_over = false&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;step&quot; then&#13;&#10;      --{{{  step N lines (into functions)&#13;&#10;      local N = tonumber(args) or 1&#13;&#10;      step_over  = false&#13;&#10;      step_into  = true&#13;&#10;      step_lines = tonumber(N or 1)&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;over&quot; then&#13;&#10;      --{{{  step N lines (over functions)&#13;&#10;      local N = tonumber(args) or 1&#13;&#10;      step_into  = false&#13;&#10;      step_over  = true&#13;&#10;      step_lines = tonumber(N or 1)&#13;&#10;      step_level[current_thread] = stack_level[current_thread]&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;out&quot; then&#13;&#10;      --{{{  step N lines (out of functions)&#13;&#10;      local N = tonumber(args) or 1&#13;&#10;      step_into  = false&#13;&#10;      step_over  = true&#13;&#10;      step_lines = 1&#13;&#10;      step_level[current_thread] = stack_level[current_thread] - tonumber(N or 1)&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;gotoo&quot; then&#13;&#10;      --{{{  step until reach line&#13;&#10;      local line, filename = getargs('LF')&#13;&#10;      if line ~= '' then&#13;&#10;        step_over  = false&#13;&#10;        step_into  = false&#13;&#10;        if has_breakpoint(filename,line) then&#13;&#10;          return 'cont'&#13;&#10;        else&#13;&#10;          set_breakpoint(filename,line,true)&#13;&#10;          return 'cont'&#13;&#10;        end&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;set&quot; then&#13;&#10;      --{{{  set/show context level&#13;&#10;      local level = args&#13;&#10;      if level and level == '' then level = nil end&#13;&#10;      if level then return level end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;vars&quot; then&#13;&#10;      --{{{  list context variables&#13;&#10;      local depth = args&#13;&#10;      if depth and depth == '' then depth = nil end&#13;&#10;      depth = tonumber(depth) or 1&#13;&#10;      dumpvar(eval_env, depth+1, 'variables')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;glob&quot; then&#13;&#10;      --{{{  list global variables&#13;&#10;      local depth = args&#13;&#10;      if depth and depth == '' then depth = nil end&#13;&#10;      depth = tonumber(depth) or 1&#13;&#10;      dumpvar(eval_env.__GLOBALS__,depth+1,'globals')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;fenv&quot; then&#13;&#10;      --{{{  list function environment variables&#13;&#10;      local depth = args&#13;&#10;      if depth and depth == '' then depth = nil end&#13;&#10;      depth = tonumber(depth) or 1&#13;&#10;      dumpvar(eval_env.__ENVIRONMENT__,depth+1,'environment')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;ups&quot; then&#13;&#10;      --{{{  list upvalue names&#13;&#10;      dumpvar(eval_env.__UPVALUES__,2,'upvalues')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;locs&quot; then&#13;&#10;      --{{{  list locals names&#13;&#10;      dumpvar(eval_env.__LOCALS__,2,'upvalues')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;what&quot; then&#13;&#10;      --{{{  show where a function is defined&#13;&#10;      if args and args ~= '' then&#13;&#10;        local v = eval_env&#13;&#10;        local n = nil&#13;&#10;        for w in string.gmatch(args,&quot;[%w_]+&quot;) do&#13;&#10;          v = v[w]&#13;&#10;          if n then n = n..'.'..w else n = w end&#13;&#10;          if not v then break end&#13;&#10;        end&#13;&#10;        if type(v) == 'function' then&#13;&#10;          local def = debug.getinfo(v,'S')&#13;&#10;          if def then&#13;&#10;            ctrlrDebugger:write(def.what..' in '..def.short_src..' '..def.linedefined..'..'..def.lastlinedefined..'\n')&#13;&#10;          else&#13;&#10;            ctrlrDebugger:write('Cannot get info for '..v..'\n')&#13;&#10;          end&#13;&#10;        else&#13;&#10;          ctrlrDebugger:write(v..' is not a function\n')&#13;&#10;        end&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;dump&quot; then&#13;&#10;      --{{{  dump a variable&#13;&#10;      local name, depth = getargs('VN')&#13;&#10;      if name ~= '' then&#13;&#10;        if depth == '' or depth == 0 then depth = nil end&#13;&#10;        depth = tonumber(depth or 1)&#13;&#10;        local v = eval_env&#13;&#10;        local n = nil&#13;&#10;        for w in string.gmatch(name,&quot;[&#94;%.]+&quot;) do     --get everything between dots&#13;&#10;          if tonumber(w) then&#13;&#10;            v = v[tonumber(w)]&#13;&#10;          else&#13;&#10;            v = v[w]&#13;&#10;          end&#13;&#10;          if n then n = n..'.'..w else n = w end&#13;&#10;          if not v then break end&#13;&#10;        end&#13;&#10;        dumpvar(v,depth+1,n)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;show&quot; then&#13;&#10;      --{{{  show file around a line or the current breakpoint&#13;&#10;&#13;&#10;      local line, file, before, after = getargs('LFNN')&#13;&#10;      if before == 0 then before = 10     end&#13;&#10;      if after  == 0 then after  = before end&#13;&#10;&#13;&#10;      if file ~= '' and file ~= &quot;=stdin&quot; then&#13;&#10;        show(file,line,before,after)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write('Nothing to show\n')&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;poff&quot; then&#13;&#10;      --{{{  turn pause command off&#13;&#10;      pause_off = true&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;pon&quot; then&#13;&#10;      --{{{  turn pause command on&#13;&#10;      pause_off = false&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;tron&quot; then&#13;&#10;      --{{{  turn tracing on/off&#13;&#10;      local option = getargs('S')&#13;&#10;      trace_calls   = false&#13;&#10;      trace_returns = false&#13;&#10;      trace_lines   = false&#13;&#10;      if string.find(option,'c') then trace_calls   = true end&#13;&#10;      if string.find(option,'r') then trace_returns = true end&#13;&#10;      if string.find(option,'l') then trace_lines   = true end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;trace&quot; then&#13;&#10;      --{{{  dump a stack trace&#13;&#10;      trace(eval_env.__VARSLEVEL__)&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;info&quot; then&#13;&#10;      --{{{  dump all debug info captured&#13;&#10;      info()&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;pause&quot; then&#13;&#10;      --{{{  not allowed in here&#13;&#10;      ctrlrDebugger:write('pause() should only be used in the script you are debugging\n')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;help&quot; then&#13;&#10;      --{{{  help&#13;&#10;      local command = getargs('S')&#13;&#10;      if command ~= '' and hints[command] then&#13;&#10;        ctrlrDebugger:write(hints[command]..'\n')&#13;&#10;      else&#13;&#10;        for _,v in pairs(hints) do&#13;&#10;          local _,_,h = string.find(v,&quot;(.+)|&quot;)&#13;&#10;          ctrlrDebugger:write(h..'\n')&#13;&#10;        end&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;exit&quot; then&#13;&#10;      --{{{  exit debugger&#13;&#10;      return 'stop'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif line ~= '' then&#13;&#10;      --{{{  just execute whatever it is in the current context&#13;&#10;&#13;&#10;      --map line starting with &quot;=...&quot; to &quot;return ...&quot;&#13;&#10;      if string.sub(line,1,1) == '=' then line = string.gsub(line,'=','return ',1) end&#13;&#10;&#13;&#10;      local ok, func = pcall(loadstring,line)&#13;&#10;      if func == nil then                             --Michael.Bringmann@lsi.com&#13;&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..line..'\n')&#13;&#10;      elseif not ok then&#13;&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..func..'\n')&#13;&#10;      else&#13;&#10;        setfenv(func, eval_env)&#13;&#10;        local res = {pcall(func)}&#13;&#10;        if res[1] then&#13;&#10;          if res[2] then&#13;&#10;            table.remove(res,1)&#13;&#10;            for _,v in ipairs(res) do&#13;&#10;              ctrlrDebugger:write(tostring(v))&#13;&#10;              ctrlrDebugger:write('\t')&#13;&#10;            end&#13;&#10;            ctrlrDebugger:write('\n')&#13;&#10;          end&#13;&#10;          --update in the context&#13;&#10;          return 0&#13;&#10;        else&#13;&#10;          ctrlrDebugger:write(&quot;Run error: &quot;..res[2]..'\n')&#13;&#10;        end&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function debug_hook(event, line, level, thread)&#13;&#10;&#13;&#10;local function debug_hook(event, line, level, thread)&#13;&#10;  if not started then debug.sethook(); coro_debugger = nil; return end&#13;&#10;  current_thread = thread or 'main'&#13;&#10;  local level = level or 2&#13;&#10;  trace_event(event,line,level)&#13;&#10;  if event == &quot;call&quot; then&#13;&#10;    stack_level[current_thread] = stack_level[current_thread] + 1&#13;&#10;  elseif event == &quot;return&quot; then&#13;&#10;    stack_level[current_thread] = stack_level[current_thread] - 1&#13;&#10;    if stack_level[current_thread] &lt; 0 then stack_level[current_thread] = 0 end&#13;&#10;  else&#13;&#10;    local vars,file,line = capture_vars(level,1,line)&#13;&#10;    local stop, ev, idx = false, events.STEP, 0&#13;&#10;    while true do&#13;&#10;      for index, value in pairs(watches) do&#13;&#10;        setfenv(value.func, vars)&#13;&#10;        local status, res = pcall(value.func)&#13;&#10;        if status and res then&#13;&#10;          ev, idx = events.WATCH, index&#13;&#10;          stop = true&#13;&#10;          break&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if stop then break end&#13;&#10;      if (step_into)&#13;&#10;      or (step_over and (stack_level[current_thread] &lt;= step_level[current_thread] or stack_level[current_thread] == 0)) then&#13;&#10;        step_lines = step_lines - 1&#13;&#10;        if step_lines &lt; 1 then&#13;&#10;          ev, idx = events.STEP, 0&#13;&#10;          break&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if has_breakpoint(file, line) then&#13;&#10;        ev, idx = events.BREAK, 0&#13;&#10;        break&#13;&#10;      end&#13;&#10;      return&#13;&#10;    end&#13;&#10;    if not coro_debugger then&#13;&#10;      ctrlrDebugger:write(&quot;Lua Debugger\n&quot;)&#13;&#10;      vars, file, line = report(ev, vars, file, line, idx)&#13;&#10;      ctrlrDebugger:write(&quot;Type 'help' for commands\n&quot;)&#13;&#10;      coro_debugger = true&#13;&#10;    else&#13;&#10;      vars, file, line = report(ev, vars, file, line, idx)&#13;&#10;    end&#13;&#10;    tracestack(level)&#13;&#10;    local last_next = 1&#13;&#10;    local next = 'ask'&#13;&#10;    local silent = false&#13;&#10;    while true do&#13;&#10;      if next == 'ask' then&#13;&#10;        next = debugger_loop(ev, vars, file, line, idx)&#13;&#10;      elseif next == 'cont' then&#13;&#10;        return&#13;&#10;      elseif next == 'stop' then&#13;&#10;        started = false&#13;&#10;        debug.sethook()&#13;&#10;        coro_debugger = nil&#13;&#10;        return&#13;&#10;      elseif tonumber(next) then --get vars for given level or last level&#13;&#10;        next = tonumber(next)&#13;&#10;        if next == 0 then silent = true; next = last_next else silent = false end&#13;&#10;        last_next = next&#13;&#10;        restore_vars(level,vars)&#13;&#10;        vars, file, line = capture_vars(level,next)&#13;&#10;        if not silent then&#13;&#10;          if vars and vars.__VARSLEVEL__ then&#13;&#10;            ctrlrDebugger:write('Level: '..vars.__VARSLEVEL__..'\n')&#13;&#10;          else&#13;&#10;            ctrlrDebugger:write('No level set\n')&#13;&#10;          end&#13;&#10;        end&#13;&#10;        ev = events.SET&#13;&#10;        next = 'ask'&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write('Unknown command from debugger_loop: '..tostring(next)..'\n')&#13;&#10;        ctrlrDebugger:write('Stopping debugger\n')&#13;&#10;        next = 'stop'&#13;&#10;      end&#13;&#10;    end&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  coroutine.create&#13;&#10;&#13;&#10;--This function overrides the built-in for the purposes of propagating&#13;&#10;--the debug hook settings from the creator into the created coroutine.&#13;&#10;&#13;&#10;_G.coroutine.create = function(f)&#13;&#10;  local thread&#13;&#10;  local hook, mask, count = debug.gethook()&#13;&#10;  if hook then&#13;&#10;    local function thread_hook(event,line)&#13;&#10;      hook(event,line,3,thread)&#13;&#10;    end&#13;&#10;    thread = cocreate(function(...)&#13;&#10;                        stack_level[thread] = 0&#13;&#10;                        trace_level[thread] = 0&#13;&#10;                        step_level [thread] = 0&#13;&#10;                        debug.sethook(thread_hook,mask,count)&#13;&#10;                        return f(...)&#13;&#10;                      end)&#13;&#10;    return thread&#13;&#10;  else&#13;&#10;    return cocreate(f)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  coroutine.wrap&#13;&#10;&#13;&#10;--This function overrides the built-in for the purposes of propagating&#13;&#10;--the debug hook settings from the creator into the created coroutine.&#13;&#10;&#13;&#10;_G.coroutine.wrap = function(f)&#13;&#10;  local thread&#13;&#10;  local hook, mask, count = debug.gethook()&#13;&#10;  if hook then&#13;&#10;    local function thread_hook(event,line)&#13;&#10;      hook(event,line,3,thread)&#13;&#10;    end&#13;&#10;    thread = cowrap(function(...)&#13;&#10;                      stack_level[thread] = 0&#13;&#10;                      trace_level[thread] = 0&#13;&#10;                      step_level [thread] = 0&#13;&#10;                      debug.sethook(thread_hook,mask,count)&#13;&#10;                      return f(...)&#13;&#10;                    end)&#13;&#10;    return thread&#13;&#10;  else&#13;&#10;    return cowrap(f)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  function pause(x,l,f)&#13;&#10;&#13;&#10;--&#13;&#10;-- Starts/resumes a debug session&#13;&#10;--&#13;&#10;&#13;&#10;function pause(x,l,f)&#13;&#10;  if not f and pause_off then return end       --being told to ignore pauses&#13;&#10;  pausemsg = x or 'pause'&#13;&#10;  local lines&#13;&#10;  local src = getinfo(2,'short_src')&#13;&#10;  if l then&#13;&#10;    lines = l   --being told when to stop&#13;&#10;  elseif src == &quot;stdin&quot; then&#13;&#10;    lines = 1   --if in a console session, stop now&#13;&#10;  else&#13;&#10;    lines = 2   --if in a script, stop when get out of pause()&#13;&#10;  end&#13;&#10;  if started then&#13;&#10;    --we'll stop now 'cos the existing debug hook will grab us&#13;&#10;    step_lines = lines&#13;&#10;    step_into  = true&#13;&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --reset it in case some external agent fiddled with it&#13;&#10;  else&#13;&#10;    --set to stop when get out of pause()&#13;&#10;    trace_level[current_thread] = 0&#13;&#10;    step_level [current_thread] = 0&#13;&#10;    stack_level[current_thread] = 1&#13;&#10;    step_lines = lines&#13;&#10;    step_into  = true&#13;&#10;    started    = true&#13;&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --NB: this will cause an immediate entry to the debugger_loop&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  function dump(v,depth)&#13;&#10;&#13;&#10;--shows the value of the given variable, only really useful&#13;&#10;--when the variable is a table&#13;&#10;--see dump debug command hints for full semantics&#13;&#10;&#13;&#10;function dump(v,depth)&#13;&#10;  dumpvar(v,(depth or 1)+1,tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  function debug.traceback(x)&#13;&#10;&#13;&#10;local _traceback = debug.traceback       --note original function&#13;&#10;&#13;&#10;--override standard function&#13;&#10;debug.traceback = function(x)&#13;&#10;  local assertmsg = _traceback(x)        --do original function&#13;&#10;  pause(x)                               --let user have a look at stuff&#13;&#10;  return assertmsg                       --carry on&#13;&#10;end&#13;&#10;&#13;&#10;_TRACEBACK = debug.traceback             --Lua 5.0 function&#13;&#10;&#13;&#10;--}}}"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000005"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="inspect" luaMethodCode="function getInspect()&#13;&#10;local inspect ={&#13;&#10;  _VERSION = 'inspect.lua 3.0.0',&#13;&#10;  _URL     = 'http://github.com/kikito/inspect.lua',&#13;&#10;  _DESCRIPTION = 'human-readable representations of tables',&#13;&#10;  _LICENSE = [[&#13;&#10;    MIT LICENSE&#13;&#10;&#13;&#10;    Copyright (c) 2013 Enrique Garc&#237;a Cota&#13;&#10;&#13;&#10;    Permission is hereby granted, free of charge, to any person obtaining a&#13;&#10;    copy of this software and associated documentation files (the&#13;&#10;    &quot;Software&quot;), to deal in the Software without restriction, including&#13;&#10;    without limitation the rights to use, copy, modify, merge, publish,&#13;&#10;    distribute, sublicense, and/or sell copies of the Software, and to&#13;&#10;    permit persons to whom the Software is furnished to do so, subject to&#13;&#10;    the following conditions:&#13;&#10;&#13;&#10;    The above copyright notice and this permission notice shall be included&#13;&#10;    in all copies or substantial portions of the Software.&#13;&#10;&#13;&#10;    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&#13;&#10;    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&#13;&#10;    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.&#13;&#10;    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY&#13;&#10;    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,&#13;&#10;    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE&#13;&#10;    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#13;&#10;  ]]&#13;&#10;}&#13;&#10;&#13;&#10;inspect.KEY       = setmetatable({}, {__tostring = function() return 'inspect.KEY' end})&#13;&#10;inspect.METATABLE = setmetatable({}, {__tostring = function() return 'inspect.METATABLE' end})&#13;&#10;&#13;&#10;-- Apostrophizes the string if it has quotes, but not aphostrophes&#13;&#10;-- Otherwise, it returns a regular quoted string&#13;&#10;local function smartQuote(str)&#13;&#10;  if str:match('&quot;') and not str:match(&quot;'&quot;) then&#13;&#10;    return &quot;'&quot; .. str .. &quot;'&quot;&#13;&#10;  end&#13;&#10;  return '&quot;' .. str:gsub('&quot;', '\\&quot;') .. '&quot;'&#13;&#10;end&#13;&#10;&#13;&#10;local controlCharsTranslation = {&#13;&#10;  [&quot;\a&quot;] = &quot;\\a&quot;,  [&quot;\b&quot;] = &quot;\\b&quot;, [&quot;\f&quot;] = &quot;\\f&quot;,  [&quot;\n&quot;] = &quot;\\n&quot;,&#13;&#10;  [&quot;\r&quot;] = &quot;\\r&quot;,  [&quot;\t&quot;] = &quot;\\t&quot;, [&quot;\v&quot;] = &quot;\\v&quot;&#13;&#10;}&#13;&#10;&#13;&#10;local function escape(str)&#13;&#10;  local result = str:gsub(&quot;\\&quot;, &quot;\\\\&quot;):gsub(&quot;(%c)&quot;, controlCharsTranslation)&#13;&#10;  return result&#13;&#10;end&#13;&#10;&#13;&#10;local function isIdentifier(str)&#13;&#10;  return type(str) == 'string' and str:match( &quot;&#94;[_%a][_%a%d]*$&quot; )&#13;&#10;end&#13;&#10;&#13;&#10;local function isSequenceKey(k, length)&#13;&#10;  return type(k) == 'number'&#13;&#10;     and 1 &lt;= k&#13;&#10;     and k &lt;= length&#13;&#10;     and math.floor(k) == k&#13;&#10;end&#13;&#10;&#13;&#10;local defaultTypeOrders = {&#13;&#10;  ['number']   = 1, ['boolean']  = 2, ['string'] = 3, ['table'] = 4,&#13;&#10;  ['function'] = 5, ['userdata'] = 6, ['thread'] = 7&#13;&#10;}&#13;&#10;&#13;&#10;local function sortKeys(a, b)&#13;&#10;  local ta, tb = type(a), type(b)&#13;&#10;&#13;&#10;  -- strings and numbers are sorted numerically/alphabetically&#13;&#10;  if ta == tb and (ta == 'string' or ta == 'number') then return a &lt; b end&#13;&#10;&#13;&#10;  local dta, dtb = defaultTypeOrders[ta], defaultTypeOrders[tb]&#13;&#10;  -- Two default types are compared according to the defaultTypeOrders table&#13;&#10;  if dta and dtb then return defaultTypeOrders[ta] &lt; defaultTypeOrders[tb]&#13;&#10;  elseif dta     then return true  -- default types before custom ones&#13;&#10;  elseif dtb     then return false -- custom types after default ones&#13;&#10;  end&#13;&#10;&#13;&#10;  -- custom types are sorted out alphabetically&#13;&#10;  return ta &lt; tb&#13;&#10;end&#13;&#10;&#13;&#10;local function getNonSequentialKeys(t)&#13;&#10;  local keys, length = {}, #t&#13;&#10;  for k,_ in pairs(t) do&#13;&#10;    if not isSequenceKey(k, length) then table.insert(keys, k) end&#13;&#10;  end&#13;&#10;  table.sort(keys, sortKeys)&#13;&#10;  return keys&#13;&#10;end&#13;&#10;&#13;&#10;local function getToStringResultSafely(t, mt)&#13;&#10;  local __tostring = type(mt) == 'table' and rawget(mt, '__tostring')&#13;&#10;  local str, ok&#13;&#10;  if type(__tostring) == 'function' then&#13;&#10;    ok, str = pcall(__tostring, t)&#13;&#10;    str = ok and str or 'error: ' .. tostring(str)&#13;&#10;  end&#13;&#10;  if type(str) == 'string' and #str &gt; 0 then return str end&#13;&#10;end&#13;&#10;&#13;&#10;local maxIdsMetaTable = {&#13;&#10;  __index = function(self, typeName)&#13;&#10;    rawset(self, typeName, 0)&#13;&#10;    return 0&#13;&#10;  end&#13;&#10;}&#13;&#10;&#13;&#10;local idsMetaTable = {&#13;&#10;  __index = function (self, typeName)&#13;&#10;    local col = setmetatable({}, {__mode = &quot;kv&quot;})&#13;&#10;    rawset(self, typeName, col)&#13;&#10;    return col&#13;&#10;  end&#13;&#10;}&#13;&#10;&#13;&#10;local function countTableAppearances(t, tableAppearances)&#13;&#10;  tableAppearances = tableAppearances or setmetatable({}, {__mode = &quot;k&quot;})&#13;&#10;&#13;&#10;  if type(t) == 'table' then&#13;&#10;    if not tableAppearances[t] then&#13;&#10;      tableAppearances[t] = 1&#13;&#10;      for k,v in pairs(t) do&#13;&#10;        countTableAppearances(k, tableAppearances)&#13;&#10;        countTableAppearances(v, tableAppearances)&#13;&#10;      end&#13;&#10;      countTableAppearances(getmetatable(t), tableAppearances)&#13;&#10;    else&#13;&#10;      tableAppearances[t] = tableAppearances[t] + 1&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  return tableAppearances&#13;&#10;end&#13;&#10;&#13;&#10;local copySequence = function(s)&#13;&#10;  local copy, len = {}, #s&#13;&#10;  for i=1, len do copy[i] = s[i] end&#13;&#10;  return copy, len&#13;&#10;end&#13;&#10;&#13;&#10;local function makePath(path, ...)&#13;&#10;  local keys = {...}&#13;&#10;  local newPath, len = copySequence(path)&#13;&#10;  for i=1, #keys do&#13;&#10;    newPath[len + i] = keys[i]&#13;&#10;  end&#13;&#10;  return newPath&#13;&#10;end&#13;&#10;&#13;&#10;local function processRecursive(process, item, path)&#13;&#10;  if item == nil then return nil end&#13;&#10;&#13;&#10;  local processed = process(item, path)&#13;&#10;  if type(processed) == 'table' then&#13;&#10;    local processedCopy = {}&#13;&#10;    local processedKey&#13;&#10;&#13;&#10;    for k,v in pairs(processed) do&#13;&#10;      processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY))&#13;&#10;      if processedKey ~= nil then&#13;&#10;        processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey))&#13;&#10;      end&#13;&#10;    end&#13;&#10;&#13;&#10;    local mt  = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE))&#13;&#10;    setmetatable(processedCopy, mt)&#13;&#10;    processed = processedCopy&#13;&#10;  end&#13;&#10;  return processed&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;-------------------------------------------------------------------&#13;&#10;&#13;&#10;local Inspector = {}&#13;&#10;local Inspector_mt = {__index = Inspector}&#13;&#10;&#13;&#10;function Inspector:puts(...)&#13;&#10;  local args   = {...}&#13;&#10;  local buffer = self.buffer&#13;&#10;  local len    = #buffer&#13;&#10;  for i=1, #args do&#13;&#10;    len = len + 1&#13;&#10;    buffer[len] = tostring(args[i])&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:down(f)&#13;&#10;  self.level = self.level + 1&#13;&#10;  f()&#13;&#10;  self.level = self.level - 1&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:tabify()&#13;&#10;  self:puts(self.newline, string.rep(self.indent, self.level))&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:alreadyVisited(v)&#13;&#10;  return self.ids[type(v)][v] ~= nil&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:getId(v)&#13;&#10;  local tv = type(v)&#13;&#10;  local id = self.ids[tv][v]&#13;&#10;  if not id then&#13;&#10;    id              = self.maxIds[tv] + 1&#13;&#10;    self.maxIds[tv] = id&#13;&#10;    self.ids[tv][v] = id&#13;&#10;  end&#13;&#10;  return id&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:putKey(k)&#13;&#10;  if isIdentifier(k) then return self:puts(k) end&#13;&#10;  self:puts(&quot;[&quot;)&#13;&#10;  self:putValue(k)&#13;&#10;  self:puts(&quot;]&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:putTable(t)&#13;&#10;  if t == inspect.KEY or t == inspect.METATABLE then&#13;&#10;    self:puts(tostring(t))&#13;&#10;  elseif self:alreadyVisited(t) then&#13;&#10;    self:puts('&lt;table ', self:getId(t), '&gt;')&#13;&#10;  elseif self.level &gt;= self.depth then&#13;&#10;    self:puts('{...}')&#13;&#10;  else&#13;&#10;    if self.tableAppearances[t] &gt; 1 then self:puts('&lt;', self:getId(t), '&gt;') end&#13;&#10;&#13;&#10;    local nonSequentialKeys = getNonSequentialKeys(t)&#13;&#10;    local length            = #t&#13;&#10;    local mt                = getmetatable(t)&#13;&#10;    local toStringResult    = getToStringResultSafely(t, mt)&#13;&#10;&#13;&#10;    self:puts('{')&#13;&#10;    self:down(function()&#13;&#10;      if toStringResult then&#13;&#10;        self:puts(' -- ', escape(toStringResult))&#13;&#10;        if length &gt;= 1 then self:tabify() end&#13;&#10;      end&#13;&#10;&#13;&#10;      local count = 0&#13;&#10;      for i=1, length do&#13;&#10;        if count &gt; 0 then self:puts(',') end&#13;&#10;        self:puts(' ')&#13;&#10;        self:putValue(t[i])&#13;&#10;        count = count + 1&#13;&#10;      end&#13;&#10;&#13;&#10;      for _,k in ipairs(nonSequentialKeys) do&#13;&#10;        if count &gt; 0 then self:puts(',') end&#13;&#10;        self:tabify()&#13;&#10;        self:putKey(k)&#13;&#10;        self:puts(' = ')&#13;&#10;        self:putValue(t[k])&#13;&#10;        count = count + 1&#13;&#10;      end&#13;&#10;&#13;&#10;      if mt then&#13;&#10;        if count &gt; 0 then self:puts(',') end&#13;&#10;        self:tabify()&#13;&#10;        self:puts('&lt;metatable&gt; = ')&#13;&#10;        self:putValue(mt)&#13;&#10;      end&#13;&#10;    end)&#13;&#10;&#13;&#10;    if #nonSequentialKeys &gt; 0 or mt then -- result is multi-lined. Justify closing }&#13;&#10;      self:tabify()&#13;&#10;    elseif length &gt; 0 then -- array tables have one extra space before closing }&#13;&#10;      self:puts(' ')&#13;&#10;    end&#13;&#10;&#13;&#10;    self:puts('}')&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:putValue(v)&#13;&#10;  local tv = type(v)&#13;&#10;&#13;&#10;  if tv == 'string' then&#13;&#10;    self:puts(smartQuote(escape(v)))&#13;&#10;  elseif tv == 'number' or tv == 'boolean' or tv == 'nil' then&#13;&#10;    self:puts(tostring(v))&#13;&#10;  elseif tv == 'table' then&#13;&#10;    self:putTable(v)&#13;&#10;  else&#13;&#10;    self:puts('&lt;',tv,' ',self:getId(v),'&gt;')&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;-------------------------------------------------------------------&#13;&#10;&#13;&#10;function inspect.inspect(root, options)&#13;&#10;  options       = options or {}&#13;&#10;&#13;&#10;  local depth   = options.depth   or math.huge&#13;&#10;  local newline = options.newline or '\n'&#13;&#10;  local indent  = options.indent  or '  '&#13;&#10;  local process = options.process&#13;&#10;&#13;&#10;  if process then&#13;&#10;    root = processRecursive(process, root, {})&#13;&#10;  end&#13;&#10;&#13;&#10;  local inspector = setmetatable({&#13;&#10;    depth            = depth,&#13;&#10;    buffer           = {},&#13;&#10;    level            = 0,&#13;&#10;    ids              = setmetatable({}, idsMetaTable),&#13;&#10;    maxIds           = setmetatable({}, maxIdsMetaTable),&#13;&#10;    newline          = newline,&#13;&#10;    indent           = indent,&#13;&#10;    tableAppearances = countTableAppearances(root)&#13;&#10;  }, Inspector_mt)&#13;&#10;&#13;&#10;  inspector:putValue(root)&#13;&#10;&#13;&#10;  return table.concat(inspector.buffer)&#13;&#10;end&#13;&#10;&#13;&#10;setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })&#13;&#10;&#13;&#10;return inspect&#13;&#10;end&#13;&#10;&#13;&#10;inspect = getInspect()"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000006"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="model" uuid="1579d54f0e5c427d922085403fcfc6ea">
        <luaMethodGroup name="message" uuid="57811b7dfbc54f56b40f94e68a7f97a3">
          <luaMethod luaMethodName="Plist" luaMethodCode="function Plist(bytes)&#10;&#13;&#10;&#9;local plistFactory = function(bytes)&#13;&#10;&#9;&#9;if bytes:getByte(3) == 0x03 then&#13;&#10;&#9;&#9;&#9;return __PlistMsg:new{ data = bytes }&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;console(&quot;MIDI is not a plist message&quot;)&#13;&#10;&#9;&#9;&#9;console(bytes:toHexString(1))&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local numProgramsOffs = 5&#13;&#10;&#9;local programNameOffs = 7&#13;&#10;&#13;&#10;&#9;if __PlistMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return plistFactory(bytes)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__PlistMsg = SyxMsg()&#13;&#10;&#9;&#13;&#10;&#9;function __PlistMsg:getNumPrograms()&#13;&#10;&#9;&#9;return self.data:getByte(numProgramsOffs)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PlistMsg:getProgramNames()&#13;&#10;&#9;&#9;local offset = programNameOffs&#13;&#10;&#9;&#9;local numPrograms = self:getNumPrograms()&#13;&#10;&#9;&#9;local buf = MemoryBlock(PROGRAM_NAME_LENG, true)&#13;&#10;&#9;&#9;local programNames = {}&#13;&#10;&#13;&#10;&#9;&#9;while offset + PROGRAM_NAME_LENG &lt; self.data:getSize() do&#13;&#10;&#9;&#9;&#9;self.data:copyTo(buf, offset, PROGRAM_NAME_LENG)&#13;&#10;&#9;&#9;&#9;offset = offset + PROGRAM_NAME_LENG&#13;&#10;&#9;&#9;&#9;local name = midiSrvc:fromAkaiString(buf)&#13;&#10;&#9;&#9;&#9;--console(string.format(&quot;Program Name: %s&quot;, name))&#13;&#10;&#9;&#9;&#9;table.insert(programNames, name)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return programNames&#13;&#10;&#9;&#9;&#13;&#10;&#9;end&#9;&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising PlistMsg&quot;)&#13;&#10;&#9;return plistFactory(bytes)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="ee09a89867344891bcf24ae63714fb7e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Pdata" luaMethodCode="function Pdata(bytes)&#13;&#10;&#13;&#10;&#9;local PDATA_HEADER_SIZE = 4&#13;&#10;&#13;&#10;&#9;local pdataFactory = function(bytes)&#13;&#10;&#9;&#9;if bytes == nil then&#13;&#10;&#9;&#9;&#9;bytes = MemoryBlock(232, true)&#13;&#10;&#9;&#9;&#9;bytes:setByte(0, 0xF0)&#13;&#10;&#9;&#9;&#9;bytes:setByte(1, 0x47)&#13;&#10;&#9;&#9;&#9;bytes:setByte(3, 0x07)&#13;&#10;&#9;&#9;&#9;bytes:setByte(231, 0xF7)&#13;&#10;&#13;&#10;&#9;&#9;&#9;local instance = __PdataMsg:new{ data = bytes, [LUA_CLASS_NAME] = &quot;Pdata&quot; }&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;PTUNO&quot;, midiSrvc:toTuneBlock(5000))&#13;&#10;&#9;&#9;&#9;instance:setName(&quot;EMPTYPROGRAM&quot;)&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVLFOR&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVLVOL&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVLFOD&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVAMP1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVAMP2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVPAN1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVPAN2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVPAN3&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_LOUD&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;STEREO&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;PANPOS&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;TRANSPOSE&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;POLYPH&quot;, midiSrvc:toNibbles(15))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;PRIORT&quot;, midiSrvc:toNibbles(2))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;P_PTCH&quot;, midiSrvc:toNibbles(12))&#13;&#10;&#9;&#9;&#9;return instance&#13;&#10;&#9;&#9;elseif bytes:getByte(3) == 0x07 then&#13;&#10;&#9;&#9;&#9;return __PdataMsg:new{ data = bytes, luaClassName = &quot;Pdata&quot; }&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __PdataMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return pdataFactory(bytes)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;PdataMsg&quot;)&#13;&#10;&#13;&#10;&#9;__PdataMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;function __PdataMsg:getOffset(blockIndex)&#13;&#10;&#9;&#9;return PDATA_HEADER_SIZE + blockIndex * 2&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:storeNibbles(blockId, valBlock)&#13;&#10;&#9;&#9;self.data:copyFrom(valBlock, self:getOffset(programBlock[blockId]), valBlock:getSize())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:storePhead(phead)&#13;&#10;&#9;&#9;local valBlock = phead:getValueBlock()&#13;&#10;&#9;&#9;local offset = phead:getOffset()&#13;&#10;&#9;&#9;--self.log:info(&quot;setPdataValue %s&quot;, valBlock:toHexString(1))&#13;&#10;&#9;&#9;self.data:copyFrom(valBlock, self:getOffset(offset), valBlock:getSize())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:getPdataValue(blockId)&#13;&#10;&#9;&#9;local offset = self:getOffset(programBlock[blockId])&#13;&#10;&#9;&#9;if blockId == &quot;PTUNO&quot; then&#13;&#10;&#9;&#9;&#9;return midiSrvc:fromTuneBlock(self.data, offset)&#13;&#10;&#9;&#9;elseif blockId == &quot;PRNAME&quot; then&#13;&#10;&#9;&#9;&#9;return midiSrvc:fromStringBlock(self.data, offset)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return midiSrvc:fromDefaultBlock(self.data, offset)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:setName(programName)&#13;&#10;&#9;&#9;self:storeNibbles(&quot;PRNAME&quot;, midiSrvc:toAkaiString(programName))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:getName()&#13;&#10;&#9;&#9;return midiSrvc:fromStringBlock(self.data, self:getOffset(programBlock[&quot;PRNAME&quot;]))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:setNumKeyGroups(numKeyGroups)&#13;&#10;&#9;&#9;self:storeNibbles(&quot;GROUPS&quot;, midiSrvc:toNibbles(numKeyGroups))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:setMaxProgramNumber()&#13;&#10;&#9;&#9;self:setProgramNumber(255)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:setProgramNumber(programNumber)&#13;&#10;&#9;&#9;self:storeNibbles(&quot;PRGNUM&quot;, midiSrvc:toNibbles(programNumber))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PdataMsg:getProgramNumber()&#13;&#10;&#9;&#9;return midiSrvc:fromDefaultBlock(self.data, self:getOffset(programBlock[&quot;PRGNUM&quot;]))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising PdataMsg&quot;)&#13;&#10;&#9;return pdataFactory(bytes)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="199476c9ff3d45f3979ff040a50c3b9d"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Kdata" luaMethodCode="function Kdata(bytes)&#10;&#13;&#10;&#9;local KDATA_HEADER_SIZE = 9&#13;&#10;&#13;&#10;&#9;local tuneBlocks = {&#13;&#10;&#9;&#9;[&quot;VTUNO1&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO2&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO3&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO4&quot;] = true&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;local vssBlocks = {&#13;&#10;&#9;&#9;[&quot;VSS1&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VSS2&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VSS3&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VSS4&quot;] = true&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;local defaultBytes = function()&#13;&#10;&#9;&#9;local bytes = MemoryBlock(393, true)&#13;&#10;&#9;&#9;bytes:setByte(0, 0xF0)&#13;&#10;&#9;&#9;bytes:setByte(1, 0x47)&#13;&#10;&#9;&#9;bytes:setByte(3, 0x09)&#13;&#10;&#9;&#9;bytes:setByte(392, 0xF7)&#13;&#10;&#9;&#9;return bytes&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local kdataFactory = function(bytes)&#13;&#10;&#9;&#9;bytes = bytes or defaultBytes()&#13;&#10;&#9;&#9;local instance = __KdataMsg:new{ &#13;&#10;&#9;&#9;&#9;data = bytes,&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;Kdata&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;if bytes == nil then&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVFILT1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVFILT2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVFILT3&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;K_FREQ&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;MODVAMP3&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;K_DAR1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_ATT1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_REL1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_ENV2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;K_DAR2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_ATT2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_REL2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_ENV2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;V_ENV2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;DECAY1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;SUSTN1&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;ENV2R2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;ENV2R3&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;ENV2L2&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;instance:storeNibbles(&quot;ENV2L3&quot;, midiSrvc:toNibbles(50))&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;for i = 1,4 do&#13;&#10;&#9;&#9;&#9;&#9;instance:storeNibbles(string.format(&quot;VFREQ%d&quot;, i), midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;&#9;instance:storeNibbles(string.format(&quot;VPANO%d&quot;, i), midiSrvc:toNibbles(50))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if bytes:getByte(3) == 0x09 then&#13;&#10;&#9;&#9;&#9;return instance&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __KdataMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return kdataFactory(bytes)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;KdataMsg&quot;)&#13;&#10;&#13;&#10;&#9;__KdataMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;function __KdataMsg:getOffset(blockIndex)&#13;&#10;&#9;&#9;return KDATA_HEADER_SIZE + blockIndex * 2&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KdataMsg:storeNibbles(blockId, valBlock)&#13;&#10;&#9;&#9;self.data:copyFrom(valBlock, self:getOffset(keyGroupBlock[blockId]), valBlock:getSize())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KdataMsg:storeKhead(khead)&#13;&#10;&#9;&#9;local valBlock = khead:getValueBlock()&#13;&#10;&#9;&#9;local offset = khead:getOffset()&#13;&#10;&#9;&#9;local kdataOffs = self:getOffset(offset)&#13;&#10;&#9;&#9;--log:info(&quot;setKdataValue %d (%d) -&gt; %s&quot;, offset, kdataOffs, valBlock:toHexString(1))&#13;&#10;&#9;&#9;self.data:copyFrom(valBlock, kdataOffs, valBlock:getSize())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KdataMsg:getKdataValue(blockId)&#13;&#10;&#9;&#9;local offset = self:getOffset(keyGroupBlock[blockId])&#13;&#10;&#9;&#9;if tuneBlocks[blockId] then&#13;&#10;&#9;&#9;&#9;log:info(&quot;getKdataValue %s =&gt; %d =&gt; %d&quot;, blockId, keyGroupBlock[blockId], offset)&#13;&#10;&#9;&#9;&#9;return midiSrvc:fromTuneBlock(self.data, offset)&#13;&#10;&#9;&#9;elseif vssBlocks[blockId] then&#13;&#10;&#9;&#9;&#9;return midiSrvc:fromVssBlock(self.data, offset)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return midiSrvc:fromDefaultBlock(self.data, offset)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising KdataMsg&quot;)&#13;&#10;&#9;return kdataFactory(bytes)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="66750a3c24ed4721833f8202ab544370"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Stat" luaMethodCode="function Stat(bytes)&#13;&#10;&#13;&#10;&#9;local statFactory = function(bytes)&#13;&#10;&#9;&#9;if bytes:getSize() == 21 and bytes:getByte(3) == 0x01 then&#13;&#10;&#9;&#9;&#9;return __StatMsg:new{ data = bytes }&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;console(&quot;MIDI is not a stat message&quot;)&#13;&#10;&#9;&#9;&#9;console(data:toHexString(1))&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __StatMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return statFactory(bytes)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__StatMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;function __StatMsg:getSwVersion()&#13;&#10;&#9;&#9;return string.format(&quot;%d.%d&quot;, self.data:getByte(6), self.data:getByte(5))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __StatMsg:getNumFreeWords()&#13;&#10;&#9;&#9;local result = 0&#13;&#10;&#9;&#9;for i = 15,18 do&#13;&#10;&#9;&#9;&#9;local offset = 128 &#94; (i - 15)&#13;&#10;&#9;&#9;&#9;result = result + self.data:getByte(i) * offset&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return result&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return statFactory(bytes)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="eb79a7628de947079c16b53a33f1c2c5"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Slist" luaMethodCode="function Slist(bytes)&#13;&#10;&#13;&#10;&#9;local slistFactory = function(bytes)&#13;&#10;&#9;&#9;local logger = Logger(&quot;SlistMsg&quot;)&#13;&#10;&#9;&#9;if bytes:getByte(3) == 0x05 then&#13;&#10;&#9;&#9;&#9;return __SlistMsg:new{ data = bytes, log = logger }&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;logger:info(&quot;Not a slist msg&quot;)&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __SlistMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return slistFactory(bytes)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local numSamplesOffs = 5&#13;&#10;&#9;local sampleNameOffs = 7&#13;&#10;&#13;&#10;&#9;__SlistMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;function __SlistMsg:getNumSamples()&#13;&#10;&#9;&#9;return self.data:getByte(numSamplesOffs)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SlistMsg:getSampleList()&#13;&#10;&#9;&#9;local offset = sampleNameOffs&#13;&#10;&#9;&#9;local numSamples = self:getNumSamples()&#13;&#10;&#9;&#9;local buf = MemoryBlock(SAMPLE_NAME_LENG, true)&#13;&#10;&#9;&#9;local sampleNames = {}&#13;&#10;&#13;&#10;&#9;&#9;while offset + SAMPLE_NAME_LENG &lt; self.data:getSize() do&#13;&#10;&#9;&#9;&#9;self.data:copyTo(buf, offset, SAMPLE_NAME_LENG)&#13;&#10;&#9;&#9;&#9;offset = offset + SAMPLE_NAME_LENG&#13;&#10;&#9;&#9;&#9;local name = midiSrvc:fromAkaiString(buf)&#13;&#10;&#9;&#9;&#9;--self.log:fine(&quot;Sample Name: %s&quot;, name)&#13;&#10;&#9;&#9;&#9;table.insert(sampleNames, name)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return sampleNames&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising SlistMsg&quot;)&#13;&#10;&#9;return slistFactory(bytes)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="9e354b2a1c814f9187be0a18e3b74a8c"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Rstat" luaMethodCode="function Rstat()&#13;&#10;&#13;&#10;&#9;local rstatFactory = function()&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x00, 0x48, 0xf7}&#13;&#10;&#9;&#9;return __RstatMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __RstatMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;rstatFactory()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__RstatMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising RstatMsg&quot;)&#13;&#10;&#9;return rstatFactory()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="6f8f6ad589cc4155ac50dd4dd3f7b9b9"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Rplist" luaMethodCode="function Rplist()&#13;&#10;&#13;&#10;&#9;local rplistFactory = function()&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x02, 0x48, 0xf7}&#13;&#10;&#9;&#9;return __RplistMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __RplistMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return rplistFactory()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__RplistMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising RplistMsg&quot;)&#13;&#10;&#9;return rplistFactory()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="2496aa5af4fa4dc48fa85a347eefe061"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Rslist" luaMethodCode="function Rslist()&#13;&#10;&#13;&#10;&#9;local rslistFactory = function()&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x04, 0x48, 0xf7}&#13;&#10;&#9;&#9;return __RslistMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __RslistMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return rslistFactory()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__RslistMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising RslistMsg&quot;)&#13;&#10;&#9;return rslistFactory()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="68b0e36970864c7599fc84be6c55513d"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Rpdata" luaMethodCode="function Rpdata(programNumber)&#13;&#10;&#13;&#10;&#9;local rpdataFactory = function(programNumber)&#13;&#10;&#9;&#9;local pb = midiSrvc:splitBytes(programNumber)&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x06, 0x48, pb[1], pb[2], 0xf7}&#13;&#10;&#9;&#9;return __RpdataMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __RpdataMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return rpdataFactory(programNumber)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__RpdataMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;return rpdataFactory(programNumber)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="8ebeecfb9b8d4b25bfe2394553c7d56e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Delp" luaMethodCode="function Delp(programNumber)&#13;&#10;&#13;&#10;&#9;local delpFactory = function(programNumber)&#13;&#10;&#9;&#9;local pb = midiSrvc:splitBytes(programNumber)&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x12, 0x48, pb[1], pb[2], 0xf7}&#13;&#10;&#9;&#9;return __DelpMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __DelpMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return delpFactory(programNumber)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__DelpMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;return delpFactory(programNumber)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="2e997410f42d4e7ab6fee725624ba4ed"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Dels" luaMethodCode="function Dels(sampleNumber)&#13;&#10;&#13;&#10;&#9;local delsFactory = function(sampleNumber)&#13;&#10;&#9;&#9;local sb = midiSrvc:splitBytes(sampleNumber)&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x14, 0x48, sb[1], sb[2], 0xf7}&#13;&#10;&#9;&#9;return __DelsMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __DelsMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return delsFactory(sampleNumber)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__DelsMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;return delsFactory(sampleNumber)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="83ed3a78eb2744f2ac02ba2f209e1df1"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Rkdata" luaMethodCode="function Rkdata(programNumber, kgNumber)&#13;&#10;&#13;&#10;&#9;local rkdataFactory = function(programNumber, kgNumber)&#13;&#10;&#9;&#9;local pb = midiSrvc:splitBytes(programNumber)&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x08, 0x48, pb[1], pb[2], kgNumber, 0xf7}&#13;&#10;&#9;&#9;return __RkdataMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __RkdataMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return rkdataFactory(programNumber, kgNumber)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__RkdataMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;return rkdataFactory(programNumber, kgNumber)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="1fcb6ab4c42245308fedb2e6cc1afb5d"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="SyxMsg" luaMethodCode="function SyxMsg()&#13;&#10;&#13;&#10;&#9;if __SyxMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return __SyxMsg:new{ data = nil }&#13;&#10;&#9;end&#10;&#13;&#10;&#9;__SyxMsg = Object()&#13;&#10;&#13;&#10;&#9;function __SyxMsg:toMidiMessage()&#13;&#10;&#9;&#9;return CtrlrMidiMessage(self.data)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SyxMsg:toString()&#13;&#10;&#9;&#9;return self.data:toHexString(1)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SyxMsg:toJson()&#13;&#10;&#9;&#9;return string.gsub(&#13;&#10;&#9;&#9;&#9;json.encode(self), &#13;&#10;&#9;&#9;&#9;&quot;&#94;{&quot;, &#13;&#10;&#9;&#9;&#9;string.format(&quot;{data = \&quot;%s\&quot;,&quot;, self.data:toHexString(1)), &#13;&#10;&#9;&#9;&#9;1)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return __SyxMsg:new{ data = nil }&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="4de1beedbf6a4c71855e0b8e10ce3038"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Phead" luaMethodCode="function Phead(progNbr, headerOffset, valuesMemBlock)&#10;&#13;&#10;&#9;local newInstance = function(progNbr, headerOffset, valuesMemBlock)&#13;&#10;&#9;&#9;local pgm = midiSrvc:toNibbles(progNbr)&#13;&#10;&#9;&#9;local headerOffsArray = midiSrvc:splitBytes(headerOffset)&#13;&#10;&#9;&#9;local numBytesArray = midiSrvc:splitBytes(valuesMemBlock:getSize())&#13;&#10;&#13;&#10;&#9;&#9;local memBlock = MemoryBlock(13 + valuesMemBlock:getSize(), true)&#13;&#10;&#9;&#9;memBlock:loadFromHexString(string.format(&quot;F0 47 00 28 48 %s 0x00 %.2x %.2x %.2x %.2x%s F7&quot;,&#13;&#10;&#9;&#9;&#9;pgm:toHexString(1), headerOffsArray[1], headerOffsArray[2], &#13;&#10;&#9;&#9;&#9;numBytesArray[1], numBytesArray[2], valuesMemBlock:toHexString(1)))&#13;&#10;&#13;&#10;&#9;&#9;return __PheadMsg:new {&#13;&#10;&#9;&#9;&#9;data = memBlock,&#13;&#10;&#9;&#9;&#9;offset = headerOffset, &#13;&#10;&#9;&#9;&#9;valBlock = valuesMemBlock&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __PheadMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(progNbr, headerOffset, valuesMemBlock)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__PheadMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;function __PheadMsg:getOffset()&#13;&#10;&#9;&#9;return self.offset&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __PheadMsg:getValueBlock()&#13;&#10;&#9;&#9;return self.valBlock&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return newInstance(progNbr, headerOffset, valuesMemBlock)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="eeb619bfe085487e91c577013c7e92cf"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Khead" luaMethodCode="function Khead(prog, kg, headerOffset, valuesMemBlock)&#10;&#13;&#10;&#9;local newInstance = function(prog, kg, headerOffset, valuesMemBlock)&#13;&#10;&#9;&#9;local pgm = midiSrvc:toNibbles(prog)&#13;&#10;&#9;&#9;local headerOffsArray = midiSrvc:splitBytes(headerOffset)&#13;&#10;&#9;&#9;local numBytesArray = midiSrvc:splitBytes(valuesMemBlock:getSize())&#13;&#10;&#13;&#10;&#9;&#9;local memBlock = MemoryBlock(13 + valuesMemBlock:getSize(), true)&#13;&#10;&#9;&#9;memBlock:loadFromHexString(string.format(&quot;F0 47 00 2A 48 %s %.2x %.2x %.2x %.2x %.2x%s F7&quot;,&#13;&#10;&#9;&#9;&#9;pgm:toHexString(1), kg, headerOffsArray[1], headerOffsArray[2], &#13;&#10;&#9;&#9;&#9;numBytesArray[1], numBytesArray[2], valuesMemBlock:toHexString(1)))&#13;&#10;&#13;&#10;&#9;&#9;return __KheadMsg:new {&#13;&#10;&#9;&#9;&#9;data = memBlock,&#13;&#10;&#9;&#9;&#9;offset = headerOffset, &#13;&#10;&#9;&#9;&#9;valBlock = valuesMemBlock &#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __KheadMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(prog, kg, headerOffset, valuesMemBlock)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__KheadMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;function __KheadMsg:getOffset()&#13;&#10;&#9;&#9;return self.offset&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KheadMsg:getValueBlock()&#13;&#10;&#9;&#9;return self.valBlock&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return newInstance(prog, kg, headerOffset, valuesMemBlock)&#10;end&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="9af460ddb7e24761b3ec0567d06530b6"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="Delk" luaMethodCode="function Delk(programNumber, kgNumber)&#13;&#10;&#13;&#10;&#9;local delkFactory = function(programNumber, kgNumber)&#13;&#10;&#9;&#9;local pb = midiSrvc:splitBytes(programNumber)&#13;&#10;&#9;&#9;local bytes = {0xf0, 0x47, 0x00, 0x13, 0x48, pb[1], pb[2], kgNumber, 0xf7}&#13;&#10;&#9;&#9;return __DelkMsg:new{ data = bytes }&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __DelkMsg ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return delkFactory(programNumber, kgNumber)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__DelkMsg = SyxMsg()&#13;&#10;&#13;&#10;&#9;return delkFactory(programNumber, kgNumber)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="312321747d654fdf9c897fcbb0ba38af"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethod luaMethodName="Process" luaMethodCode="function Process()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;-- Get random transferId&#13;&#10;&#9;&#9;math.randomseed( os.time() )&#13;&#10;&#9;&#9;math.random(); math.random(); math.random()&#13;&#10;&#13;&#10;&#9;&#9;local o = {&#13;&#10;&#9;&#9;&#9;midiCallback = nil,&#13;&#10;&#9;&#9;&#9;midiSender = nil,&#13;&#10;&#9;&#9;&#9;interval = 0,&#13;&#10;&#9;&#9;&#9;scriptName = nil,&#13;&#10;&#9;&#9;&#9;launchGenerators = {},&#13;&#10;&#9;&#9;&#9;abortGenerators = {},&#13;&#10;&#9;&#9;&#9;launchVariables = {},&#13;&#10;&#9;&#9;&#9;scriptPath = workFolder:getFullPathName(),&#13;&#10;&#9;&#9;&#9;abortScriptPath = nil,&#13;&#10;&#9;&#9;&#9;id = math.random(100000)&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;o.suffix = &quot;bat&quot;&#13;&#10;&#9;&#9;if operatingSystem == &quot;mac&quot; then&#13;&#10;&#9;&#9;&#9;o.suffix = &quot;sh&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;return __Process:new(o)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __Process ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;Process&quot;)&#13;&#10;&#13;&#10;&#9;__Process = Object()&#13;&#10;&#9;&#13;&#10;&#9;function __Process:getLogFilePath()&#13;&#10;&#9;&#9;local logFileName = string.format(&quot;scriptLauncher.%s.log&quot;, self.suffix)&#13;&#10;&#9;&#9;return self:getFullPath(logFileName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:getFullPath(scriptName)&#13;&#10;&#9;&#9;return string.format(&quot;%s%s%s&quot;, self.scriptPath, pathseparator, scriptName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:getScriptPath()&#13;&#10;&#9;&#9;console(string.format(&quot;[s2kProcess:getScriptPath()] %s&quot;, self.scriptPath))&#13;&#10;&#9;&#9;return self.scriptPath&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:hasLauncher()&#13;&#10;&#9;&#9;return table.getn(self.launchGenerators) &gt; 0&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:hasAborter()&#13;&#10;&#9;&#9;return table.getn(self.abortGenerators) &gt; 0&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:getLaunchName()&#13;&#10;&#9;&#9;return self.launchVariables[&quot;scriptName&quot;]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:getAbortName()&#13;&#10;&#9;&#9;return self.abortScriptName&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:build()&#13;&#10;&#9;&#9;local scriptName = string.format(&quot;scriptLauncher.%s&quot;, self.suffix)&#13;&#10;&#9;&#9;self.launchVariables[&quot;scriptIndex&quot;] = self.id&#13;&#10;&#9;&#9;self.launchVariables[&quot;scriptName&quot;] = scriptName&#13;&#10;&#9;&#9;self.launchVariables[&quot;scriptPath&quot;] = self:getFullPath(scriptName)&#13;&#10;&#9;&#9;self.launchVariables[&quot;scriptDir&quot;]  = self.scriptPath&#13;&#10;&#9;&#9;os.remove(self.launchVariables[&quot;scriptPath&quot;])&#13;&#10;&#9;&#9;console(string.format(&quot;Building process %d %s in %s&quot;,&#13;&#10;&#9;&#9;&#9;self.launchVariables[&quot;scriptIndex&quot;], self.launchVariables[&quot;scriptName&quot;],&#13;&#10;&#9;&#9;&#9;self.launchVariables[&quot;scriptDir&quot;]))&#13;&#10;&#13;&#10;&#9;&#9;for key,launchGenerator in pairs(self.launchGenerators) do&#13;&#10;&#9;&#9;&#9;launchGenerator(self.launchVariables)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;self.abortScriptName = string.format(&quot;scriptAborter.%s&quot;, self.suffix)&#13;&#10;&#9;&#9;local abortScriptPath = self:getFullPath(self.abortScriptName)&#13;&#10;&#9;&#9;os.remove(abortScriptPath)&#13;&#10;&#9;&#9;for key,abortGenerator in pairs(self.abortGenerators) do&#13;&#10;&#9;&#9;&#9;abortGenerator(abortScriptPath)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withLaunchVariable(key, value)&#13;&#10;&#9;&#9;self.launchVariables[key] = value&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withLaunchGenerator(value)&#13;&#10;&#9;&#9;table.insert(self.launchGenerators, value)&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withAbortGenerator(value)&#13;&#10;&#9;&#9;table.insert(self.abortGenerators, value)&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withSuffix(value)&#13;&#10;&#9;&#9;self.suffix = value&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withPath(value)&#13;&#10;&#9;&#9;self.scriptPath = value&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withMidiCallback(newval)&#13;&#10;&#9;&#9;self.midiCallback = newval&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Process:withMidiSender(newval, newInterval)&#13;&#10;&#9;&#9;self.midiSender = newval&#13;&#10;&#9;&#9;self.interval = newInterval&#13;&#10;&#9;&#9;return self&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising Process&quot;)&#13;&#10;&#9;return newInstance()&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="08a70a85f1b240ebbd54c833ca60ab6d"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="DrumMap" luaMethodCode="function DrumMap(data)&#13;&#10;&#13;&#10;&#9;local newInstance = function(data)&#13;&#10;&#9;&#9;local kRngs = {}&#13;&#10;&#9;&#9;for i = 0,15 do&#13;&#10;&#9;&#9;&#9;table.insert(kRngs, {i, i})&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;return __DrumMap:new {&#13;&#10;&#9;&#9;&#9;keyGroups = {},&#13;&#10;&#9;&#9;&#9;floppyList = {},&#13;&#10;&#9;&#9;&#9;selectedSample = nil,&#13;&#10;&#9;&#9;&#9;selectedKg = nil,&#13;&#10;&#9;&#9;&#9;currentFloppyUsage = 0,&#13;&#10;&#9;&#9;&#9;numKgs = 16,&#13;&#10;&#9;&#9;&#9;keyRanges = kRngs,&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;DrumMap&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __DrumMap ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(data)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;DrumMap&quot;)&#13;&#10;&#13;&#10;&#9;__DrumMap = Dispatcher()&#13;&#10;&#13;&#10;&#9;function __DrumMap:setSelectedSample(selectedSample)&#13;&#10;&#9;&#9;self.selectedSample = selectedSample&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:setSelectedKeyGroup(selectedKg)&#13;&#10;&#9;&#9;if type(selectedKg) == &quot;string&quot; then&#13;&#10;&#9;&#9;&#9;selectedKg = tonumber(string.sub(selectedKg, string.find(selectedKg, &quot;-&quot;) + 1, #selectedKg))&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if self.selectedKg == selectedKg then&#13;&#10;&#9;&#9;&#9;self.selectedKg = nil&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;self.selectedKg = selectedKg&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:isSelectedKeyGroup(padName)&#13;&#10;&#9;&#9;return padName == self.selectedKg&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getSelectedSample()&#13;&#10;&#9;&#9;return self.selectedSample&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getSelectedKeyGroup()&#13;&#10;&#9;&#9;return self.selectedKg&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getNumFloppies()&#13;&#10;&#9;&#9;return table.getn(self.floppyList)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:isReadyForAssignment()&#13;&#10;&#9;&#9;return self.selectedSample ~= nil and self.selectedKg ~= nil&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getCurrentFloppyUsage()&#13;&#10;&#9;&#9;return self.currentFloppyUsage&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:setCurrentFloppyUsage(currentFloppyUsage)&#13;&#10;&#9;&#9;self.currentFloppyUsage = currentFloppyUsage&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:addNewFloppy()&#13;&#10;&#9;&#9;log:info(&quot;add new floppy: %d&quot;, self:getNumFloppies())&#13;&#10;&#9;&#9;local floppy = {}&#13;&#10;&#9;&#9;table.insert(self.floppyList, floppy)&#13;&#10;&#9;&#9;self.currentFloppyUsage = 0&#13;&#10;&#9;&#9;return floppy&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:insertToCurrentFloppy(sample)&#13;&#10;&#9;&#9;local floppy = self:getFloppy(self:getNumFloppies())&#13;&#10;&#9;&#9;table.insert(floppy, sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getFloppy(index)&#13;&#10;&#9;&#9;return self.floppyList[index]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:retrieveNextFloppy()&#13;&#10;&#9;&#9;return table.remove(self.floppyList)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:setNumKeyGroups(numKeyGroups)&#13;&#10;&#9;&#9;local currKeyGroups = table.getn(self.keyGroups)&#13;&#10;&#9;&#9;while currKeyGroups &lt; numKeyGroups do&#13;&#10;&#9;&#9;&#9;local kg = KeyGroup()&#13;&#10;&#9;&#9;&#9;kg:setLowNote(currKeyGroups)&#13;&#10;&#9;&#9;&#9;kg:setHighNote(currKeyGroups)&#13;&#10;&#13;&#10;&#9;&#9;&#9;table.insert(self.keyGroups, kg)&#13;&#10;&#9;&#9;&#9;currKeyGroups = table.getn(self.keyGroups)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;while table.getn(self.keyGroups) &gt; numKeyGroups do&#13;&#10;&#9;&#9;&#9;table.remove(self.keyGroups)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:addSampleToSelectedKeyGroup(sample)&#13;&#10;&#9;&#9;log:fine(&quot;Selected kg %d&quot;, self.selectedKg)&#13;&#10;&#9;&#9;local selectedKeyGroup = self.keyGroups[self.selectedKg]&#13;&#10;&#9;&#9;assert(selectedKeyGroup:numZones() &lt; 4, &quot;A key group can only contain 4 zones&quot;)&#13;&#10;&#9;&#9;selectedKeyGroup:addSampleZone(sample)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#9;&#13;&#10;&#13;&#10;&#9;function __DrumMap:addFileToSelectedKeyGroup(file)&#13;&#10;&#9;&#9;log:fine(&quot;Selected kg %d&quot;, self.selectedKg)&#13;&#10;&#9;&#9;local selectedKeyGroup = self.keyGroups[self.selectedKg]&#13;&#10;&#9;&#9;assert(selectedKeyGroup:numZones() &lt; 4, &quot;A key group can only contain 4 zones&quot;)&#13;&#10;&#9;&#9;selectedKeyGroup:addFileZone(file)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getNumSamplesOnSelectedKeyGroup()&#13;&#10;&#9;&#9;local selectedKeyGroup = self.keyGroups[self.selectedKg]&#13;&#10;&#9;&#9;if selectedKeyGroup == nil then&#13;&#10;&#9;&#9;&#9;return 0&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return selectedKeyGroup:numZones()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getSamplesOfKeyGroup(kgIndex)&#13;&#10;&#9;&#9;local keyGroup = self.keyGroups[kgIndex]&#13;&#10;&#9;&#9;if keyGroup == nil then&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local samplesOfKg = &quot;&quot;&#13;&#10;&#9;&#9;local first = true&#13;&#10;&#9;&#9;for k,zone in pairs(keyGroup:getZones()) do&#13;&#10;&#9;&#9;&#9;local sampleName = zone:getSampleName()&#13;&#10;&#9;&#9;&#9;if string.len(sampleName) &gt; 20 then&#13;&#10;&#9;&#9;&#9;&#9;sampleName = string.format(&quot;%s..&quot;, string.sub(sampleName, 0, 19))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;if first then&#13;&#10;&#9;&#9;&#9;&#9;first = false&#13;&#10;&#9;&#9;&#9;&#9;samplesOfKg = sampleName&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;samplesOfKg = string.format(&quot;%s\n%s&quot;, samplesOfKg, sampleName)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return samplesOfKg&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:isClear()&#13;&#10;&#9;&#9;for k,keyGroup in pairs(self.keyGroups) do&#13;&#10;&#9;&#9;&#9;return false&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return true&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:clear()&#13;&#10;&#9;&#9;self.currentFloppyUsage = 0&#13;&#10;&#9;&#9;self.keyGroups = {}&#13;&#10;&#9;&#9;self.floppyList = {}&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:resetSelectedKeyRange()&#13;&#10;&#9;&#9;if self.selectedKg == nil then&#13;&#10;&#9;&#9;&#9;console(&quot;DrumMap:resetSelectedKeyRange - No pad selected&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local defaultValue = self.selectedKg - 1&#13;&#10;&#9;&#9;self.keyRanges[self.selectedKg] = { defaultValue, defaultValue }&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:setKeyRange(endIndex, value)&#13;&#10;&#9;&#9;local index = tonumber(endIndex)&#13;&#10;&#9;&#9;if index &lt; 1 or index &gt; 2 then&#13;&#10;&#9;&#9;&#9;console(string.format(&quot;Weird endIndex %d&quot;, index))&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local rangeValues = self.keyRanges[self.selectedKg]&#13;&#10;&#9;&#9;rangeValues[index] = value&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getKeyRangeValues()&#13;&#10;&#9;&#9;if self.selectedKg == nil then&#13;&#10;&#9;&#9;&#9;return { 0, 0 }&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return self.keyRanges[self.selectedKg]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:replaceKeyGroupZoneWithSample(keyGroupName, zoneIndex, stereoSample)&#13;&#10;&#9;&#9;local keyGroup = self.keyGroups[keyGroupName]&#13;&#10;&#9;&#9;if type(stereoSample) == &quot;string&quot; then&#10;&#9;&#9;&#9;-- Mono sample&#10;&#9;&#9;&#9;keyGroup:replaceWithMonoSample(zoneIndex, stereoSample)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;-- Stereo sample&#10;&#9;&#9;&#9;keyGroup:replaceZoneWithStereoSample(zoneIndex, stereoSample[1], stereoSample[2])&#10;&#9;&#9;end&#13;&#10;&#9;&#9;self:notifyListeners()&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:resetAllRanges()&#13;&#10;&#9;&#9;setRangesToDefault(self.keyRanges)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:hasLoadedAllSamples()&#13;&#10;&#9;&#9;for k,keyGroup in pairs(self.keyGroups) do&#13;&#10;&#9;&#9;&#9;local zones = keyGroup:getZones()&#13;&#10;&#9;&#9;&#9;for k2, zone in pairs(zones) do&#13;&#10;&#9;&#9;&#9;&#9;if not zone:isSampleLoaded() then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return false&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return true&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getKeyGroups()&#13;&#10;&#9;&#9;return self.keyGroups&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMap:getNumKeyGroups()&#13;&#10;&#9;&#9;return table.getn(self.keyGroups)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Used for floppy image selection&#13;&#10;&#9;function __DrumMap:getLaunchButtonState()&#13;&#10;&#9;&#9;if floppyImgPath == nil then&#13;&#10;&#9;&#9;&#9;if self.selectedKg ~= nil and self.selectedSample ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;return &quot;&quot;&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;return &quot;Select a sample and a key group&quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;if self.selectedKg ~= nil or self.setSelectedSample ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;return &quot;You cannot load both an image and samples.\nPlease clear some data&quot;&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;return &quot;&quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising DrumMap&quot;)&#13;&#10;&#9;return newInstance(data)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="9473d83f2948420e97583529d6d8d134"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Sample" luaMethodCode="function Sample(sampleName)&#13;&#10;&#13;&#10;&#9;local newInstance = function(sampleName)&#13;&#10;&#9;&#9;return __Sample:new{ &#13;&#10;&#9;&#9;&#9;name = sampleName,&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;Sample&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __Sample ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(sampleName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;Sample&quot;)&#13;&#10;&#13;&#10;&#9;__Sample = Dispatcher()&#13;&#10;&#13;&#10;&#9;function __Sample:setUpdating(updating)&#13;&#10;&#9;&#9;self.updating = updating&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:isUpdating()&#13;&#10;&#9;&#9;return self.updating&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setName(name)&#13;&#10;&#9;&#9;self.name = name&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getName()&#13;&#10;&#9;&#9;return self.name&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setWaveform(waveform)&#13;&#10;&#9;&#9;self.waveform = waveform&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getWaveform()&#13;&#10;&#9;&#9;return self.waveform&#13;&#10;&#9;end&#10;&#13;&#10;&#9;function __Sample:setTrimStart(trimStart)&#13;&#10;&#9;&#9;self.trimStart = trimStart&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTrimStart()&#13;&#10;&#9;&#9;return self.trimStart&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTrimEnd(trimEnd)&#13;&#10;&#9;&#9;self.trimEnd = trimEnd&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTrimEnd()&#13;&#10;&#9;&#9;return self.trimEnd&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setLoopType(loopType)&#13;&#10;&#9;&#9;self.loopType = loopType&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getLoopType()&#13;&#10;&#9;&#9;return self.loopType&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setLoopTune(loopTune)&#13;&#10;&#9;&#9;self.loopTune = loopTune&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getLoopTune()&#13;&#10;&#9;&#9;return self.loopTune&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setLoopHold(loopHold)&#13;&#10;&#9;&#9;self.loopHold = loopHold&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getLoopHold()&#13;&#10;&#9;&#9;return self.loopHold&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setLoopStart(loopStart)&#13;&#10;&#9;&#9;self.loopStart = loopStart&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getLoopStart()&#13;&#10;&#9;&#9;return self.loopStart&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setLoopLength(loopLength)&#13;&#10;&#9;&#9;self.loopLength = loopLength&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getLoopLength()&#13;&#10;&#9;&#9;return self.loopLength&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setLoopCrossfade(loopCrossfade)&#13;&#10;&#9;&#9;self.loopCrossfade = loopCrossfade&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getLoopCrossfade()&#13;&#10;&#9;&#9;return self.loopCrossfade&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTimestretch(timestretch)&#13;&#10;&#9;&#9;self.timestretch = timestretch&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTimestretch()&#13;&#10;&#9;&#9;return self.timestretch&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTimestretchCycleMode(timestretchCycleMode)&#13;&#10;&#9;&#9;self.timestretchCycleMode = timestretchCycleMode&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTimestretchCycleMode()&#13;&#10;&#9;&#9;return self.timestretchCycleMode&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTimestretchCycleTime(timestretchCycleTime)&#13;&#10;&#9;&#9;self.timestretchCycleTime = timestretchCycleTime&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTimestretchCycleTime()&#13;&#10;&#9;&#9;return self.timestretchCycleTime&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTimestretchType(timestretchType)&#13;&#10;&#9;&#9;self.timestretchType = timestretchType&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTimestretchType()&#13;&#10;&#9;&#9;return self.timestretchType&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTimestretchQuality(timestretchQuality)&#13;&#10;&#9;&#9;self.timestretchQuality = timestretchQuality&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTimestretchQuality()&#13;&#10;&#9;&#9;return self.timestretchQuality&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setTimestretchCrossfade(timestretchCrossfade)&#13;&#10;&#9;&#9;self.timestretchCrossfade = timestretchCrossfade&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getTimestretchCrossfade()&#13;&#10;&#9;&#9;return self.timestretchCrossfade&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setResampleQuality(resampleQuality)&#13;&#10;&#9;&#9;self.resampleQuality = resampleQuality&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getResampleQuality()&#13;&#10;&#9;&#9;return self.resampleQuality&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setResampleBandwidth(resampleBandwidth)&#13;&#10;&#9;&#9;self.resampleBandwidth = resampleBandwidth&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getResampleBandwidth()&#13;&#10;&#9;&#9;return self.resampleBandwidth&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setReverse(reverse)&#13;&#10;&#9;&#9;self.reverse = reverse&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getReverse()&#13;&#10;&#9;&#9;return self.reverse&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setNormalize(normalize)&#13;&#10;&#9;&#9;self.normalize = normalize&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getNormalize()&#13;&#10;&#9;&#9;return self.normalize&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:setPitch(pitch)&#13;&#10;&#9;&#9;self.pitch = pitch&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Sample:getPitch()&#13;&#10;&#9;&#9;return self.pitch&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising Sample&quot;)&#13;&#10;&#9;return newInstance(sampleName)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="1c9abdb54dc8486c9e04b382458b84d6"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Program" luaMethodCode="function Program(data)&#13;&#10;&#13;&#10;&#9;local newInstance = function(data)&#13;&#10;&#9;&#9;data = data or Pdata()&#13;&#10;&#9;&#9;return __Program:new{&#13;&#10;&#9;&#9;&#9;pdata = data,&#13;&#10;&#9;&#9;&#9;keyGroups = {},&#13;&#10;&#9;&#9;&#9;activeKg = 1,&#13;&#10;&#9;&#9;&#9;updating = false,&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;Program&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __Program ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(data)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;Program&quot;)&#13;&#10;&#13;&#10;&#9;__Program = Dispatcher()&#13;&#10;&#13;&#10;&#9;function __Program:getName()&#13;&#10;&#9;&#9;return self.pdata:getName()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:setName(name)&#13;&#10;&#9;&#9;self.pdata:setName(name)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:setProgramNumber(programNumber)&#13;&#10;&#9;&#9;self.pdata:setProgramNumber(programNumber)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:getProgramNumber()&#13;&#10;&#9;&#9;return self.pdata:getProgramNumber()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:setActiveKeyGroupIndex(index)&#13;&#10;&#9;&#9;self.activeKg = index&#13;&#10;&#9;&#9;--self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:getActiveKeyGroupIndex()&#13;&#10;&#9;&#9;return self.activeKg&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:getActiveKeyGroup()&#13;&#10;&#9;&#9;return self.keyGroups[self.activeKg]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:getNumKeyGroups()&#13;&#10;&#9;&#9;return table.getn(self.keyGroups)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:addKeyGroup(keyGroup)&#13;&#10;&#9;&#9;table.insert(self.keyGroups, keyGroup)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:getKeyGroup(index)&#13;&#10;&#9;&#9;return self.keyGroups[index]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:removeKeyGroup(index)&#13;&#10;&#9;&#9;table.remove(self.keyGroups, index)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:storeParamEdit(phead)&#13;&#10;&#9;&#9;if self.updating then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;self.pdata:storePhead(phead)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:getParamValue(blockId)&#13;&#10;&#9;&#9;return self.pdata:getPdataValue(blockId)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:setUpdating(updating)&#13;&#10;&#9;&#9;self.updating = updating&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:isUpdating()&#13;&#10;&#9;&#9;return self.updating&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:toString()&#13;&#10;&#9;&#9;return self.pdata:toString()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Program:toJson()&#13;&#10;&#9;&#9;local base = json.encode(self)&#13;&#10;&#9;&#9;-- Replace pdata&#13;&#10;&#9;&#9;base = string.gsub(&#13;&#10;&#9;&#9;&#9;base, &quot;\&quot;pdata\&quot;:{[&#94;}]+}&quot;, string.format(&quot;\&quot;pdata\&quot;:%s&quot;, self.pdata:toJson()),&#9;1)&#13;&#10;&#9;&#9;-- Replace keygroups&#13;&#10;&#9;&#9;local kgs = &quot;&quot;&#13;&#10;&#9;&#9;for k,v in pairs(self.keyGroups) do&#13;&#10;&#9;&#9;&#9;if kgs == &quot;&quot; then&#13;&#10;&#9;&#9;&#9;&#9;kgs = string.format(&quot;%s&quot;, v:toJson())&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;kgs = string.format(&quot;%s,%s&quot;, kgs, v:toJson())&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;base = string.gsub(&#13;&#10;&#9;&#9;&#9;base, &quot;\&quot;keyGroups\&quot;:\[[&#94;]+\]&quot;, string.format(&quot;\&quot;keyGroups\&quot;:[%s]&quot;, kgs),&#9;1)&#13;&#10;&#9;&#9;return base&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising Program&quot;)&#13;&#10;&#9;return newInstance(data)&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="4b42c0afebe045439a295cc9a5a5e0b1"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="KeyGroup" luaMethodCode="function KeyGroup(data)&#13;&#10;&#9;&#13;&#10;&#9;local doubleByteParams = {&#13;&#10;&#9;&#9;[&quot;VSS1&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VSS2&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VSS3&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VSS4&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO1&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO2&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO3&quot;] = true,&#13;&#10;&#9;&#9;[&quot;VTUNO4&quot;] = true,&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;local newInstance = function(data)&#13;&#10;&#9;&#9;data = data or Kdata()&#13;&#10;&#9;&#9;return __KeyGroup:new{&#13;&#10;&#9;&#9;&#9;kdata = data,&#13;&#10;&#9;&#9;&#9;zones = {}, &#13;&#10;&#9;&#9;&#9;updating = false,&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;KeyGroup&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __KeyGroup ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(data)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;KeyGroup&quot;)&#13;&#10;&#13;&#10;&#9;__KeyGroup = Object()&#13;&#10;&#13;&#10;&#9;function __KeyGroup:numZones()&#13;&#10;&#9;&#9;return #self.zones&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:getZones()&#13;&#10;&#9;&#9;return self.zones&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:storeParamEdit(khead)&#13;&#10;&#9;&#9;if self.updating then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;self.kdata:storeKhead(khead)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:setLowNote(lowNote)&#13;&#10;&#9;&#9;self.kdata:storeNibbles(&quot;LONOTE&quot;, midiSrvc:toNibbles(lowNote))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:setHighNote(highNote)&#13;&#10;&#9;&#9;self.kdata:storeNibbles(&quot;HINOTE&quot;, midiSrvc:toNibbles(highNote))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:getParamValue(blockId)&#13;&#10;&#9;&#9;return self.kdata:getKdataValue(blockId)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:insertZone(zoneIndex, theZone)&#13;&#10;&#9;&#9;table.insert(self.zones, zoneIndex, theZone)&#9;&#9;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:addSampleZone(sampleName)&#13;&#10;&#9;&#9;local sampleZone = Zone()&#13;&#10;&#9;&#9;sampleZone:setSample(sampleName)&#13;&#10;&#9;&#9;self:insertZone(#self.zones + 1, sampleZone)&#13;&#10;&#9;&#9;return sampleZone&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:addFileZone(file)&#13;&#10;&#9;&#9;local fileZone = Zone()&#13;&#10;&#9;&#9;fileZone:setFile(file)&#13;&#10;&#9;&#9;self:insertZone(#self.zones + 1, fileZone)&#13;&#10;&#9;&#9;return fileZone&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:replaceZoneWithStereoSample(zoneIndex, sampleNameLeft, sampleNameRight)&#13;&#10;&#9;&#9;local leftZone = self.zones[zoneIndex]&#13;&#10;&#9;&#9;leftZone:setSample(sampleNameLeft)&#13;&#10;&#9;&#9;self.kdata:storeNibbles(string.format(&quot;VLOUD%d&quot;, zoneIndex), midiSrvc:toNibbles(63))&#13;&#10;&#13;&#10;&#9;&#9;if self:numZones() &lt; 4 then&#13;&#10;&#9;&#9;&#9;self.kdata:storeNibbles(string.format(&quot;VPANO%d&quot;, zoneIndex), midiSrvc:toNibbles(0))&#13;&#10;&#13;&#10;&#9;&#9;&#9;local rightZone = Zone()&#13;&#10;&#9;&#9;&#9;rightZone:setSample(sampleNameRight)&#13;&#10;&#9;&#9;&#9;self:insertZone(zoneIndex + 1, rightZone)&#13;&#10;&#9;&#9;&#9;self.kdata:storeNibbles(string.format(&quot;VPANO%d&quot;, zoneIndex + 1), midiSrvc:toNibbles(101))&#13;&#10;&#9;&#9;&#9;self.kdata:storeNibbles(string.format(&quot;VLOUD%d&quot;, zoneIndex + 1), midiSrvc:toNibbles(63))&#13;&#10;&#9;&#9;end&#9;&#9;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:replaceWithMonoSample(zoneIndex, sampleName)&#13;&#10;&#9;&#9;local zone = self.zones[zoneIndex]&#13;&#10;&#9;&#9;zone:setSample(sampleNameLeft)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:setUpdating(updating)&#13;&#10;&#9;&#9;self.updating = updating&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __KeyGroup:isUpdating()&#13;&#10;&#9;&#9;return self.updating&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#13;&#10;&#9;function __KeyGroup:toString()&#13;&#10;&#9;&#9;return self.kdata:toString()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising KeyGroup&quot;)&#13;&#10;&#9;return newInstance(data)&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="af1512381e44471e8608a950b3582492"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="ProgramList" luaMethodCode="function ProgramList(data)&#13;&#10;&#13;&#10;&#9;local newInstance = function(data)&#13;&#10;&#9;&#9;return __ProgramList:new {&#13;&#10;&#9;&#9;&#9;activeProgram = -1,&#13;&#10;&#9;&#9;&#9;list = {},&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;ProgramList&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __ProgramList ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(data)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;ProgramList&quot;)&#13;&#10;&#13;&#10;&#9;__ProgramList = Dispatcher()&#13;&#10;&#13;&#10;&#9;function __ProgramList:getNumPrograms()&#13;&#10;&#9;&#9;return table.getn(self.list)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:getProgram(index)&#13;&#10;&#9;&#9;return self.list[index]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:addProgram(program)&#13;&#10;&#9;&#9;table.insert(self.list, program)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:removeProgram(index)&#13;&#10;&#9;&#9;table.remove(self.list, index)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:activateProgram(index)&#13;&#10;&#9;&#9;self.activeProgram = index&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:getActiveProgram()&#13;&#10;&#9;&#9;log:fine(&quot;[getActiveProgram] Active program %d&quot;, self.activeProgram)&#13;&#10;&#9;&#9;if self.activeProgram &lt;= 0 then&#13;&#10;&#9;&#9;&#9;return nil&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return self.list[self.activeProgram]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:setActiveProgram(activeProgNum)&#13;&#10;&#9;&#9;--log:fine(&quot;Active program before %d&quot;, self.activeProgram)&#13;&#10;&#9;&#9;self.activeProgram = activeProgNum&#13;&#10;&#9;&#9;--log:fine(&quot;Active program after %d&quot;, self.activeProgram)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramList:hasProgram(programName)&#13;&#10;&#9;&#9;for k,program in pairs(self.list) do&#13;&#10;&#9;&#9;&#9;if program:getName() == programName then&#13;&#10;&#9;&#9;&#9;&#9;return true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return false&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising ProgramList&quot;)&#13;&#10;&#9;return newInstance(data)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="227fe72cf067479282c9e1de09a0f566"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="SampleList" luaMethodCode="function SampleList(data)&#13;&#10;&#13;&#10;&#9;local newInstance = function(data)&#13;&#10;&#9;&#9;return __SampleList:new {&#13;&#10;&#9;&#9;&#9;list = {},&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;DrumMap&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#10;&#13;&#10;&#9;if __SampleList ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(data)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;SampleList&quot;)&#13;&#10;&#13;&#10;&#9;__SampleList = Dispatcher()&#13;&#10;&#13;&#10;&#9;function __SampleList:sampleExists(name)&#13;&#10;&#9;&#9;return self.list[name]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleList:getSampleList()&#13;&#10;&#9;&#9;return self.list&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleList:getSampleNames()&#13;&#10;&#9;&#9;local sampleListString = &quot;&quot;&#10;&#9;&#9;for k,v in pairs(self.list) do&#10;&#9;&#9;&#9;if sampleListString == &quot;&quot; then&#10;&#9;&#9;&#9;&#9;sampleListString = k&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;sampleListString = string.format(&quot;%s\n%s&quot;, sampleListString, k)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return sampleListString&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleList:addSample(name)&#13;&#10;&#9;&#9;self.list[name] = true&#13;&#10;&#9;&#9;table.sort(self.list)&#13;&#10;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleList:addSamples(slist)&#13;&#10;&#9;&#9;local modified = false&#13;&#10;&#9;&#9;local sampleNames = slist:getSampleList()&#13;&#10;&#9;&#9;for k,v in pairs(sampleNames) do&#13;&#10;&#9;&#9;&#9;if not self:sampleExists(v) then&#13;&#10;&#9;&#9;&#9;&#9;self.list[v] = true&#13;&#10;&#9;&#9;&#9;&#9;modified = true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;table.sort(self.list)&#13;&#10;&#13;&#10;&#9;&#9;if modified then&#13;&#10;&#9;&#9;&#9;self:notifyListeners()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising SampleList&quot;)&#13;&#10;&#9;return newInstance(data)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="b6f0905ac1834195b0bd137453563d8e"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Zone" luaMethodCode="function Zone()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __Zone:new {&#13;&#10;&#9;&#9;&#9;sampleLoaded = false,&#13;&#10;&#9;&#9;&#9;file = nil,&#13;&#10;&#9;&#9;&#9;fileName = nil,&#13;&#10;&#9;&#9;&#9;sampleName = nil,&#13;&#10;&#9;&#9;&#9;[LUA_CLASS_NAME] = &quot;Zone&quot;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __Zone ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;Zone&quot;)&#13;&#10;&#13;&#10;&#9;__Zone = Object()&#13;&#10;&#13;&#10;&#9;function __Zone:setSample(sampleName)&#13;&#10;&#9;&#9;self.sampleLoaded = true&#13;&#10;&#9;&#9;self.sampleName = sampleName&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Zone:setFile(file)&#13;&#10;&#9;&#9;self.sampleLoaded = false&#13;&#10;&#9;&#9;self.file = file&#13;&#10;&#9;&#9;self.fileName = file:getFileName()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Zone:isSampleLoaded()&#13;&#10;&#9;&#9;return self.sampleLoaded&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Zone:getSampleName()&#13;&#10;&#9;&#9;if self:isSampleLoaded() then&#13;&#10;&#9;&#9;&#9;--log:info(&quot;sample loaded %s&quot;, self.sampleName))&#13;&#10;&#9;&#9;&#9;return self.sampleName&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;--log:info(&quot;sample not loaded %s&quot;, self.fileName))&#13;&#10;&#9;&#9;&#9;return self.fileName&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Zone:matchesSampleName(sampleName)&#13;&#10;&#9;&#9;local monoSampleName = v&#13;&#10;&#9;&#9;if string.sub(v, #v - 2, #v) == &quot;-L&quot; or string.sub(v, #v - 2, #v) == &quot;-R&quot; then&#13;&#10;&#9;&#9;&#9;monoSampleName = string.sub(v, 1, #v - 2)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising Zone&quot;)&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="61679a25bc8b46ecb3d8a4a5dc0277bc"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="service" uuid="7b024567336b4a5b932b7792fb9fcd90">
        <luaMethod luaMethodName="DrumMapService" luaMethodCode="function DrumMapService()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __DrumMapService:new()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __DrumMapService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;DrumMapService&quot;)&#13;&#10;&#9;local MAX_FLOPPY_SIZE = 1400000&#13;&#10;&#9;local MAX_SAMPLE_NAME_SIZE = 10&#13;&#10;&#13;&#10;&#9;__DrumMapService = Object()&#13;&#10;&#13;&#10;&#9;local getFileSize = function(file)&#13;&#10;&#9;&#9;local wavFile = io.open(file:getFullPathName(), &quot;r&quot;)&#13;&#10;&#9;&#9;local size = wavFile:seek(&quot;end&quot;)    -- get file size&#13;&#10;&#9;&#9;wavFile:close()&#13;&#10;&#9;&#9;return size&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:setDrumMap(drumMap)&#13;&#10;&#9;&#9;self.drumMap = drumMap&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:setSampleList(sampleList)&#13;&#10;&#9;&#9;self.sampleList = sampleList&#13;&#10;&#9;&#9;local sampleListListener = function(sl)&#13;&#10;&#9;&#9;&#9;self:updateDrumMap(sl)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;sampleList:addListener(sampleListListener)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:getSamplerFileName(filename)&#9;&#13;&#10;&#9;&#9;local sampleName = string.upper (filename)&#13;&#10;&#9;&#9;if #sampleName &gt; MAX_SAMPLE_NAME_SIZE then&#13;&#10;&#9;&#9;&#9;sampleName = string.sub(sampleName, 1, MAX_SAMPLE_NAME_SIZE)&#13;&#10;&#9;&#9;elseif #sampleName &lt; MAX_SAMPLE_NAME_SIZE then&#13;&#10;&#9;&#9;&#9;sampleName = sampleName .. string.rep(&quot; &quot;, MAX_SAMPLE_NAME_SIZE - #sampleName)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return sampleName&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:findStereoCounterpart(sampleList, stereoPartnerName, arrayOffset)&#13;&#10;&#9;&#9;--log:fine(&quot;findStereoCounterpart %s&quot;, stereoPartnerName))&#13;&#10;&#9;&#9;for k,v in pairs(sampleList) do&#13;&#10;&#9;&#9;&#9;if type(v) ~= &quot;string&quot; and v[arrayOffset] == stereoPartnerName then&#13;&#10;&#9;&#9;&#9;&#9;return k&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return -1&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:generateStereoSampleList(sampleList)&#13;&#10;&#9;&#9;local retVal = {}&#13;&#10;&#9;&#9;local leftIndex = 1&#13;&#10;&#9;&#9;local rightIndex = 2&#13;&#10;&#13;&#10;&#9;&#9;for name,v in pairs(sampleList) do&#13;&#10;&#9;&#9;&#9;local suffix = string.sub(name, #name - 1, #name)&#10;&#9;&#9;&#9;if suffix == &quot;-L&quot; then&#13;&#10;&#9;&#9;&#9;&#9;-- Search for -R counterpart&#13;&#10;&#9;&#9;&#9;&#9;local matchingIndex = self:findStereoCounterpart(retVal, string.format(&quot;%s%s&quot;, string.sub(name, 1, #name - 1), &quot;R&quot;), rightIndex)&#13;&#10;&#9;&#9;&#9;&#9;if matchingIndex &gt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;retVal[matchingIndex][leftIndex] = name&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;local temp = {}&#13;&#10;&#9;&#9;&#9;&#9;&#9;temp[leftIndex] = name&#13;&#10;&#9;&#9;&#9;&#9;&#9;table.insert(retVal, temp)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif suffix == &quot;-R&quot; then&#13;&#10;&#9;&#9;&#9;&#9;-- Search for -L counterpart&#13;&#10;&#9;&#9;&#9;&#9;local matchingIndex = self:findStereoCounterpart(retVal, string.format(&quot;%s%s&quot;, string.sub(name, 1, #name - 1), &quot;L&quot;), leftIndex)&#13;&#10;&#9;&#9;&#9;&#9;if matchingIndex &gt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;retVal[matchingIndex][rightIndex] = name&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;local temp = {}&#13;&#10;&#9;&#9;&#9;&#9;&#9;temp[rightIndex] = name&#13;&#10;&#9;&#9;&#9;&#9;&#9;table.insert(retVal, temp)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;-- Mono sample&#10;&#9;&#9;&#9;&#9;table.insert(retVal, name)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return retVal&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:getUnloadedMatchingZoneIndex(keyGroup, monoSampleName)&#13;&#10;&#9;&#9;local zones = keyGroup:getZones()&#13;&#10;&#9;&#9;for m, zone in pairs(zones) do&#13;&#10;&#9;&#9;&#9;local sampleName = self:getSamplerFileName(zone:getSampleName())&#13;&#10;&#9;&#9;&#9;if not zone:isSampleLoaded() and sampleName == monoSampleName then&#13;&#10;&#9;&#9;&#9;&#9;return m&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return 0&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#13;&#10;&#9;function __DrumMapService:getFloppyUsagePercent()&#13;&#10;&#9;&#9;return (self.drumMap:getCurrentFloppyUsage() / MAX_FLOPPY_SIZE) * 100&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:updateDrumMap(sl)&#13;&#10;&#9;&#9;local keyGroups = self.drumMap:getKeyGroups()&#13;&#10;&#9;&#9;local list = sl:getSampleList()&#13;&#10;&#9;&#9;local stereoSampleList = self:generateStereoSampleList(list)&#13;&#10;&#9;&#9;for k, stereoSample in pairs(stereoSampleList) do&#13;&#10;&#9;&#9;&#9;for l, keyGroup in pairs(keyGroups) do&#13;&#10;&#9;&#9;&#9;&#9;local matchingZoneIndex = 0&#13;&#10;&#9;&#9;&#9;&#9;if type(stereoSample) == &quot;string&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Mono sample&#13;&#10;&#9;&#9;&#9;&#9;&#9;--log:fine(&quot;[new] Mono sample %s&quot;, stereoSample)&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchingZoneIndex = self:getUnloadedMatchingZoneIndex(keyGroup, stereoSample)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;--log:fine(&quot;[new] Stereo sample %s, %s %s&quot;, stereoSample[1], stereoSample[2], string.sub(stereoSample[1], 1, #stereoSample[1] - 2))&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Stereo sample&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchingZoneIndex = self:getUnloadedMatchingZoneIndex(keyGroup, string.sub(stereoSample[1], 1, #stereoSample[1] - 2))&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;if matchingZoneIndex &gt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;self.drumMap:replaceKeyGroupZoneWithSample(l, matchingZoneIndex, stereoSample)&#13;&#10;&#9;&#9;&#9;&#9;&#9;break&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:isValidSampleFile(file)&#13;&#10;&#9;&#9;return file:getFileExtension() == &quot;.wav&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapService:assignSample()&#13;&#10;&#9;&#9;local selectedSample = self.drumMap:getSelectedSample()&#13;&#10;&#9;&#9;if type(selectedSample) == &quot;string&quot; then&#13;&#10;&#9;&#9;&#9;-- __Sample is already on S2k&#13;&#10;&#9;&#9;&#9;self.drumMap:addSampleToSelectedKeyGroup(selectedSample)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;-- __Sample is on host&#13;&#10;&#9;&#9;&#9;local sampleSize = getFileSize(selectedSample)&#13;&#10;&#9;&#9;&#9;if sampleSize &gt; MAX_FLOPPY_SIZE then&#13;&#10;&#9;&#9;&#9;&#9;return &quot;Samples larger than one floppy are not\nsupported.&quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;&#9;log:fine(&quot;Assigning sample...&quot;)&#13;&#10;&#9;&#9;&#9;local numSamplesOnKg = self.drumMap:getNumSamplesOnSelectedKeyGroup()&#13;&#10;&#9;&#9;&#9;if numSamplesOnKg == 4 then&#13;&#10;&#9;&#9;&#9;&#9;return &quot;You can only add four samples per key group&quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;local numFloppies = self.drumMap:getNumFloppies()&#13;&#10;&#9;&#9;&#9;if numFloppies == 0 then&#13;&#10;&#9;&#9;&#9;&#9;self.drumMap:addNewFloppy()&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;log:fine(&quot;current usage: %d, sampleSize: %d&quot;, self.drumMap:getCurrentFloppyUsage(), sampleSize)&#13;&#10;&#9;&#9;&#9;if self.drumMap:getCurrentFloppyUsage() + sampleSize &gt; MAX_FLOPPY_SIZE then&#13;&#10;&#9;&#9;&#9;&#9;self.drumMap:addNewFloppy()&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;self.drumMap:insertToCurrentFloppy(selectedSample)&#13;&#10;&#9;&#9;&#9;self.drumMap:setCurrentFloppyUsage(self.drumMap:getCurrentFloppyUsage() + sampleSize)&#13;&#10;&#9;&#9;&#9;self.drumMap:addFileToSelectedKeyGroup(selectedSample)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;return &quot;Transfer samples to sampler by pressing \&quot;Launch\&quot;&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return newInstance()&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="9bae3de006dc4200a8df26aa68740873"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="S2kDieService" luaMethodCode="function S2kDieService(s2kDieP, setfdprmP)&#13;&#10;&#13;&#10;&#9;local newInstance = function(s2kDieP, setfdprmP)&#13;&#10;&#9;&#9;return __S2kDieService:new {&#13;&#10;&#9;&#9;&#9;s2kDiePath = s2kDieP, &#13;&#10;&#9;&#9;&#9;setfdprmPath = setfdprmP,&#13;&#10;&#9;&#9;&#9;log = Logger(&quot;S2kDieService&quot;)&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __S2kDieService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(s2kDieP, setfdprmP)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__S2kDieService = Object()&#13;&#10;&#9;&#13;&#10;&#9;function getFilePath(fileDir, fileName)&#13;&#10;&#9;&#9;return string.format(&quot;%s%s%s&quot;, fileDir, pathseparator, fileName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function getFileName(filePath)&#13;&#10;&#9;&#9;local lastSlash = string.find(filePath, string.format(&quot;%s[&#94;%s]*$&quot;, pathseparator, pathseparator))&#13;&#10;&#9;&#9;return string.sub(filePath, lastSlash + 1)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function getScriptName(index)&#13;&#10;&#9;&#9;return string.format(&quot;script-%d.s2k&quot;, index)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __S2kDieService:getS2kDiePath()&#13;&#10;&#9;&#9;return self.s2kDiePath&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __S2kDieService:setS2kDiePath(s2kDiePath)&#13;&#10;&#9;&#9;self.s2kDiePath = s2kDiePath&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __S2kDieService:setFdprmPath(setfdprmPath)&#13;&#10;&#9;&#9;self.setfdprmPath = setfdprmPath&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __S2kDieService:getNumGeneratedSamples(logFilePath)&#13;&#10;&#9;&#9;self.log:info(&quot;%s&quot;, logFilePath)&#13;&#10;&#9;&#9;local logFile = io.open(logFilePath, &quot;rb&quot;)&#13;&#10;&#9;&#9;local highestValue = -1&#13;&#10;&#9;&#9;if logFile ~= nil then&#13;&#10;&#9;&#9;&#9;local content = logFile:read(&quot;*all&quot;)&#13;&#10;&#9;&#9;&#9;self.log:info(content)&#13;&#10;&#9;&#9;&#9;logFile:close()&#13;&#10;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;for value in string.gfind(content, &quot;%[(%d+)%]&quot;) do&#13;&#10;&#9;&#9;&#9;&#9;local numValue = tonumber(value) + 1&#13;&#10;&#9;&#9;&#9;&#9;self.log:info(&quot;[getNumGeneratedSamples] %d&quot;, numValue)&#13;&#10;&#9;&#9;&#9;&#9;if numValue &gt; highestValue then&#13;&#10;&#9;&#9;&#9;&#9;&#9;highestValue = numValue&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;return highestValue&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __S2kDieService:s2kDieLauncher()&#13;&#10;&#9;&#9;local s2kDieRoot = self.s2kDiePath&#13;&#10;&#9;&#9;local launcher = function(variables)&#13;&#10;&#9;&#9;&#9;self.log:info(&quot;Generating scripts...&quot;)&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Generate s2kDie script&#13;&#10;&#9;&#9;&#9;local scriptDir = variables[&quot;scriptDir&quot;]&#13;&#10;&#9;&#9;&#9;local scriptIndex = variables[&quot;scriptIndex&quot;]&#13;&#10;&#9;&#9;&#9;local scriptPath = variables[&quot;scriptPath&quot;]&#13;&#10;&#9;&#9;&#9;local wavFiles = variables[&quot;wavFiles&quot;]&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;local fileName = getScriptName(scriptIndex)&#13;&#10;&#9;&#9;&#9;local filePath = getFilePath(scriptDir, fileName)&#13;&#10;&#9;&#9;&#9;local file = io.open(filePath, &quot;w+&quot;)&#13;&#10;&#9;&#9;&#9;file:write(&quot;BLANK S2000&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(string.format(&quot;VOL %s&quot;, fileName))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;for key, wavFile in pairs(wavFiles) do&#13;&#10;&#9;&#9;&#9;&#9;file:write(string.format(&quot;WLOAD %s&quot;, getFileName(wavFile:getFullPathName())))&#13;&#10;&#9;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;local imgPath = getFilePath(scriptDir, string.format(&quot;floppy-%d.img&quot;, scriptIndex))&#13;&#10;&#9;&#9;&#9;file:write(string.format(&quot;SAVE %s&quot;, imgPath))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(&quot;DIR&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:close()&#13;&#10;&#9;&#9;&#9;variables[&quot;imgPath&quot;] = imgPath&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Append commands to shell script&#13;&#10;&#9;&#9;&#9;local script = io.open(scriptPath, &quot;a&quot;)&#13;&#10;&#9;&#9;&#9;for key, wavFile in pairs(wavFiles) do&#13;&#10;&#9;&#9;&#9;&#9;wavPath = wavFile:getFullPathName()&#13;&#10;&#9;&#9;&#9;&#9;script:write(string.format(&quot;cp %s %s&quot;, wavPath, getFilePath(scriptDir, getFileName(wavPath))))&#13;&#10;&#9;&#9;&#9;&#9;script:write(eol)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;script:write(string.format(&quot;cd %s&quot;, scriptDir))&#13;&#10;&#9;&#9;&#9;script:write(eol)&#13;&#10;&#9;&#9;&#9;script:write(string.format(&quot;php %s %s&quot;, s2kDieRoot:getFullPathName(), filePath, filePath))&#13;&#10;&#9;&#9;&#9;script:write(eol)&#13;&#10;&#9;&#9;&#9;script:close()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return launcher&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising S2kDieService&quot;)&#13;&#10;&#9;return newInstance(s2kDieP, setfdprmP)&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="726522e03407475ab4afe26c9be27855"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="ProcessService" luaMethodCode="function ProcessService(pl)&#13;&#10;&#13;&#10;&#9;local newInstance = function(pl)&#13;&#10;&#9;&#9;return __ProcessService:new{&#13;&#10;&#9;&#9;&#9;processListener = pl,&#13;&#10;&#9;&#9;&#9;curr_transfer_proc = nil&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __ProcessService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance(pl)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;ProcessService&quot;)&#13;&#10;&#9;local MIDI_POLL_THREAD_ID = 33&#13;&#10;&#13;&#10;&#9;__ProcessService = Object()&#13;&#10;&#13;&#10;&#9;local getFileContents = function(filepath)&#13;&#10;&#9;&#9;local f = io.open(filepath, &quot;rb&quot;)&#13;&#10;&#9;&#9;local content = &quot;&quot;&#13;&#10;&#9;&#9;if f ~= nil then&#13;&#10;&#9;&#9;&#9;content = f:read(&quot;*all&quot;)&#13;&#10;&#9;&#9;&#9;f:close()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;return content&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local macOsXExecutor = function(scriptDir, scriptName)&#13;&#10;&#9;&#9;os.execute(string.format(&quot;chmod 755 %s/%s&quot;, scriptDir, scriptName))&#13;&#10;&#9;&#9;os.execute(string.format(&quot;pushd %s; ./%s &gt; %s.log 2&gt;&amp;1&quot;, scriptDir, scriptName, scriptName))&#13;&#10;&#13;&#10;&#9;&#9;local logPath = string.format(&quot;%s/%s.log&quot;, scriptDir, scriptName)&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;local windowsExecutor = function(scriptDir, scriptName)&#13;&#10;&#9;&#9;local scriptPath = string.format(&quot;%s\\%s&quot;, scriptDir, scriptName)&#13;&#10;&#9;&#9;local script = io.open(scriptPath, &quot;a&quot;)&#13;&#10;&#9;&#9;script:write(eol)&#13;&#10;&#9;&#9;script:write(&quot;exit&quot;)&#13;&#10;&#9;&#9;script:write(eol)&#13;&#10;&#9;&#9;script:close()&#13;&#10;&#13;&#10;&#9;&#9;os.execute(string.format(&quot;cmd /C start /B %s &#94;&gt; %s.log&quot;, scriptPath, scriptPath))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProcessService:execute(proc)&#13;&#10;&#9;&#9;if self.curr_transfer_proc == nil then&#13;&#10;&#9;&#9;&#9;self.curr_transfer_proc = proc&#13;&#10;&#13;&#10;&#9;&#9;&#9;if self.processListener ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;self.processListener(true)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;log:info(&quot;Execute&quot;)&#13;&#10;&#9;&#9;&#9;if proc.midiCallback ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;log:info(&quot;Adding midiCallback&quot;)&#13;&#10;&#9;&#9;&#9;&#9;midiSrvc:setMidiReceived(proc.midiCallback)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;if proc.midiSender ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;log:info(&quot;Launching midiSender&quot;)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;timer:stopTimer(MIDI_POLL_THREAD_ID)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;timer:setCallback (MIDI_POLL_THREAD_ID, proc.midiSender)&#13;&#10;&#9;&#9;&#9;&#9;log:info(&quot;Starting timer %d, with interval %d&quot;, MIDI_POLL_THREAD_ID, proc.interval)&#13;&#10;&#9;&#9;&#9;&#9;timer:startTimer(MIDI_POLL_THREAD_ID, proc.interval)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;if proc:hasLauncher() then&#13;&#10;&#9;&#9;&#9;&#9;proc:build()&#13;&#10;&#9;&#9;&#9;&#9;local scriptPath = proc:getScriptPath()&#13;&#10;&#9;&#9;&#9;&#9;local scriptName = proc:getLaunchName()&#13;&#10;&#9;&#9;&#9;&#9;if operatingSystem == &quot;win&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;log:info(&quot;[hxcLaunchOnWindows] %s - %s:&quot;, scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;&#9;windowsExecutor(scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;log:info(&quot;[hxcLaunchOnMacOsX] %s - %s&quot;, scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;&#9;macOsXExecutor(scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;log:info(&quot;Done&quot;)&#13;&#10;&#9;&#9;&#9;return true&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return false&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProcessService:abort()&#13;&#10;&#9;&#9;log:info(&quot;abort()&quot;)&#13;&#10;&#9;&#9;if self.curr_transfer_proc == nil then&#13;&#10;&#9;&#9;&#9;log:info(&quot;No active process to abort!&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;timer:stopTimer(MIDI_POLL_THREAD_ID)&#13;&#10;&#9;&#9;&#9;midiSrvc:clearMidiReceived()&#13;&#10;&#13;&#10;&#9;&#9;&#9;if self.curr_transfer_proc:hasAborter() then&#13;&#10;&#9;&#9;&#9;&#9;local scriptPath = self.curr_transfer_proc:getScriptPath()&#13;&#10;&#9;&#9;&#9;&#9;local scriptName = self.curr_transfer_proc:getAbortName()&#13;&#10;&#9;&#9;&#9;&#9;if operatingSystem == &quot;win&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;log:info(&quot;[hxcLaunchOnWindows] %s - %s:&quot;, scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;&#9;windowsExecutor(scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;log:info(&quot;[hxcLaunchOnMacOsX] %s - %s&quot;, scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;&#9;macOsXExecutor(scriptPath, scriptName)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;if self.processListener ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;self.processListener(false)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;self.curr_transfer_proc = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising ProcessService&quot;)&#13;&#10;&#9;return newInstance(pl)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="862e750e8ee84dff812fc5e2bfea5a39"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="HxcService" luaMethodCode="function HxcService()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;local hxcPath = File(panel:getComponent(&quot;hxcPathLabel&quot;):getText())&#13;&#10;&#9;&#9;local logger = Logger(&quot;HxcService&quot;)&#13;&#10;&#13;&#10;&#9;&#9;local instance = __HxcService:new {&#13;&#10;&#9;&#9;&#9;hxc_pipe = &quot;HXC_PIPE&quot;,&#13;&#10;&#9;&#9;&#9;hxc_cmd_log = &quot;hxc_cmd.log&quot;,&#13;&#10;&#9;&#9;&#9;hxc_child_pid = &quot;hxc_child_pid&quot;,&#13;&#10;&#9;&#9;&#9;hxc_launch_timeout = 100,&#13;&#10;&#9;&#9;&#9;hxc_timer_id = 20,&#13;&#10;&#9;&#9;&#9;hxc_path = hxcPath:getFullPathName(),&#13;&#10;&#9;&#9;&#9;hxc_root = hxcPath:getParentDirectory():getFullPathName(),&#13;&#10;&#9;&#9;&#9;log = logger&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;logger:info(&quot;HxC constants initialised.&quot;)&#13;&#10;&#9;&#9;return instance&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __HxcService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__HxcService = Object()&#13;&#10;&#13;&#10;&#9;function __HxcService:setHxcPath(hxcPath)&#13;&#10;&#9;&#9;self.hxc_path = hxcPath:getFullPathName()&#13;&#10;&#9;&#9;self.hxc_root = hxcPath:getParentDirectory():getFullPathName()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getMacOsXLauncher()&#13;&#10;&#9;&#9;local launcher = function (variables)&#13;&#10;&#9;&#9;&#9;local scriptPath = variables[&quot;scriptPath&quot;]&#13;&#10;&#9;&#9;&#9;local imgPath = variables[&quot;imgPath&quot;]&#13;&#10;&#13;&#10;&#9;&#9;&#9;local file = io.open(scriptPath, &quot;a&quot;)&#13;&#10;&#9;&#9;&#9;file:write(&quot;#!/bin/bash\n&quot;)&#13;&#10;&#9;&#9;&#9;--file:write(&quot;set -x -v\n&quot;)&#13;&#10;&#9;&#9;&#9;file:write(&quot;set -e\n&quot;)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;&#9;file:write(string.format(&quot;pipe=%s&quot;, hxc_pipe))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(&quot;if [ -p \&quot;${pipe}\&quot; ]; then rm -rf ${pipe}; fi&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(&quot;mkfifo ${pipe}&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#13;&#10;&#9;&#9;&#9;local hxc_cmd = self.getHxcCommand(imgPath)&#13;&#10;&#9;&#9;&#9;file:write(string.format(&quot;./%s &lt; ${pipe}&quot;, hxc_cmd))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:close()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return launcher&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getMacOsXAborter()&#13;&#10;&#9;&#9;local aborter = function (scriptPath)&#13;&#10;&#9;&#9;&#9;local file = io.open(scriptPath, &quot;a&quot;)&#13;&#10;&#9;&#9;&#9;file:write(&quot;#!/bin/bash\n&quot;)&#13;&#10;&#9;&#9;&#9;--file:write(&quot;set -x -v\n&quot;)&#13;&#10;&#9;&#9;&#9;file:write(&quot;set -e\n&quot;)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;&#9;file:write(&quot;echo \&quot;Attempting to kill hxcfe...\&quot;&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(string.format(&quot;echo \&quot;q\n\&quot; &gt; %s&quot;, hxc_pipe))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:close()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return aborter&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getWindowsAborter()&#13;&#10;&#9;&#9;local aborter = function(scriptPath)&#13;&#10;&#9;&#9;&#9;local file = io.open(scriptPath, &quot;a&quot;)&#13;&#10;&#9;&#9;&#9;file:write(&quot;for /f \&quot;tokens=2 delims=,\&quot; %%a in ('tasklist /v /fo csv &#94;| findstr /i \&quot;hxcfe\&quot;') do set \&quot;$PID=%%a\&quot;&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(&quot;taskkill /F /PID %$PID%&quot;)&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:close()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return aborter&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getWindowsLauncher()&#13;&#10;&#9;&#9;local launcher = function(variables)&#13;&#10;&#9;&#9;&#9;local scriptPath = variables[&quot;scriptPath&quot;]&#13;&#10;&#9;&#9;&#9;local imgPath = variables[&quot;imgPath&quot;]&#13;&#10;&#13;&#10;&#9;&#9;&#9;self.log:info(&quot;Generating %s with image %s&quot;, scriptPath, imgPath)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;&#9;local file = io.open(scriptPath, &quot;a&quot;)&#13;&#10;&#9;&#9;&#9;file:write(string.format(&quot;cd %s&quot;, self.hxc_root))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:write(self:getHxcCommand(imgPath))&#13;&#10;&#9;&#9;&#9;file:write(eol)&#13;&#10;&#9;&#9;&#9;file:close()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return launcher&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#13;&#10;&#9;function __HxcService:getHxcCommand(imgPath)&#13;&#10;&#9;&#9;return string.format(&quot;%s -uselayout:AKAIS3000_HD -finput:%s -usb:&quot;, self.hxc_path, imgPath)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getHxcPath()&#13;&#10;&#9;&#9;return self.hxc_path&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getHxcLauncher()&#13;&#10;&#9;&#9;if operatingSystem == &quot;win&quot; then&#13;&#10;&#9;&#9;&#9;return self:getWindowsLauncher()&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return self:getMacOsXLauncher()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __HxcService:getHxcAborter()&#13;&#10;&#9;&#9;if operatingSystem == &quot;win&quot; then&#13;&#10;&#9;&#9;&#9;return self:getWindowsAborter()&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return self:getMacOsXAborter()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising HxcService&quot;)&#13;&#10;&#9;return newInstance()&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="d21dcc56b6c846d585a7722a4ae6a010"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="MidiService" luaMethodCode="function MidiService()&#13;&#10;&#13;&#10;&#9;SAMPLE_NAME_LENG  = 12&#13;&#10;&#9;PROGRAM_NAME_LENG = 12&#13;&#10;&#9;PROGRAM_HEADER_SIZE = 70&#13;&#10;&#9;KEY_GROUP_HEADER_SIZE = 148&#13;&#10;&#9;local AKAI_ALPHABET = {'0','1','2','3','4','5','6','7','8','9',' ','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','#','+','-','.'}&#13;&#10;&#13;&#10;&#9;local POSITIVE_NUMBERS = {&#9;&#13;&#10;&#9;&#9;&quot;00 00 00 00&quot;, &quot;02 00 00 00&quot;, &quot;05 00 00 00&quot;, &quot;07 00 00 00&quot;, &quot;0A 00 00 00&quot;, &quot;0C 00 00 00&quot;, &quot;0F 00 00 00&quot;, &quot;02 01 00 00&quot;, &quot;04 01 00 00&quot;, &quot;07 01 00 00&quot;, &quot;09 01 00 00&quot;, &quot;0C 01 00 00&quot;, &#13;&#10;&#9;&#9;&quot;0E 01 00 00&quot;, &quot;01 02 00 00&quot;, &quot;03 02 00 00&quot;, &quot;06 02 00 00&quot;, &quot;09 02 00 00&quot;, &quot;0B 02 00 00&quot;, &quot;0E 02 00 00&quot;, &quot;00 03 00 00&quot;, &quot;03 03 00 00&quot;, &quot;05 03 00 00&quot;, &quot;08 03 00 00&quot;, &quot;0B 03 00 00&quot;, &#13;&#10;&#9;&#9;&quot;0D 03 00 00&quot;, &quot;00 04 00 00&quot;, &quot;02 04 00 00&quot;, &quot;05 04 00 00&quot;, &quot;07 04 00 00&quot;, &quot;0A 04 00 00&quot;, &quot;0C 04 00 00&quot;, &quot;0F 04 00 00&quot;, &quot;02 05 00 00&quot;, &quot;04 05 00 00&quot;, &quot;07 05 00 00&quot;, &quot;09 05 00 00&quot;, &#13;&#10;&#9;&#9;&quot;0C 05 00 00&quot;, &quot;0E 05 00 00&quot;, &quot;01 06 00 00&quot;, &quot;03 06 00 00&quot;, &quot;06 06 00 00&quot;, &quot;09 06 00 00&quot;, &quot;0B 06 00 00&quot;, &quot;0E 06 00 00&quot;, &quot;00 07 00 00&quot;, &quot;03 07 00 00&quot;, &quot;05 07 00 00&quot;, &quot;08 07 00 00&quot;, &#13;&#10;&#9;&#9;&quot;0B 07 00 00&quot;, &quot;0D 07 00 00&quot;, &quot;00 08 00 00&quot;, &quot;02 08 00 00&quot;, &quot;05 08 00 00&quot;, &quot;07 08 00 00&quot;, &quot;0A 08 00 00&quot;, &quot;0C 08 00 00&quot;, &quot;0F 08 00 00&quot;, &quot;02 09 00 00&quot;, &quot;04 09 00 00&quot;, &quot;07 09 00 00&quot;, &#13;&#10;&#9;&#9;&quot;09 09 00 00&quot;, &quot;0C 09 00 00&quot;, &quot;0E 09 00 00&quot;, &quot;01 0A 00 00&quot;, &quot;03 0A 00 00&quot;, &quot;06 0A 00 00&quot;, &quot;09 0A 00 00&quot;, &quot;0B 0A 00 00&quot;, &quot;0E 0A 00 00&quot;, &quot;00 0B 00 00&quot;, &quot;03 0B 00 00&quot;, &quot;05 0B 00 00&quot;, &#13;&#10;&#9;&#9;&quot;08 0B 00 00&quot;, &quot;0B 0B 00 00&quot;, &quot;0D 0B 00 00&quot;, &quot;00 0C 00 00&quot;, &quot;02 0C 00 00&quot;, &quot;05 0C 00 00&quot;, &quot;07 0C 00 00&quot;, &quot;0A 0C 00 00&quot;, &quot;0C 0C 00 00&quot;, &quot;0F 0C 00 00&quot;, &quot;02 0D 00 00&quot;, &quot;04 0D 00 00&quot;, &#13;&#10;&#9;&#9;&quot;07 0D 00 00&quot;, &quot;09 0D 00 00&quot;, &quot;0C 0D 00 00&quot;, &quot;0E 0D 00 00&quot;, &quot;01 0E 00 00&quot;, &quot;03 0E 00 00&quot;, &quot;06 0E 00 00&quot;, &quot;09 0E 00 00&quot;, &quot;0B 0E 00 00&quot;, &quot;0E 0E 00 00&quot;, &quot;00 0F 00 00&quot;, &quot;03 0F 00 00&quot;, &#13;&#10;&#9;&#9;&quot;05 0F 00 00&quot;, &quot;08 0F 00 00&quot;, &quot;0B 0F 00 00&quot;, &quot;0D 0F 00 00&quot;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;local NEGATIVE_NUMBERS = {&#13;&#10;&#9;&#9;&quot;00 00 0F 0F&quot;, &quot;0E 0F 0F 0F&quot;, &quot;0B 0F 0F 0F&quot;, &quot;09 0F 0F 0F&quot;, &quot;06 0F 0F 0F&quot;, &quot;04 0F 0F 0F&quot;, &quot;01 0F 0F 0F&quot;, &quot;0E 0E 0F 0F&quot;, &quot;0C 0E 0F 0F&quot;, &quot;09 0E 0F 0F&quot;, &quot;07 0E 0F 0F&quot;, &quot;04 0E 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;02 0E 0F 0F&quot;, &quot;0F 0D 0F 0F&quot;, &quot;0D 0D 0F 0F&quot;, &quot;0A 0D 0F 0F&quot;, &quot;07 0D 0F 0F&quot;, &quot;05 0D 0F 0F&quot;, &quot;02 0D 0F 0F&quot;, &quot;00 0D 0F 0F&quot;, &quot;0D 0C 0F 0F&quot;, &quot;0B 0C 0F 0F&quot;, &quot;08 0C 0F 0F&quot;, &quot;05 0C 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;03 0C 0F 0F&quot;, &quot;00 0C 0F 0F&quot;, &quot;0E 0B 0F 0F&quot;, &quot;0B 0B 0F 0F&quot;, &quot;09 0B 0F 0F&quot;, &quot;06 0B 0F 0F&quot;, &quot;04 0B 0F 0F&quot;, &quot;01 0B 0F 0F&quot;, &quot;0E 0A 0F 0F&quot;, &quot;0C 0A 0F 0F&quot;, &quot;09 0A 0F 0F&quot;, &quot;07 0A 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;04 0A 0F 0F&quot;, &quot;02 0A 0F 0F&quot;, &quot;0F 09 0F 0F&quot;, &quot;0D 09 0F 0F&quot;, &quot;0A 09 0F 0F&quot;, &quot;07 09 0F 0F&quot;, &quot;05 09 0F 0F&quot;, &quot;02 09 0F 0F&quot;, &quot;00 09 0F 0F&quot;, &quot;0D 08 0F 0F&quot;, &quot;0B 08 0F 0F&quot;, &quot;08 08 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;05 08 0F 0F&quot;, &quot;03 08 0F 0F&quot;, &quot;00 08 0F 0F&quot;, &quot;0E 07 0F 0F&quot;, &quot;0B 07 0F 0F&quot;, &quot;09 07 0F 0F&quot;, &quot;06 07 0F 0F&quot;, &quot;04 07 0F 0F&quot;, &quot;01 07 0F 0F&quot;, &quot;0E 06 0F 0F&quot;, &quot;0C 06 0F 0F&quot;, &quot;09 06 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;07 06 0F 0F&quot;, &quot;04 06 0F 0F&quot;, &quot;02 06 0F 0F&quot;, &quot;0F 05 0F 0F&quot;, &quot;0D 05 0F 0F&quot;, &quot;0A 05 0F 0F&quot;, &quot;07 05 0F 0F&quot;, &quot;05 05 0F 0F&quot;, &quot;02 05 0F 0F&quot;, &quot;00 05 0F 0F&quot;, &quot;0D 04 0F 0F&quot;, &quot;0B 04 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;08 04 0F 0F&quot;, &quot;05 04 0F 0F&quot;, &quot;03 04 0F 0F&quot;, &quot;00 04 0F 0F&quot;, &quot;0E 03 0F 0F&quot;, &quot;0B 03 0F 0F&quot;, &quot;09 03 0F 0F&quot;, &quot;06 03 0F 0F&quot;, &quot;04 03 0F 0F&quot;, &quot;01 03 0F 0F&quot;, &quot;0E 02 0F 0F&quot;, &quot;0C 02 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;09 02 0F 0F&quot;, &quot;07 02 0F 0F&quot;, &quot;04 02 0F 0F&quot;, &quot;02 02 0F 0F&quot;, &quot;0F 01 0F 0F&quot;, &quot;0D 01 0F 0F&quot;, &quot;0A 01 0F 0F&quot;, &quot;07 01 0F 0F&quot;, &quot;05 01 0F 0F&quot;, &quot;02 01 0F 0F&quot;, &quot;00 01 0F 0F&quot;, &quot;0D 00 0F 0F&quot;, &#13;&#10;&#9;&#9;&quot;0B 00 0F 0F&quot;, &quot;08 00 0F 0F&quot;, &quot;05 00 0F 0F&quot;, &quot;03 00 0F 0F&quot;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#13;&#10;&#9;local flip = function(t)&#13;&#10; &#9;&#9;local r = { }&#13;&#10; &#9;&#9;for k, v in pairs(t) do&#13;&#10;   &#9;&#9;&#9;r[v] = k -- overrides duplicate values if any&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return r&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local getFourBytes = function(buffer, offset)&#13;&#10;&#9;&#9;local block = MemoryBlock(4, true)&#13;&#10;&#9;&#9;buffer:copyTo(block, offset, 4)&#13;&#10;&#9;&#9;return block&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __MidiService:new {&#13;&#10;&#9;&#9;&#9;messageQueue = {},&#13;&#10;&#9;&#9;&#9;on_midi_received_func = nil,&#13;&#10;&#9;&#9;&#9;log = Logger(&quot;MidiService&quot;),&#13;&#10;&#9;&#9;&#9;alphabet = AKAI_ALPHABET,&#13;&#10;&#9;&#9;&#9;flipAlphabet = flip(AKAI_ALPHABET)&#13;&#10;&#9;&#9;}&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __MidiService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__MidiService = Object()&#13;&#10;&#13;&#10;&#9;function __MidiService:sendMidiMessage(syxMsg)&#13;&#10;&#9;&#9;panel:sendMidiMessageNow(syxMsg:toMidiMessage())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:sendMidiMessages(msgs)&#13;&#10;&#9;&#9;for k, v in pairs(msgs) do&#13;&#10;&#9;&#9;&#9;table.insert(self.messageQueue, v)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local nextMsg = table.remove(self.messageQueue)&#13;&#10;&#9;&#9;if nextMsg then&#13;&#10;&#9;&#9;&#9;self:sendMidiMessage(nextMsg)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:clearMidiReceived()&#13;&#10;&#9;&#9;self.on_midi_received_func = nil&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:setMidiReceived(midiCallback)&#13;&#10;&#9;&#9;self.on_midi_received_func = midiCallback&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:dispatchMidi(midi)&#13;&#10;&#9;&#9;local data = midi:getData()&#13;&#10;&#9;&#9;self.log:fine(&quot;[onMidiReceived] %d&quot;, data:getSize())&#13;&#10;&#9;&#9;if data:getByte(0) ~= 0xF0 or data:getByte(1) ~= 0x47 then&#13;&#10;&#9;&#9;&#9;self.log:info(&quot;Invalid S2K Sysex received!&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if self.on_midi_received_func ~= nil then&#13;&#10;&#9;&#9;&#9;self.on_midi_received_func(data)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;local nextMsg = table.remove(self.messageQueue)&#13;&#10;&#9;&#9;if nextMsg then&#13;&#10;&#9;&#9;&#9;self:sendMidiMessage(nextMsg)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:float2nibbles(value)&#13;&#10;&#9;&#9;local nibbles = MemoryBlock(4, true)&#13;&#10;&#9;&#9;local n = math.floor(math.abs(value) * 256 + 0.13)&#13;&#10;&#9;&#9;n = value &lt; 0 and 0x10000 - n or n&#13;&#10;&#9;&#9;for pos = 0, 3 do&#13;&#10;&#9;&#9;&#9;nibbles:setByte(pos, n % 16)&#13;&#10;&#9;&#9;&#9;n = math.floor(n / 16)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return nibbles&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:nibbles2float(memBlock, offset)&#13;&#10;&#9;&#9;local bi = BigInteger(0)&#13;&#10;&#9;&#9;bi:setBitRangeAsInt(0, 4, memBlock:getByte(offset))&#13;&#10;&#9;&#9;bi:setBitRangeAsInt(4, 4, memBlock:getByte(offset + 1))&#13;&#10;&#9;&#9;bi:setBitRangeAsInt(8, 4, memBlock:getByte(offset + 2))&#13;&#10;&#9;&#9;bi:setBitRangeAsInt(12, 4, memBlock:getByte(offset + 3))&#13;&#10;&#9;&#9;local n = 0&#13;&#10;&#9;&#9;for i = 0, 15 do&#13;&#10;&#9;&#9;&#9;local factor = math.pow(2, i - 8)&#13;&#10;&#9;&#9;&#9;n = n + bi:getBitRangeAsInt(i, 1) * factor&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return memBlock:getByte(offset + 3) &gt;= 0x8 and n - 256 or n&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toTuneBytes(value)&#13;&#10;&#9;&#9;local mm = math.floor(value / 100)&#13;&#10;&#9;&#9;if value &lt; 0 then&#13;&#10;&#9;&#9;&#9;mm = math.ceil(value / 100)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local ll = math.abs(value - mm * 100)&#13;&#10;&#9;&#9;return ll, mm&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toTuneBlock(value)&#13;&#10;&#9;&#9;local retval = self:float2nibbles(value / 100)&#13;&#10;&#9;&#9;self.log:info(&quot;toTuneBlock %d =&gt; %s&quot;, value, getFourBytes(retval, 0):toHexString(1))&#13;&#10;&#9;&#9;return retval&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:fromTuneBlock(block, offset)&#13;&#10;&#9;&#9;local retval = self:nibbles2float(block, offset)&#13;&#10;&#9;&#9;self.log:info(&quot;fromTuneBlock %s =&gt; %d&quot;, getFourBytes(block, offset):toHexString(1), retval)&#13;&#10;&#9;&#9;return retval * 100&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toVssBlock(value)&#13;&#10;&#9;&#9;local retval = MemoryBlock(4, true)&#13;&#10;&#9;&#9;local bigInt = BigInteger(value)&#13;&#10;&#9;&#9;if value &lt; 0 then&#13;&#10;&#9;&#9;&#9;retval:setByte(0, bit.band(bit.bnot(bigInt:getBitRangeAsInt(0, 4)) + 1, 0xF))&#13;&#10;&#9;&#9;&#9;retval:setByte(1, bit.band(bit.bnot(bigInt:getBitRangeAsInt(4, 4)), 0xF))&#13;&#10;&#9;&#9;&#9;retval:setByte(2, bit.band(bit.bnot(bigInt:getBitRangeAsInt(8, 4)), 0xF))&#13;&#10;&#9;&#9;&#9;retval:setByte(3, bit.band(bit.bnot(bigInt:getBitRangeAsInt(12, 4)), 0xF))&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;retval:setByte(0, bigInt:getBitRangeAsInt(0, 4))&#13;&#10;&#9;&#9;&#9;retval:setByte(1, bigInt:getBitRangeAsInt(4, 4))&#13;&#10;&#9;&#9;&#9;retval:setByte(2, bigInt:getBitRangeAsInt(8, 4))&#13;&#10;&#9;&#9;&#9;retval:setByte(3, bigInt:getBitRangeAsInt(12, 4))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;--self.log:info(&quot;toVssBlock %d =&gt; %s&quot;, value, getFourBytes(retval, 0):toHexString(1))&#13;&#10;&#9;&#9;return retval&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:fromVssBlock(buffer, offset)&#13;&#10;&#9;&#9;local bigInt = BigInteger(0)&#13;&#10;&#9;&#9;bigInt:setBitRangeAsInt(0, 8, buffer:getByte(offset))&#13;&#10;&#9;&#9;bigInt:setBitRangeAsInt(4, 8, buffer:getByte(offset + 1))&#13;&#10;&#9;&#9;bigInt:setBitRangeAsInt(8, 8, buffer:getByte(offset + 2))&#13;&#10;&#9;&#9;bigInt:setBitRangeAsInt(12, 8, buffer:getByte(offset + 3))&#13;&#10;&#9;&#9;local retval = bigInt:getBitRangeAsInt(0, 16)&#13;&#10;&#9;&#9;if buffer:getByte(offset + 3) &gt; 8 then&#13;&#10;&#9;&#9;&#9;local invInt = bit.bnot(retval) + 1&#13;&#10;&#9;&#9;&#9;retval = (65536 + invInt) * -1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;--self.log:info(&quot;fromVssBlock %s =&gt; %d&quot;, getFourBytes(buffer, offset):toHexString(1), retval)&#13;&#10;&#13;&#10;&#9;&#9;return retval&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toStringBlock(value)&#13;&#10;&#9;&#9;return self:toAkaiString(value)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:fromStringBlock(buffer, offset)&#13;&#10;&#9;&#9;local temp = MemoryBlock(12, true)&#13;&#10;&#9;&#9;buffer:copyTo(temp, offset, 12)&#13;&#10;&#9;&#9;return self:fromAkaiString(temp)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toDefaultBlock(value)&#13;&#10;&#9;&#9;return self:toNibbles(value)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:fromDefaultBlock(buffer, offset)&#13;&#10;&#9;&#9;return self:fromNibbles(buffer:getByte(offset), buffer:getByte(offset + 1))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:fromNibbles(ls, ms)&#13;&#10;&#9;&#9;local bi = BigInteger(0)&#13;&#10;&#9;&#9;bi:setBitRangeAsInt(0, 4, ls)&#13;&#10;&#9;&#9;bi:setBitRangeAsInt(4, 7, ms)&#13;&#10;&#9;&#9;return bi:getBitRangeAsInt(0, 15)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toNibbles(x)&#13;&#10;&#9;&#9;local nibbles = MemoryBlock(2, true)&#13;&#10;&#9;&#13;&#10;&#9;&#9;local internalX = x&#13;&#10;&#9;&#9;if x &lt; 0 then&#13;&#10;&#9;&#9;&#9;local hex = bit.tohex(x, 2)&#13;&#10;&#9;&#9;&#9;internalX = tonumber(hex, 16)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local bi = BigInteger(internalX)&#13;&#10;&#9;&#9;local LS = bi:getBitRangeAsInt(0, 4)&#13;&#10;&#9;&#9;local MS = bi:getBitRangeAsInt(4, 7)&#13;&#10;&#9;&#13;&#10;&#9;&#9;nibbles:setByte(0, LS)&#13;&#10;&#9;&#9;nibbles:setByte(1, MS)&#13;&#10;&#9;&#9;return nibbles&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:arrayToNibbles(values)&#13;&#10;&#9;&#9;-- calculate the akai-splitted parameter value,returns table named split with two values&#13;&#10;&#9;&#9;local memBlock = MemoryBlock(#values * 2, true)&#13;&#10;&#9;&#9;for i = 0, (#values - 1) do&#13;&#10;&#9;&#9;&#9;local nibbles = self:toNibbles(values[i + 1])&#13;&#10;&#9;&#9;&#9;memBlock:copyFrom(nibbles, i * 2, 2)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return memBlock&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Returns a LUA string representation of an Akai sysex string&#13;&#10;&#9;function __MidiService:fromAkaiString(bytes)&#13;&#10;&#9;&#9;local result = &quot;&quot;&#13;&#10;&#13;&#10;&#9;&#9;for i = 0, (bytes:getSize() - 1) do&#13;&#10;&#9;&#9;&#9;result = string.format(&quot;%s%s&quot;, result, self.alphabet[bytes:getByte(i) + 1])&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return result&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:toAkaiString(name)&#13;&#10;&#9;&#9;local memBlock = MemoryBlock(SAMPLE_NAME_LENG, true)&#13;&#10;&#13;&#10;&#9;&#9;for i = 1, SAMPLE_NAME_LENG do&#13;&#10;&#9;&#9;&#9;local c = string.sub(name, i, i):upper()&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Pad with spaces&#13;&#10;&#9;&#9;&#9;if i &gt; #name then&#13;&#10;&#9;&#9;&#9;&#9;c = &quot; &quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;memBlock:setByte(i - 1, self.flipAlphabet[c] - 1)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return memBlock&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __MidiService:splitBytes(value)&#13;&#10;&#9;&#9;local split = {}&#13;&#10;&#9;&#9;--self.log:info(&quot;splitBytes %d&quot;, value)&#13;&#10;&#9;&#9;local bi = BigInteger(value)&#13;&#10;&#9;&#9;local LS = bi:getBitRangeAsInt(0, 7)&#13;&#10;&#9;&#9;local MS = bi:getBitRangeAsInt(8, 7)&#13;&#10;&#9;&#9;table.insert(split, 1, LS)&#13;&#10;&#9;&#9;table.insert(split, 2, MS)&#13;&#10;&#9;&#9;return (split)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising MidiService&quot;)&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="10f79bf0ffa147aba7070b491f963fb3"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="ProgramService" luaMethodCode="function ProgramService()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __ProgramService:new()&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __ProgramService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;ProgramService&quot;)&#13;&#10;&#13;&#10;&#9;__ProgramService = Object()&#13;&#10;&#13;&#10;&#9;function __ProgramService:setProgramList(programList)&#13;&#10;&#9;&#9;self.programList = programList&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:storeProgParamEdit(phead)&#13;&#10;&#9;&#9;local program = self.programList:getActiveProgram()&#13;&#10;&#9;&#9;if program == nil then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;program:storeParamEdit(phead)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:storeKgParamEdit(khead)&#13;&#10;&#9;&#9;local program = self.programList:getActiveProgram()&#13;&#10;&#9;&#9;if program == nil then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local keyGroup = program:getActiveKeyGroup()&#13;&#10;&#9;&#9;keyGroup:storeParamEdit(khead)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:getActiveKeyGroupMessage()&#13;&#10;&#9;&#9;local pIndex = self.programList:getActiveProgram()&#13;&#10;&#9;&#9;local kIndex = self.programList:getActiveKeyGroup()&#13;&#10;&#9;&#9;return self:getKeyGroupMessage(pIndex, kIndex)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:getKeyGroupMessage(pIndex, kIndex)&#13;&#10;&#9;&#9;local program = self.programList[pIndex]&#13;&#10;&#9;&#9;local keyGroup = program:getKeyGroup(kIndex)&#13;&#10;&#9;&#9;return keyGroup:getKdata()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:getActiveProgramMessagesList()&#13;&#10;&#9;&#9;local pIndex = self.programList:getActiveProgram()&#13;&#10;&#9;&#9;return self:getProgramMessagesList(pIndex)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:getProgramMessagesList(pIndex)&#13;&#10;&#9;&#9;pIndex = pIndex or self.programList:getActiveProgram()&#13;&#10;&#9;&#9;local msgs = {}&#13;&#10;&#9;&#9;local program = self.programList[pIndex]&#13;&#10;&#9;&#9;table.insert(msgs, program:getPdata())&#13;&#10;&#13;&#10;&#9;&#9;local numKeyGroups = program:getNumKeyGroups()&#13;&#10;&#9;&#9;for i = 1, numKeyGroups do&#13;&#10;&#9;&#9;&#9;local keyGroup = program:getKeyGroup(i)&#13;&#10;&#9;&#9;&#9;table.insert(msgs, keyGroup:getKdata())&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return msgs&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:loadProgramFromFile(filePath)&#13;&#10;&#9;&#9;local file = assert(io.open(filePath, &quot;rb&quot;))&#13;&#10;&#9;&#9;local data = file:read(&quot;*all&quot;)&#13;&#10;&#9;&#9;assert(file:close())&#13;&#10;&#13;&#10;&#9;&#9;local offset = 0&#13;&#10;&#9;&#9;local loadedProg = nil&#13;&#10;&#9;&#9;for i = 0,(data:getSize() - 1) do&#13;&#10;&#9;&#9;&#9;if data:getByte(i) == 0xF7 then&#13;&#10;&#9;&#9;&#9;&#9;-- Found end of sysex msg&#13;&#10;&#9;&#9;&#9;&#9;if i == PROGRAM_HEADER_SIZE then&#13;&#10;&#9;&#9;&#9;&#9;&#9;assert(loadedProg == nil, &quot;Invalid Akai S2000 program file&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;local memBlock = MemoryBlock(PROGRAM_HEADER_SIZE, true)&#13;&#10;&#9;&#9;&#9;&#9;&#9;data:copyTo(memBlock, offset, PROGRAM_HEADER_SIZE)&#13;&#10;&#9;&#9;&#9;&#9;&#9;loadedProg = Program(Pdata(memBlock))&#13;&#10;&#9;&#9;&#9;&#9;&#9;offset = PROGRAM_HEADER_SIZE&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;assert(loadedProg ~= nil, &quot;Could not find program header&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;assert(i - offset == KEY_GROUP_HEADER_SIZE, &quot;Invalid key group size&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;local memBlock = MemoryBlock(KEY_GROUP_HEADER_SIZE, true)&#13;&#10;&#9;&#9;&#9;&#9;&#9;data:copyTo(memBlock, offset, i - offset)&#13;&#10;&#9;&#9;&#9;&#9;&#9;local kg = KeyGroup(Kdata(memBlock))&#13;&#10;&#9;&#9;&#9;&#9;&#9;loadedProg:addKeyGroup(kg)&#13;&#10;&#9;&#9;&#9;&#9;&#9;offset = i&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:saveProgramToFolder(folderPath, pIndex)&#13;&#10;&#9;&#9;local msgs = self:getProgramMessagesList(pIndex)&#13;&#10;&#9;&#9;local program = self.programList:getProgram(pIndex)&#13;&#10;&#9;&#9;local progName = program:getName()&#13;&#10;&#9;&#9;local filePath = string.format(&quot;%s%s%s.syx&quot;, folderPath, pathseparator, progName)&#13;&#10;&#9;&#9;local file = assert(io.open(filePath, &quot;wb&quot;))&#13;&#10;&#9;&#9;for k,v in pairs(msgs) do&#13;&#10;&#9;&#9;&#9;file:write(v:toMidiMessage():getData())&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;assert(file:close())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:saveProgramsToFolder(folderPath)&#13;&#10;&#9;&#9;local numPrograms = self.programList:getNumPrograms()&#13;&#10;&#9;&#9;if i &lt; 1 then&#13;&#10;&#9;&#9;&#9;return &quot;There are no programs to store...&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;for i = 1, numPrograms do&#13;&#10;&#9;&#9;&#9;self:saveProgramToFile(folderPath, i)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:newProgram(programName, keyGroups)&#13;&#10;&#9;&#9;local prog = Program()&#13;&#10;&#9;&#9;prog:setName(programName)&#13;&#10;&#9;&#9;for k,v in pairs(keyGroups) do&#13;&#10;&#9;&#9;&#9;prog:addKeyGroup(v)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return prog&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:storParamEdit(indexGroup, headerOffs, values)&#13;&#10;&#9;&#9;local activeProg = self.programList:getActiveProgram()&#13;&#10;&#9;&#9;if activeProg ~= nil then&#13;&#10;&#9;&#9;&#9;if indexGroup == 0 then&#13;&#10;&#9;&#9;&#9;&#9;-- __Program param&#13;&#10;&#9;&#9;&#9;&#9;activeProg:setPdataByte(mod:getModulatorName(), values[1])&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;-- Key Group param&#13;&#10;&#9;&#9;&#9;&#9;local activeKg = activeProg:getActiveKeyGroup()&#13;&#10;&#9;&#9;&#9;&#9;activeKg:storeNibbles(mod:getModulatorName(), midiSrvc:toNibbles(values[1]))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramService:toJson(programList)&#13;&#10;&#9;&#9;local numProgs = programList:getNumPrograms()&#13;&#10;&#9;&#9;for i = 1, numProgs do&#13;&#10;&#9;&#9;&#9;local prog = programList:getProgram(i)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising ProgramService&quot;)&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="72a23d1c22cf4e438044a00a48cb530f"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="SampleEditService" luaMethodCode="function SampleEditService()&#10;&#13;&#10;&#9;if __SampleEditService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return __SampleEditService:new()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;__SampleEditService = Object()&#13;&#10;&#13;&#10;&#9;function __SampleEditService:trimSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:loopSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:timestretchSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:resampleSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:copySample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:renameSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:deleteSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:normaliseSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:reverseSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleEditService:pitchSample(sample)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising SampleEditService&quot;)&#13;&#10;&#9;return __SampleEditService:new()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="6e195eeb6cda49768b607b1d5b63d012"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="controller" uuid="546d2220d2804c70a4a9c6f176d52d24">
        <luaMethodGroup name="drumMap" uuid="bf13c93189ac46c994c03d74154a98ba">
          <luaMethod luaMethodName="onResetPadKeyRange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onResetPadKeyRange(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;drumMapModel:resetSelectedKeyRange()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="10f6fbbe8dc4474b9349803d886a3b92"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onResetAllKeyRanges" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onResetAllKeyRanges(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;drumMapModel:resetAllRanges()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="1be366e3610a43da9e8af4b831afcaef"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onDrumMapKeyChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onDrumMapKeyChange(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local customIndex = mod:getProperty(&quot;modulatorCustomIndex&quot;)&#13;&#10;&#9;drumMapModel:setKeyRange(customIndex, value)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="0be51fd61c794158bdf9e0bada59feb5"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onDrumMapClear" luaMethodCode="function onDrumMapClear()&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;drumMapModel:clear()&#13;&#10;&#13;&#10;&#9;drumMapCtrl:updateStatus(&quot;Select a sample and a key group&quot;)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="a8d753f2dd7448c586c007f066b699e6"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onSampleAssign" luaMethodCode="function onSampleAssign()&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if not drumMapModel:isReadyForAssignment() then&#13;&#10;&#9;&#9;updateStatus(&quot;Select a sample and a key group.&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local result = drumMapSrvc:assignSample()&#13;&#10;&#9;drumMapCtrl:updateStatus(result)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="3eb3bb637bda4cc2b877c2ae7301870a"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onRslist" luaMethodCode="function onRslist()&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#10;&#13;&#10;&#9;local rslistFunc = function()&#13;&#10;&#9;&#9;midiSrvc:sendMidiMessage(rslist())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local midiCallbackFunc = function(data)&#13;&#10;&#9;&#9;local slist = slist(data)&#13;&#10;&#9;&#9;if slist then&#13;&#10;&#9;&#9;&#9;processSrvc:abort()&#13;&#10;&#9;&#9;&#9;sampleListModel:addSamples(slist)&#9;&#9;&#9;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local rslistProc = process()&#13;&#10;&#9;&#9;:withMidiCallback(midiCallbackFunc)&#13;&#10;&#9;&#9;:withMidiSender(rslistFunc, 100)&#13;&#10;&#13;&#10;&#9;local result = processSrvc:execute(rslistProc)&#13;&#10;&#9;if result then&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Receiving sample list...&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Failed to receive data.\nPlease cancel process&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="4e26d1958eb0445c998ecf82ef8b9da8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onCancelProcess" luaMethodCode="function onCancelProcess()&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;drumMapCtrl:updateStatus(&quot;Select a sample and a key group&quot;)&#13;&#10;&#9;processSrvc:abort()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="3a4b3fa74455478593db585e12c2ef01"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onLoadOs" luaMethodCode="--&#13;&#10;-- Loads the S2K os image onto Hxc Floppy Emulator&#13;&#10;-- and waits until the S2K has been intialised&#13;&#10;function onLoadOs()&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if not drumMapCtrl:verifyTransferSettings() then&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;There are config issues.\nPlease verify your settings...&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local statCount = 0&#13;&#10;&#13;&#10;&#9;local rstatFunc = function()&#13;&#10;&#9;&#9;midiSrvc:sendMidiMessage(Rstat())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local statFunc = function(data)&#13;&#10;&#9;&#9;LOGGER:fine(&quot;[statFunc]&quot;)&#13;&#10;&#9;&#9;local statMsg = Stat(data)&#13;&#10;&#9;&#9;if statMsg ~= nil then&#13;&#10;&#9;&#9;&#9;if statCount &gt; 20 then&#13;&#10;&#9;&#9;&#9;&#9;statCount = statCount + 1&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;processSrvc:abort()&#13;&#10;&#9;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Akai S2000 OS loaded.&quot;)&#13;&#10;&#9;&#9;&#9;&#9;drumMapCtrl:toggleActivation(&quot;loadOsButton&quot;, true)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local transferProc = Process()&#13;&#10;&#9;&#9;:withPath(workFolder:getFullPathName())&#13;&#10;&#9;&#9;:withLaunchVariable(&quot;imgPath&quot;, string.format(&quot;%s%sosimage.img&quot;, workFolder:getFullPathName(), pathseparator))&#13;&#10;&#9;&#9;:withLaunchGenerator(hxcSrvc:getHxcLauncher())&#13;&#10;&#9;&#9;:withAbortGenerator(hxcSrvc:getHxcAborter())&#13;&#10;&#9;&#9;:withMidiCallback(statFunc)&#13;&#10;&#9;&#9;:withMidiSender(rstatFunc, 1000)&#13;&#10;&#13;&#10;&#9;drumMapCtrl:toggleActivation(&quot;loadOsButton&quot;, false)&#13;&#10;&#13;&#10;&#9;local result = processSrvc:execute(transferProc)&#13;&#10;&#9;if result then&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Loading Akai S2000 OS...&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Failed to load OS.\nPlease cancel process&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="3eaa4adb2965496ab3c422354ff7e8fa"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onTransferSamples" luaMethodCode="--&#13;&#10;-- Loads a list of WAV files onto floppies&#13;&#10;-- and imports them to the Akai S2000&#13;&#10;function onTransferSamples()&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if not drumMapCtrl:verifyTransferSettings() then&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;There are config issues.\nPlease verify your settings...&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local logFilePath&#13;&#10;&#9;local numSamplesBefore = 0&#13;&#10;&#9;local expectedNumSamples = -1&#13;&#10;&#13;&#10;&#9;local rslistFunc = function()&#13;&#10;&#9;&#9;midiSrvc:sendMidiMessage(Rslist())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local midiCallbackFunc = function(data)&#13;&#10;&#9;&#9;local msg = Slist(data)&#13;&#10;&#9;&#9;if msg ~= nil then&#13;&#10;&#9;&#9;&#9;local numSamples = msg:getNumSamples()&#13;&#10;&#9;&#9;&#9;if numSamplesBefore == 0 then&#13;&#10;&#9;&#9;&#9;&#9;numSamplesBefore = numSamples&#13;&#10;&#9;&#9;&#9;elseif expectedNumSamples == -1 then&#13;&#10;&#9;&#9;&#9;&#9;expectedNumSamples = s2kDieSrvc:getNumGeneratedSamples(logFilePath)&#13;&#10;&#9;&#9;&#9;elseif numSamples == numSamplesBefore + expectedNumSamples then&#13;&#10;&#9;&#9;&#9;&#9;sampleListModel:addSamples(msg)&#13;&#10;&#9;&#9;&#9;&#9;processSrvc:abort()&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;local wavList = drumMapModel:retrieveNextFloppy()&#13;&#10;&#9;&#9;&#9;&#9;if wavList == nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Data transfer done.&quot;)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;drumMapCtrl:updateStatus(string.format(&quot;Transfering 1:st floppy to Akai S2000...&quot;))&#13;&#10;&#9;&#9;&#9;&#9;&#9;executeTransfer(wavList)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local executeTransfer = function(wavList)&#13;&#10;&#9;&#9;-- console(string.format(&quot;WavList : %d&quot;, table.getn(wavList)))&#13;&#10;&#9;&#9;local transferProc = Process()&#13;&#10;&#9;&#9;&#9;:withPath(workFolder:getFullPathName())&#13;&#10;&#9;&#9;&#9;:withLaunchVariable(&quot;wavFiles&quot;, wavList)&#13;&#10;&#9;&#9;&#9;:withLaunchGenerator(s2kDieSrvc:s2kDieLauncher())&#13;&#10;&#9;&#9;&#9;:withLaunchGenerator(hxcSrvc:getHxcLauncher())&#13;&#10;&#9;&#9;&#9;:withAbortGenerator(hxcSrvc:getHxcAborter())&#9;&#9;&#13;&#10;&#9;&#9;&#9;:withMidiCallback(midiCallbackFunc)&#13;&#10;&#9;&#9;&#9;:withMidiSender(rslistFunc, 1000)&#13;&#10;&#13;&#10;&#9;&#9;logFilePath = transferProc:getLogFilePath()&#13;&#10;&#13;&#10;&#9;&#9;local result = processSrvc:execute(transferProc)&#13;&#10;&#9;&#9;if result then&#13;&#10;&#9;&#9;&#9;utils.infoWindow (&quot;Load samples&quot;, &quot;Please select to load all from\nfloppy on the Akai S2000.&quot;)&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Transfering samples...&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Failed to transfer data.\nPlease cancel process&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#13;&#10;&#9;if floppyImgPath == nil then&#13;&#10;&#9;&#9;local wavList = drumMapModel:retrieveNextFloppy()&#13;&#10;&#9;&#9;if wavList == nil then&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Data transfer done.&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(string.format(&quot;Transfering 1:st floppy to Akai S2000...&quot;))&#13;&#10;&#9;&#9;&#9;executeTransfer(wavList)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(string.format(&quot;Transfering floppy to Akai S2000...&quot;))&#13;&#10;&#9;&#9;local transferProc = process()&#13;&#10;&#9;&#9;&#9;:withPath(workFolder:getFullPathName())&#13;&#10;&#9;&#9;&#9;:withLaunchVariable(&quot;imgPath&quot;, floppyImgPath:getFullPathName())&#13;&#10;&#9;&#9;&#9;:withLaunchGenerator(hxcService:getHxcLauncher())&#13;&#10;&#9;&#9;&#9;:withAbortGenerator(hxcService:getHxcAborter())&#9;&#9;&#13;&#10;&#9;&#13;&#10;&#9;&#9;local result = processService:execute(transferProc)&#13;&#10;&#9;&#9;if result then&#13;&#10;&#9;&#9;&#9;utils.infoWindow (&quot;Load samples&quot;, &quot;Please select to load all from\nfloppy on the Akai S2000.&quot;)&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Done...&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Failed to transfer data.\nPlease cancel process&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="028d39b1eb83459788c729658cd3210a"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onWorkPathChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onWorkPathChange(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;workFolder = utils.getDirectoryWindow(&quot;Select work folder&quot;, File.getSpecialLocation(File.userHomeDirectory))&#13;&#10;&#9;panel:getComponent(&quot;workPathLabel&quot;):setText(workFolder:getFullPathName())&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="206407022c68407d988fff10e058ff4e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onS2kDiePathChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onS2kDiePathChange(mod, value)&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;local s2kDiePath = utils.openFileWindow(&quot;Select s2kDie folder&quot;, File.getSpecialLocation(File.userHomeDirectory), &quot;*.php&quot;, true)&#13;&#10;&#9;s2kDieSrvc:setS2kDiePath(s2kDiePath)&#13;&#10;&#9;panel:getComponent(&quot;s2kDiePathLabel&quot;):setText(s2kDiePath:getFullPathName())&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="c1825d5f35174f1db4e391cc562c8881"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onHxcPathChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onHxcPathChange(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;filePatternsAllowed = &quot;*&quot;&#13;&#10;&#9;if operatingsystem == &quot;win&quot; then&#13;&#10;&#9;&#9;filePatternsAllowed = &quot;*.exe&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local hxcPath = utils.openFileWindow(&quot;Select hxcfe executable&quot;, File.getSpecialLocation(File.userHomeDirectory), &#13;&#10;&#9;&#9;filePatternsAllowed, true)&#13;&#10;&#9;hxcSrvc:setHxcPath(hxcPath)&#13;&#10;&#9;panel:getComponent(&quot;hxcPathLabel&quot;):setText(hxcPath:getFullPathName())&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="ee4a8d89632a4d938f4a96703199ed12"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onSetfdprmPathChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onSetfdprmPathChange(mod, value)&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;setfdprmPath = utils.openFileWindow(&quot;Select setfdprm path&quot;, File.getSpecialLocation(File.userHomeDirectory), &quot;*&quot;, true)&#13;&#10;&#9;s2kDieSrvc:setFdprmPath(setfdprmPath)&#13;&#10;&#9;panel:getComponent(&quot;setfdprmPathLabel&quot;):setText(setfdprmPath:getFullPathName())&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="eabc132df6a54a28aadae8b52b84ae71"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onTransferMethodChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onTransferMethodChange(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;local FLOPPY, HXCFE, MIDI = 0, 1, 2&#13;&#10;&#13;&#10;&#9;drumMapCtrl:toggleActivation(&quot;hxcPathGroup&quot;, value == HXCFE)&#13;&#10;&#9;drumMapCtrl:toggleActivation(&quot;loadOsButton&quot;, value == HXCFE)&#13;&#10;&#9;drumMapCtrl:toggleActivation(&quot;loadFloppyImageGroup&quot;, value == HXCFE)&#13;&#10;&#9;drumMapCtrl:toggleActivation(&quot;setfdprmPathGroup&quot;, value == FLOPPY)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="7cfe166ee7c34575bdbae2f8b40472d1"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onFloppyImageSelected" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onFloppyImageSelected(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;floppyImgPath = utils.openFileWindow(&quot;Select floppy image&quot;, File.getSpecialLocation(File.userHomeDirectory), &quot;*.img&quot;, true)&#13;&#10;&#9;panel:getComponent(&quot;loadFloppyImageLabel&quot;):setText(floppyImgPath:getFullPathName())&#13;&#10;&#9;drumMapCtrl:toggleActivation(&quot;transferSamples&quot;, getLaunchButtonState())&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="1e9a744a2553455287bced455d40b4be"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onFloppyImageCleared" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onFloppyImageCleared(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;floppyImgPath = nil&#13;&#10;&#9;panel:getComponent(&quot;loadFloppyImageLabel&quot;):setText(&quot;&quot;)&#13;&#10;&#9;local launchButtonState = drumMapSrvc:getLaunchButtonState()&#13;&#10;&#13;&#10;&#13;&#10;&#9;if launchButtonState == &quot;&quot; then&#13;&#10;&#9;&#9;drumMapCtrl:toggleActivation(&quot;transferSamples&quot;, 0)&#10;&#9;else&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(launchButtonState)&#13;&#10;&#9;&#9;drumMapCtrl:toggleActivation(&quot;transferSamples&quot;, 1)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="135fbcd9426a4a9189da5db296c0bdda"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onPadSelected" luaMethodCode="--&#10;-- Called when a mouse is down on this component&#10;--&#10;&#13;&#10;function onPadSelected(comp, event)&#13;&#10;&#13;&#10;&#9;function getKeyGroupByComponent(comp)&#13;&#10;&#9;&#9;local grpName = comp:getProperty(&quot;componentGroupName&quot;)&#13;&#10;&#9;&#9;return string.sub(grpName, 0, string.find(grpName, &quot;-grp&quot;) - 1)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local kg = getKeyGroupByComponent(comp)&#13;&#10;&#9;drumMapModel:setSelectedKeyGroup(kg)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="eb120b9cf4d64603a8fe65e7c9e2b2b8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onSampleSelected" luaMethodCode="--&#10;-- Called when a file is clicked&#10;--&#10;-- @modulator the modulator the event occured on&#10;-- @file      a File object that represents the clicked file&#10;--&#10;onSampleSelected = function(--[[ CtrlrModulator --]] modulator, --[[ File --]] file)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if drumMapSrvc:isValidSampleFile(file) then&#13;&#10;&#9;&#9;drumMapModel:setSelectedSample(file)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;drumMapModel:setSelectedSample(nil)&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Please select a wav file&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="8c23d8f8d3ba4936931a513d611f6724"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onSampleDoubleClicked" luaMethodCode="--&#10;-- Called when a file is clicked&#10;--&#10;-- @modulator the modulator the event occured on&#10;-- @file      a File object that represents the clicked file&#10;--&#10;function onSampleDoubleClicked(--[[ CtrlrModulator --]] modulator, --[[ File --]] file)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if not drumMapSrvc:isValidSampleFile(file) then&#13;&#10;&#9;&#9;drumMapCtrl:toggleActivation(&quot;assignSample&quot;, 1)&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Please select a wav file&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;drumMapModel:setSelectedSample(file)&#13;&#10;&#13;&#10;&#9;if not drumMapModel:isReadyForAssignment() then&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(&quot;Select a sample and a key group.&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local result = drumMapSrvc:assignSample()&#13;&#10;&#9;drumMapCtrl:updateStatus(result)&#13;&#10;&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="9f2ac623e1954e038b36c25999cde095"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onKeyGroupNumChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onKeyGroupNumChange(mod, value)&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;drumMapModel:setNumKeyGroups(value)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="7ebfffcb15ce42dc95f80ef1133d23bb"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onCreateProgram" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onCreateProgram(mod, value)&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local programName = panel:getComponent(&quot;programCreateNameLbl&quot;):getProperty(&quot;uiLabelText&quot;)&#13;&#10;&#13;&#10;&#9;if programName == nil or programName == &quot;&quot; then&#13;&#10;&#9;&#9;LOGGER:info(&quot;Please provide program name...&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if programListModel:hasProgram(programName) then&#13;&#10;&#9;&#9;LOGGER:info(&quot;Program already exists...&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if not drumMapModel:hasLoadedAllSamples() then&#13;&#10;&#9;&#9;LOGGER:info(&quot;You cannot create a program with unloaded samples...&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local keyGroups = drumMapModel:getKeyGroups()&#13;&#10;&#9;local program = programSrvc:newProgram(programName, keyGroups)&#13;&#10;&#9;LOGGER:fine(&quot;Adding program '%s', # progs: %d&quot;, program:getName(), programListModel:getNumPrograms())&#13;&#10;&#9;programListModel:addProgram(program)&#13;&#10;&#9;local highestProg = programListModel:getNumPrograms()&#13;&#10;&#9;LOGGER:fine(&quot;Selecting prog # %d&quot;, highestProg)&#13;&#10;&#9;panel:getModulatorByName(&quot;programSelector&quot;):setValue(highestProg, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="eee3382cf6534633822e49c7b1caf874"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="sample" uuid="b7c23899e84d4093bebb4d070eb41f0d">
          <luaMethod luaMethodName="onTrimValueChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onTrimValueChange(mod, value)&#13;&#10;&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local trimCtrlIndex = tonumber(mod:getProperty(&quot;modulatorCustomIndex&quot;))&#13;&#10;&#9;if trimCtrlIndex == 0 then&#13;&#10;&#9;&#9;editSample:setTrimStart(value)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;editSample:setTrimEnd(value)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="0e82d0e185294b528cb5754981c57a29"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onLoopLengthRepaint" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onLoopLengthRepaint(mod, value)&#13;&#10;&#9;panel:setGlobalVariable(3, value)&#13;&#10;&#9;local loop = panel:getComponent(&quot;sampleLoop&quot;)&#13;&#10;&#9;loop:repaint()&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="eed31661150e430cbc089f0cb69113d9"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onEditSampleSelected" luaMethodCode="--&#10;-- Called when an item is double clicked&#10;--&#10;-- @modulator the modulator the event occured on&#10;-- @value      an integer that represents the double clicked item&#10;--&#10;&#10;function onEditSampleSelected(modulator, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;editSample = sample(value)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="418b03932a114dc3abb05497b354c8b8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onReverseSample" luaMethodCode="function onReverseSample()&#13;&#10;&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;editSample:setReverse(true)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="6537ec7f325242c5ab9f30cd74995f30"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onEditWaveformLoad" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onEditWaveformLoad(mod, value)&#13;&#10;&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local waveform = utils.openFileWindow(&quot;Select Waveform&quot;, File.getSpecialLocation(File.userHomeDirectory), &quot;*.wav&quot;, true)&#13;&#10;&#9;if drumMapSrvc:isValidSampleFile(waveform) then&#13;&#10;&#9;&#9;editSample:setWaveform(waveform)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;editSample:setWaveform(nil)&#13;&#10;&#9;end&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="7a9016866ad149b381a6fe7c2d93d38f"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onLoopStartChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onLoopStartChange(mod, value)&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;editSample:setLoopStart(value)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="efac1d25fbc340ab9b1f4f6e7d65c861"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onTimestretchTypeChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#13;&#10;function onTimestretchTypeChange(mod, value)&#13;&#10;&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;editSample:setTimestretchType(value)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="d29991f428794f3f8b66ea4d275b161b"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onCopySample" luaMethodCode="function onCopySample()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="b4e32e9380494e8cab5f52399367ad60"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onDeleteSample" luaMethodCode="function onDeleteSample()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="466f4c1168134aa3abe9e2b046bbb4c8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onNormaliseSample" luaMethodCode="function onNormaliseSample()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;sampleEditSrvc:normaliseSample(editSample)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="2ecbb50b495c45d099ce62e2ab7496d6"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onSamplePitchChange" luaMethodCode="function onSamplePitchChange()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;sampleEditSrvc:pitchSample(editSample)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="d52d97bdf5fa495197247769c47c855e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onExecuteSampleTrim" luaMethodCode="function onExecuteSampleTrim()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;sampleEditSrvc:trimSample(editSample)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="380d3fa3c55d4bf98c4fabb8890b6e88"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onExecuteSampleLoop" luaMethodCode="function onExecuteSampleLoop()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;sampleEditSrvc:loopSample(editSample)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="a9035f3cd2e54a578b9aac8c830ef405"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onExecuteSampleTimestretch" luaMethodCode="function onExecuteSampleTimestretch()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;sampleEditSrvc:timestretchSample(editSample)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="273d59a5fd2e41b09cc9d5bee690a620"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onExecuteSampleResample" luaMethodCode="function onExecuteSampleResample()&#10;&#9;-- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;if editSample == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;sampleEditSrvc:resampleSample(editSample)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="36d8e92c4ed04f808f8d30d2c3df4bef"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="paintLoopStart" luaMethodCode="function paintLoopStart(comp,g)&#13;&#10;&#9;&#13;&#10;&#9;local loopStart = panel:getGlobalVariable(2)&#13;&#10;&#9;local translation = AffineTransform.translation(loopStart, 0)&#13;&#10;&#9;local transform = AffineTransform (translation)&#13;&#10;&#9;g:drawImageTransformed (loopAtImage, transform, false);&#10;&#13;&#10;&#9;local loopLength = panel:getGlobalVariable(3)&#13;&#10;&#9;local translationLength = AffineTransform.translation(loopLength + loopStart, 0)&#13;&#10;&#9;local transformLength = AffineTransform (translationLength)&#13;&#10;&#9;g:drawImageTransformed (loopAtImage, transformLength, false);&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="f0f1c65648d445bdbd40bf318e760ca9"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="program" uuid="37936edd69d94d62a5f34f0f79bce4a3">
          <luaMethod luaMethodName="onProgramChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#13;&#10;function onProgramChange(mod, value)&#10;&#9;-- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;value = 1&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if programListModel:getNumPrograms() == 0 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;programListModel:setActiveProgram(value)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="733dfcafd9544caf9652b9b068bae87a"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onKeyGroupChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#13;&#10;function onKeyGroupChange(mod, value)&#10;&#9;-- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;value = 1&#13;&#10;&#9;end&#13;&#10;&#9;programCtrl:changeKeyGroup(value)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="c1aa890d2c8340d385f115b8d2acf6e9"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onVssChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#13;&#10;function onVssChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local kg = activeProg:getActiveKeyGroupIndex()&#13;&#10;&#9;local offset = keyGroupBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toVssBlock(value)&#13;&#10;&#9;local khead = Khead(prog, kg, offset, valueBlock)&#13;&#10;&#13;&#10;&#9;midiSrvc:sendMidiMessage(khead)&#13;&#10;&#9;programSrvc:storeKgParamEdit(khead)&#13;&#10;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="1a533d080e4a48ec929d780214ba43a3"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onKgDefaultParamChange" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;&#10;function onKgDefaultParamChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local kg = activeProg:getActiveKeyGroupIndex()&#13;&#10;&#9;local offset = keyGroupBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toDefaultBlock(value + math.abs(mod:getMinNonMapped()))&#13;&#10;&#9;local khead = Khead(prog, kg, offset, valueBlock)&#13;&#10;&#13;&#10;&#9;--LOGGER:info(&quot;onKgDefaultParamChange %d =&gt; %s (%s)&quot;, value, mod:getProperty(&quot;name&quot;), khead:toString())&#13;&#10;&#13;&#10;&#9;midiSrvc:sendMidiMessage(khead)&#13;&#10;&#9;programSrvc:storeKgParamEdit(khead)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="72d2b977571f465aaa58a14b485ebdeb"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onProgDefaultParamChange" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;&#10;function onProgDefaultParamChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local offset = programBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toDefaultBlock(value + math.abs(mod:getMinNonMapped()))&#13;&#10;&#9;local phead = Phead(prog, offset, valueBlock)&#13;&#10;&#9;midiSrvc:sendMidiMessage(phead)&#13;&#10;&#13;&#10;&#9;programSrvc:storeProgParamEdit(phead)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="e7614757edac423fa4779693e8bf0e0e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onKgTuneChange" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;&#10;function onKgTuneChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local kg = activeProg:getActiveKeyGroupIndex()&#13;&#10;&#9;local offset = keyGroupBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toTuneBlock(value)&#13;&#10;&#9;local khead = Khead(prog, kg, offset, valueBlock)&#13;&#10;&#13;&#10;&#9;midiSrvc:sendMidiMessage(khead)&#13;&#10;&#9;programSrvc:storeKgParamEdit(khead)&#13;&#10;&#9;local ll, mm = midiSrvc:toTuneBytes(value)&#13;&#10;&#9;programCtrl:updateTuneLabel(mod:getProperty(&quot;name&quot;), mm, ll)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="844467c9b3c2469f972bc0b620d01808"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onProgTuneChange" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;&#10;function onProgTuneChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local offset = programBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toTuneBlock(value)&#13;&#10;&#9;local phead = Phead(prog, offset, valueBlock)&#13;&#10;&#13;&#10;&#9;midiSrvc:sendMidiMessage(phead)&#13;&#10;&#13;&#10;&#9;programSrvc:storeProgParamEdit(phead)&#13;&#10;&#9;local ll, mm = midiSrvc:toTuneBytes(value)&#13;&#10;&#9;programCtrl:updateTuneLabel(mod:getProperty(&quot;name&quot;), mm, ll)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="54ccd488d80f432ba40bd33d8b74b7a4"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onKgStringChange" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;&#10;function onKgStringChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local kg = activeProg:getActiveKeyGroupIndex()&#13;&#10;&#9;local offset = keyGroupBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toStringBlock(value)&#13;&#10;&#9;local khead = Khead(prog, kg, offset, valueBlock)&#13;&#10;&#13;&#10;&#9;midiSrvc:sendMidiMessage(khead)&#13;&#10;&#13;&#10;&#9;programSrvc:storeKgParamEdit(khead)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="7368657a457f46fbb35a6fc7846a3125"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onProgStringChange" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;&#10;function onProgStringChange(mod, value)&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local activeProg = programListModel:getActiveProgram()&#13;&#10;&#9;if activeProg == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local prog = activeProg:getProgramNumber()&#13;&#10;&#9;local offset = programBlock[mod:getProperty(&quot;name&quot;)]&#13;&#10;&#9;local valueBlock = midiSrvc:toStringBlock(value)&#13;&#10;&#9;local phead = Phead(prog, offset, valueBlock)&#13;&#10;&#13;&#10;&#9;midiSrvc:sendMidiMessage(phead)&#13;&#10;&#13;&#10;&#9;programSrvc:storeProgParamEdit(phead)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="212046958adf44e396edf7c05c449eb8"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="dev" uuid="02aae9c598904e2b8f0d3173a4b2cc91">
          <luaMethod luaMethodName="onLogLevelChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#13;&#10;function onLogLevelChanged(mod, value)&#13;&#10;&#9;-- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local tempLog = Logger(&quot;temp&quot;)&#13;&#10;&#9;console(string.format(&quot;Log level is %d before&quot;, tempLog:getLevel()))&#13;&#10;&#9;tempLog:setLevel(mod:getValueMapped())&#13;&#10;&#9;console(string.format(&quot;Log level is %d after&quot;, tempLog:getLevel()))&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="f8c57e3528584504908da1b1947153e7"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onPanelStateChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#13;&#10;function onPanelStateChanged(mod, value)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;panelState = mod:getValueMapped()&#13;&#10;&#9;LOGGER:warn(&quot;[onPanelStateChanged] %d&quot;, panelState)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="b5e0ab3af1c54934af4498b581ab109c"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="test1" luaMethodCode="function test1(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;drumMapModel:setNumKeyGroups(2)&#13;&#10;&#9;&#9;drumMapModel:setSelectedKeyGroup(&quot;drumMap-1&quot;)&#13;&#10;&#9;elseif value == 1 then&#13;&#10;&#9;&#9;--local file = File(&quot;/Users/collberg/Pascal/Ctrlr/Bowed-Bass.wav&quot;)&#13;&#10;&#9;&#9;local file = File(&quot;c:\\ctrlr\\wavs\\Bowed-Bass-C2.wav&quot;)&#13;&#10;&#9;&#9;drumMapModel:setSelectedSample(file)&#13;&#10;&#13;&#10;&#9;&#9;local result = drumMapSrvc:assignSample()&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(result)&#13;&#10;&#9;elseif value == 2 then&#13;&#10;&#9;&#9;drumMapModel:setSelectedKeyGroup(&quot;drumMap-2&quot;)&#13;&#10;&#9;&#9;--local file = File(&quot;/Users/collberg/Pascal/Ctrlr/Door-Close-Blabla.wav&quot;)&#13;&#10;&#9;&#9;local file = File(&quot;c:\\ctrlr\\wavs\\Door-Close.wav&quot;)&#13;&#10;&#9;&#9;drumMapModel:setSelectedSample(file)&#13;&#10;&#13;&#10;&#9;&#9;local result = drumMapSrvc:assignSample()&#13;&#10;&#9;&#9;drumMapCtrl:updateStatus(result)&#13;&#10;&#9;elseif value == 3 then&#13;&#10;&#9;&#9;local midi = CtrlrMidiMessage({0xf0, 0x47, 0x00, 0x05, 0x48, 0x1e, 0x00, 0x1d, 0x17, 0x0b, 0x0d, 0x15, 0x13, 0x18, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0c, 0x19, 0x21, 0x0f, 0x0e, 0x27, 0x0c, 0x0b, 0x1d, 0x1d, 0x27, 0x16, 0x0c, 0x19, 0x21, 0x0f, 0x0e, 0x27, 0x0c, 0x0b, 0x1d, 0x1d, 0x27, 0x16, 0x0c, 0x19, 0x21, 0x0f, 0x0e, 0x27, 0x0c, 0x0b, 0x1d, 0x1d, 0x27, 0x1c, 0x0d, 0x0b, 0x1e, 0x27, 0x17, 0x0f, 0x19, 0x21, 0x28, 0x21, 0x27, 0x16, 0x0d, 0x0b, 0x1e, 0x27, 0x17, 0x0f, 0x19, 0x21, 0x28, 0x21, 0x27, 0x1c, 0x0e, 0x19, 0x11, 0x27, 0x0c, 0x0b, 0x1c, 0x15, 0x28, 0x21, 0x27, 0x16, 0x0e, 0x19, 0x11, 0x27, 0x0c, 0x0b, 0x1c, 0x15, 0x28, 0x21, 0x27, 0x1c, 0x0e, 0x19, 0x19, 0x1c, 0x27, 0x0d, 0x16, 0x19, 0x1d, 0x0f, 0x27, 0x16, 0x0e, 0x19, 0x19, 0x1c, 0x27, 0x0d, 0x16, 0x19, 0x1d, 0x0f, 0x27, 0x1c, 0x0e, 0x1c, 0x13, 0x16, 0x16, 0x28, 0x21, 0x0b, 0x20, 0x0a, 0x27, 0x16, 0x0e, 0x1c, 0x13, 0x16, 0x16, 0x28, 0x21, 0x0b, 0x20, 0x0a, 0x27, 0x1c, 0x10, 0x16, 0x19, 0x21, 0x13, 0x18, 0x11, 0x27, 0x21, 0x0b, 0x27, 0x16, 0x10, 0x16, 0x19, 0x21, 0x13, 0x18, 0x11, 0x27, 0x21, 0x0b, 0x27, 0x1c, 0x15, 0x0b, 0x21, 0x0b, 0x13, 0x27, 0x15, 0x01, 0x1c, 0x27, 0x27, 0x16, 0x15, 0x0b, 0x21, 0x0b, 0x13, 0x27, 0x15, 0x01, 0x1c, 0x27, 0x27, 0x1c, 0x16, 0x13, 0x19, 0x18, 0x27, 0x1c, 0x19, 0x0b, 0x1c, 0x28, 0x27, 0x16, 0x16, 0x13, 0x19, 0x18, 0x27, 0x1c, 0x19, 0x0b, 0x1c, 0x28, 0x27, 0x1c, 0x1e, 0x1c, 0x0b, 0x13, 0x18, 0x28, 0x21, 0x0b, 0x20, 0x0a, 0x27, 0x16, 0x1e, 0x1c, 0x0b, 0x13, 0x18, 0x28, 0x21, 0x0b, 0x20, 0x0a, 0x27, 0x1c, 0x0b, 0x16, 0x0f, 0x1d, 0x13, 0x1d, 0x27, 0x10, 0x1f, 0x1d, 0x27, 0x16, 0x0b, 0x16, 0x0f, 0x1d, 0x13, 0x1d, 0x27, 0x10, 0x1f, 0x1d, 0x27, 0x1c, 0x0d, 0x0b, 0x1d, 0x13, 0x19, 0x27, 0x17, 0x1e, 0x27, 0x06, 0x27, 0x16, 0x0d, 0x0b, 0x1d, 0x13, 0x19, 0x27, 0x17, 0x1e, 0x27, 0x06, 0x27, 0x1c, 0x0d, 0x16, 0x19, 0x1d, 0x0f, 0x0e, 0x27, 0x12, 0x13, 0x27, 0x27, 0x16, 0x0d, 0x16, 0x19, 0x1d, 0x0f, 0x0e, 0x27, 0x12, 0x13, 0x27, 0x27, 0x1c, 0x0f, 0x27, 0x17, 0x1f, 0x27, 0x1a, 0x1c, 0x19, 0x1e, 0x0f, 0x27, 0x16, 0x0f, 0x27, 0x17, 0x1f, 0x27, 0x1a, 0x1c, 0x19, 0x1e, 0x0f, 0x27, 0x1c, 0x0f, 0x16, 0x0f, 0x0d, 0x1e, 0x1c, 0x13, 0x0d, 0x27, 0x0c, 0x27, 0x16, 0x0f, 0x16, 0x0f, 0x0d, 0x1e, 0x1c, 0x13, 0x0d, 0x27, 0x0c, 0x27, 0x1c, 0xf7})&#13;&#10;&#9;&#9;local slist = Slist(midi:getData())&#13;&#10;&#9;&#9;sampleListModel:addSamples(slist)&#13;&#10;&#9;elseif value == 4 then&#13;&#10;&#9;&#9;onCreateProgram()&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="ff92dad46b9a40c99d7a8629520d4ece"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="test2" luaMethodCode="function test2()&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;local midiService    = MidiService()&#13;&#10;&#9;--LOGGER:info(&quot;result for -89 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;07 0a 0f 0f&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -148 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;0C 06 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -346 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;06 0A 0E 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -597 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;0B 0A 0D 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -1027 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;0D 0F 0B 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -1745 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;0F 02 09 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -2884 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;0C 0B 04 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -4747 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;05 07 0D 0E&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -5190 is %d&quot;, midiService:fromVssBlock(MemoryBlock(&quot;0A 0B 0B 0E&quot;), 0))&#13;&#10;&#13;&#10;&#9;--LOGGER:info(&quot;result for 07 0a 0f 0f is %s&quot;, midiService:toVssBlock(-89):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0C 06 0F 0F is %s&quot;, midiService:toVssBlock(-148):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 06 0A 0E 0F is %s&quot;, midiService:toVssBlock(-346):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0B 0A 0D 0F is %s&quot;, midiService:toVssBlock(-597):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0D 0F 0B 0F is %s&quot;, midiService:toVssBlock(-1027):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0F 02 09 0F is %s&quot;, midiService:toVssBlock(-1745):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0C 0B 04 0F is %s&quot;, midiService:toVssBlock(-2884):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 05 07 0D 0E is %s&quot;, midiService:toVssBlock(-4747):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0A 0B 0B 0E is %s&quot;, midiService:toVssBlock(-5190):toHexString(1))&#13;&#10;&#9;&#13;&#10;&#9;--LOGGER:info(&quot;result for -5000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 0E 0C&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -4000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 08 0D&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -3000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 02 0E&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -2000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 0C 0E&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -1000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 06 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -10 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;07 0E 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -8 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;0C 0E 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -5 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;04 0F 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -4 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;06 0F 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -3 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;09 0F 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -2 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;0B 0F 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for -1 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;0E 0F 0F 0F&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 0 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 1 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;02 00 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 2 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;05 00 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 3 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;07 00 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 5 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;0C 00 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 7 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;02 01 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 8 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;04 01 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 10 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;09 01 00 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 1000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 0A 00&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 2000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 04 01&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 3000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 0E 01&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 4000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 08 02&quot;), 0))&#13;&#10;&#9;--LOGGER:info(&quot;result for 5000 is %d&quot;, midiService:fromTuneBlock(MemoryBlock(&quot;00 00 02 03&quot;), 0))&#13;&#10;&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 0E 0C is %s&quot;, midiService:toTuneBlock(-5000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 08 0D is %s&quot;, midiService:toTuneBlock(-4000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 02 0E is %s&quot;, midiService:toTuneBlock(-3000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 0C 0E is %s&quot;, midiService:toTuneBlock(-2000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 06 0F is %s&quot;, midiService:toTuneBlock(-1000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 00 00 is %s&quot;, midiService:toTuneBlock(0):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 0A 00 is %s&quot;, midiService:toTuneBlock(1000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 04 01 is %s&quot;, midiService:toTuneBlock(2000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 0E 01 is %s&quot;, midiService:toTuneBlock(3000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 08 02 is %s&quot;, midiService:toTuneBlock(4000):toHexString(1))&#13;&#10;&#9;--LOGGER:info(&quot;result for 00 00 02 03 is %s&quot;, midiService:toTuneBlock(5000):toHexString(1))&#13;&#10;&#13;&#10;--&#9;function verifyFloat2Nibbles(value, expectedMemBlock)&#13;&#10;--&#9;&#9;local temp = string.upper(midiService:float2nibbles2(value):toHexString(1))&#13;&#10;--&#9;&#9;assert(expectedMemBlock == temp, &#13;&#10;--&#9;&#9;&#9;string.format(&quot;Incorrect result for %.2f, expected %s, got %s&quot;, value, expectedMemBlock, temp))&#13;&#10;--&#9;end&#13;&#10;--&#13;&#10;--&#9;verifyFloat2Nibbles(-50.00, &quot;00 00 0E 0C&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-40.00, &quot;00 00 08 0D&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-30.00, &quot;00 00 02 0E&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-20.00, &quot;00 00 0C 0E&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-10.00, &quot;00 00 06 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.10, &quot;07 0E 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.08, &quot;0C 0E 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.05, &quot;04 0F 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.04, &quot;06 0F 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.03, &quot;09 0F 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.02, &quot;0B 0F 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(-0.01, &quot;0E 0F 0F 0F&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0, &quot;00 00 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.01, &quot;02 00 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.02, &quot;05 00 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.03, &quot;07 00 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.05, &quot;0C 00 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.07, &quot;02 01 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.08, &quot;04 01 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(0.10, &quot;09 01 00 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(10.00, &quot;00 00 0A 00&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(20.00, &quot;00 00 04 01&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(30.00, &quot;00 00 0E 01&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(40.00, &quot;00 00 08 02&quot;)&#13;&#10;--&#9;verifyFloat2Nibbles(50.00, &quot;00 00 02 03&quot;)&#13;&#10;&#9;--local test = { apa = 1, bapa = 2}&#13;&#10;&#9;--local pdata = Pdata()&#13;&#10;&#9;--console(string.format(&quot;Pdata %s&quot;, pdata:toJson()))&#13;&#10;&#9;--local replaced = string.gsub(pdata:toJson(), &quot;&#94;{&quot;, string.format(&quot;{data = \&quot;%s\&quot;,&quot;, pdata:toString()), 1)&#13;&#10;&#9;--console(string.format(&quot;pdata replaced %s&quot;, replaced))&#13;&#10;&#9;--local result = json.encode(programListModel)&#13;&#10;&#9;--console(string.format(&quot;Result %s&quot;, result))&#13;&#10;&#9;local jsonService = JsonService()&#13;&#10;&#9;local temp = jsonService:encode(programListModel)&#13;&#10;&#9;console(string.format(&quot;Json Before %s&quot;, temp))&#13;&#10;&#9;local pl = jsonService:decode(temp)&#13;&#10;&#9;console(string.format(&quot;Json After %s&quot;, jsonService:encode(pl)))&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="0a4af26f182f4a4f8c39508b586911c4"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="global" uuid="70f5a1f4e0074e7f82c51a32109c97c9">
          <luaMethod luaMethodName="onMidiReceived" luaMethodCode="--&#10;-- Called when a panel receives a midi message (does not need to match any modulator mask)&#10;-- @midi   CtrlrMidiMessage object&#10;--&#10;&#10;function onMidiReceived(midi)&#13;&#10;&#13;&#10;    -- This variable stops index issues during panel bootup&#13;&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#13;&#10;        return&#13;&#10;    end&#13;&#10;&#13;&#10;&#9;midiSrvc:dispatchMidi(midi)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="e6d4e77511904258a78606e738edac5a"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onToggleEditor" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;function onToggleEditor(mod, value)&#13;&#10;    -- This variable stops index issues during panel bootup&#10;    if panel:getBootstrapState() or panel:getProgramState() then&#10;        return&#10;    end&#13;&#10;&#13;&#10;&#9;panelController:toggleEditor(value)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="b27b89ae9ed54880b894b788a2c64832"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onPanelSaveState" luaMethodCode="--&#10;-- Called when data needs saving&#10;--&#10;function onPanelSaveState(stateData)&#13;&#10;&#13;&#10;&#9;local jsonService = JsonService()&#13;&#10;&#9;--stateData:setProperty(drumMapProperty, jsonService:encode(drumMapModel))&#10;&#9;--stateData:setProperty(programListProperty, jsonService:encode(programListModel))&#10;&#9;--stateData:setProperty(sampleListProperty, jsonService:encode(sampleListModel))&#10;&#9;--stateData:setProperty(floppyImgPathProperty, jsonService:encode(floppyImgPath))&#10;&#9;--stateData:setProperty(editSampleProperty, jsonService:encode(editSample))&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="bb0027611d344d4e88349944eb556e77"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onPanelRestoreState" luaMethodCode="--&#10;-- Called when data is restored&#10;--&#10;function onPanelRestoreState(stateData)&#13;&#10;&#9;local jsonService = JsonService()&#13;&#10;&#13;&#10;&#9;--if stateData:getProperty(drumMapProperty) ~= nil then&#13;&#10;&#9;--&#9;drumMapModel = jsonService:decode(stateData:getProperty(drumMapProperty))&#13;&#10;&#9;--&#9;drumMapCtrl:setDrumMap(drumMapModel)&#13;&#10;&#9;--&#9;drumMapSrvc:setDrumMap(drumMapModel)&#13;&#10;&#9;--end&#13;&#10;    --&#13;&#10;&#9;--if stateData:getProperty(programListProperty) ~= nil then&#13;&#10;&#9;--&#9;programListModel = jsonService:decode(stateData:getProperty(programListProperty))&#13;&#10;&#9;--&#9;programCtrl:setProgramList(programListModel)&#13;&#10;&#9;--&#9;programSrvc:setProgramList(programListModel)&#13;&#10;&#9;--end&#13;&#10;    --&#13;&#10;&#9;--if stateData:getProperty(sampleListProperty) ~= nil then&#13;&#10;&#9;--&#9;sampleListModel = jsonService:decode(stateData:getProperty(sampleListProperty))&#13;&#10;&#9;--&#9;sampleListCtrl:setSampleList(sampleListModel)&#13;&#10;&#9;--&#9;drumMapSrvc:setSampleList(sampleListModel)&#13;&#10;&#9;--end&#13;&#10;    --&#13;&#10;&#9;--if stateData:getProperty(floppyImgPathProperty) ~= nil then&#13;&#10;&#9;--&#9;floppyImgPath = jsonService:decode(stateData:getProperty(floppyImgPathProperty))&#13;&#10;&#9;--end&#13;&#10;    --&#13;&#10;&#9;--if stateData:getProperty(editSampleProperty) ~= nil then&#13;&#10;&#9;--&#9;editSample = jsonService:decode(stateData:getProperty(editSampleProperty))&#13;&#10;&#9;--end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="944e95685a504ce39516e9c33fc20159"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onPanelLoaded" luaMethodCode="--&#10;-- Called when the panel has finished loading&#10;--&#10;-- @type the type of instance beeing started, types available in the CtrlrPanel&#10;-- class as enum&#10;--&#10;-- InstanceSingle&#10;-- InstanceMulti&#10;-- InstanceSingleRestriced&#10;-- InstanceSingleEngine&#10;-- InstanceMultiEngine&#10;-- InstanceSingleRestrictedEngine&#10;--&#10;function onPanelLoaded(type)&#13;&#10;&#13;&#10;&#9;panel:setProperty (&quot;panelGlobalVariables&quot;, &quot;0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0&quot;, false)&#13;&#10;&#9;loopAtResource = resources:getResource(&quot;AkaiLoopAt&quot;)&#13;&#10;&#9;loopAtImage = Image()&#13;&#10;&#9;if loopAtResource ~= nil then&#13;&#10;&#9;&#9;loopAtImage = loopAtResource:asImage()&#13;&#10;&#9;else&#13;&#10;&#9;&#9;LOGGER:warn(&quot;loopAtResource invalid, panel will crash&quot;)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local getPath = function(labelName)&#13;&#10;&#9;&#9;return File(panel:getComponent(labelName):getText())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;workFolder   = getPath(&quot;workPathLabel&quot;)&#13;&#10;&#13;&#10;&#9;drumMapModel = DrumMap()&#13;&#10;&#9;programListModel = ProgramList()&#13;&#10;&#9;sampleListModel = SampleList()&#13;&#10;&#9;floppyImgPath = nil&#13;&#10;&#9;editSample = nil&#10;&#13;&#10;&#9;&#13;&#10;&#9;drumMapCtrl:setDrumMap(drumMapModel)&#13;&#10;&#9;programCtrl:setProgramList(programListModel)&#13;&#10;&#9;sampleListCtrl:setSampleList(sampleListModel)&#13;&#10;&#13;&#10;&#9;local processListener = function(running)&#13;&#10;&#9;&#9;if running then&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Running process...&quot;)&#13;&#10;&#9;&#9;&#9;drumMapCtrl:toggleActivation(&quot;cancelTransfer&quot;, true)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Ready.&quot;)&#13;&#10;&#9;&#9;&#9;drumMapCtrl:toggleActivation(&quot;cancelTransfer&quot;, false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;midiSrvc    = MidiService()&#13;&#10;&#9;processSrvc = ProcessService(processListener)&#13;&#10;&#9;programSrvc = ProgramService()&#13;&#10;&#9;programSrvc:setProgramList(programListModel)&#13;&#10;&#9;drumMapSrvc = DrumMapService()&#13;&#10;&#9;drumMapSrvc:setDrumMap(drumMapModel)&#13;&#10;&#9;drumMapSrvc:setSampleList(sampleListModel)&#13;&#10;&#13;&#10;&#9;hxcSrvc     = HxcService()&#13;&#10;&#9;s2kDieSrvc  = S2kDieService(getPath(&quot;s2kDiePathLabel&quot;), getPath(&quot;setfdprmPathLabel&quot;))&#13;&#10;&#13;&#10;&#9;PanelController = AbstractController()&#13;&#10;&#13;&#10;&#9;function PanelController:toggleEditor(visibleLayerIndex)&#10;&#9;&#9;local PROGRAM, SAMPLE, DRUMMAP = 0, 1, 2&#10;&#9;&#10;&#9;&#9;if visibleLayerIndex == SAMPLE and editSample ~= nil then&#10;&#9;&#9;&#9;self:updateSampleEdit(editSample, true)&#10;&#9;&#9;elseif visibleLayerIndex == DRUMMAP then&#10;&#9;&#9;&#9;drumMapCtrl:updateStatus(&quot;Select a sample and a key group&quot;)&#10;&#9;&#9;&#9;drumMapCtrl:updateDrumMap(drumMapModel)&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;self:toggleLayerVisibility(&quot;ProgramBackground&quot;, visibleLayerIndex == PROGRAM)&#10;&#9;&#9;self:toggleLayerVisibility(&quot;ProgramControls&quot;, visibleLayerIndex == PROGRAM)&#10;&#9;&#9;self:toggleLayerVisibility(&quot;SampleBackground&quot;, visibleLayerIndex == SAMPLE)&#10;&#9;&#9;self:toggleLayerVisibility(&quot;Sample&quot;, visibleLayerIndex == SAMPLE)&#10;&#9;&#9;self:toggleLayerVisibility(&quot;SampleTrim&quot;, visibleLayerIndex == SAMPLE)&#10;&#9;&#9;self:toggleLayerVisibility(&quot;SampleLoop&quot;, visibleLayerIndex == SAMPLE)&#10;&#9;&#9;self:toggleLayerVisibility(&quot;Drummap&quot;, visibleLayerIndex == DRUMMAP)&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function PanelController:setFileSystemRoot(comp, path)&#13;&#10;&#9;&#9;comp:setProperty(&quot;uiFileListCurrentRoot&quot;, path, false)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function PanelController:initFileSystemPath(operatingSystem)&#13;&#10;&#9;&#9;local comp = panel:getComponent(&quot;wavSelector&quot;)&#13;&#10;&#9;&#9;if operatingSystem == &quot;win&quot; then&#13;&#10;&#9;&#9;&#9;self:setFileSystemRoot(comp, os.getenv(&quot;USERPROFILE&quot;))&#13;&#10;&#9;&#9;elseif operatingSystem == &quot;mac&quot; then&#13;&#10;&#9;&#9;&#9;self:setFileSystemRoot(comp, os.getenv(&quot;HOME&quot;))&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;self:setFileSystemRoot(comp, &quot;&quot;)&#13;&#10;&#9;&#9;end&#9;&#9;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;panelController = PanelController:new()&#13;&#10;&#9;panelController:initFileSystemPath(operatingSystem)&#13;&#10;&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="295a3739f5aa4a24aa97c55a5eb2eb6d"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="onPanelBeforeLoad" luaMethodCode="--&#10;-- Called when the panel is created, no modulators will exist at this point&#10;-- consider this the panels constructor&#10;--&#10;function onPanelBeforeLoad()&#13;&#10;&#13;&#10;&#9;-- Init global constants&#13;&#10;&#9;STATE_DEV, STATE_PROD = 1, 2&#13;&#10;&#9;if panelState == 0 then&#13;&#10;&#9;&#9;panelState = STATE_PROD&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;eol = &quot;\n&quot;&#13;&#10;&#9;pathseparator = package.config:sub(1,1)&#13;&#10;&#9;operatingSystem = &quot;win&quot;&#13;&#10;&#9;if pathseparator == &quot;/&quot; then&#13;&#10;&#9;&#9;operatingSystem = &quot;mac&quot;&#13;&#10;&#9;end&#13;&#10;&#9;LUA_CLASS_NAME = &quot;LUA_CLASS_NAME&quot;&#13;&#10;&#13;&#10;&#9;-- Init logger&#13;&#10;&#9;LOGGER = Logger(&quot;Global&quot;)&#10;&#9;LOGGER:info(&quot;[initPanel] Initializing...&quot;)&#10;&#13;&#10;&#13;&#10;&#9;INTELL_TYPE, CYCLIC_TYPE = 0, 1&#13;&#10;&#9;NO_LOOPING_TYPE, LP_IN_RELEASE_TYPE, ONE_SHOT_TYPE = 0, 1, 2&#13;&#10;&#13;&#10;&#9;programBlock = {&#13;&#10;&#9;&#9;[&quot;KGRP1@&quot;]      = 1,&#13;&#10;&#9;&#9;[&quot;PRNAME&quot;]      = 3,&#13;&#10;&#9;&#9;[&quot;PRGNUM&quot;]      = 15,&#13;&#10;&#9;&#9;[&quot;PMCHAN&quot;]      = 16,&#13;&#10;&#9;&#9;[&quot;POLYPH&quot;]      = 17,&#13;&#10;&#9;&#9;[&quot;PRIORT&quot;]      = 18,&#13;&#10;&#9;&#9;[&quot;PLAYLO&quot;]      = 19,&#13;&#10;&#9;&#9;[&quot;PLAYHI&quot;]      = 20,&#13;&#10;&#9;&#9;[&quot;OSHIFT&quot;]      = 21,&#13;&#10;&#9;&#9;[&quot;OUTPUT&quot;]      = 22,&#13;&#10;&#9;&#9;[&quot;STEREO&quot;]      = 23,&#13;&#10;&#9;&#9;[&quot;PANPOS&quot;]      = 24,&#13;&#10;&#9;&#9;[&quot;PRLOUD&quot;]      = 25,&#13;&#10;&#9;&#9;[&quot;V_LOUD&quot;]      = 26,&#13;&#10;&#9;&#9;[&quot;K_LOUD&quot;]      = 27,&#13;&#10;&#9;&#9;[&quot;P_LOUD&quot;]      = 28,&#13;&#10;&#9;&#9;[&quot;PANRAT&quot;]      = 29,&#13;&#10;&#9;&#9;[&quot;PANDEP&quot;]      = 30,&#13;&#10;&#9;&#9;[&quot;PANDEL&quot;]      = 31,&#13;&#10;&#9;&#9;[&quot;K_PANP&quot;]      = 32,&#13;&#10;&#9;&#9;[&quot;LFORAT&quot;]      = 33,&#13;&#10;&#9;&#9;[&quot;LFODEP&quot;]      = 34,&#13;&#10;&#9;&#9;[&quot;LFODEL&quot;]      = 35,&#13;&#10;&#9;&#9;[&quot;MWLDEP&quot;]      = 36,&#13;&#10;&#9;&#9;[&quot;PRSDEP&quot;]      = 37,&#13;&#10;&#9;&#9;[&quot;VELDEP&quot;]      = 38,&#13;&#10;&#9;&#9;[&quot;B_PTCH&quot;]      = 39,&#13;&#10;&#9;&#9;[&quot;P_PTCH&quot;]      = 40,&#13;&#10;&#9;&#9;[&quot;KXFADE&quot;]      = 41,&#13;&#10;&#9;&#9;[&quot;GROUPS&quot;]      = 42,&#13;&#10;&#9;&#9;[&quot;TPNUM&quot;]       = 43,&#13;&#10;&#9;&#9;[&quot;TEMPER&quot;]      = 44,&#13;&#10;&#9;&#9;[&quot;ECHOUT&quot;]      = 56,&#13;&#10;&#9;&#9;[&quot;MW_PAN&quot;]      = 57,&#13;&#10;&#9;&#9;[&quot;COHERE&quot;]      = 58,&#13;&#10;&#9;&#9;[&quot;DESYNC&quot;]      = 59,&#13;&#10;&#9;&#9;[&quot;PLAW&quot;]        = 60,&#13;&#10;&#9;&#9;[&quot;VASSOQ&quot;]      = 61,&#13;&#10;&#9;&#9;[&quot;SPLOUD&quot;]      = 62,&#13;&#10;&#9;&#9;[&quot;SPATT&quot;]       = 63,&#13;&#10;&#9;&#9;[&quot;SPFILT&quot;]      = 64,&#13;&#10;&#9;&#9;[&quot;PTUNO&quot;]       = 65,&#13;&#10;&#9;&#9;[&quot;K_LRAT&quot;]      = 67,&#13;&#10;&#9;&#9;[&quot;K_LDEP&quot;]      = 68,&#13;&#10;&#9;&#9;[&quot;K_LDEL&quot;]      = 69,&#13;&#10;&#9;&#9;[&quot;VOSCL&quot;]       = 70,&#13;&#10;&#9;&#9;[&quot;VSSCL&quot;]       = 71,&#13;&#10;&#9;&#9;[&quot;LEGATO&quot;]      = 72,&#13;&#10;&#9;&#9;[&quot;B_PTCHD&quot;]     = 73,&#13;&#10;&#9;&#9;[&quot;B_MODE&quot;]      = 74,&#13;&#10;&#9;&#9;[&quot;TRANSPOSE&quot;]   = 75,&#13;&#10;&#9;&#9;[&quot;MODSPAN1&quot;]    = 76,&#13;&#10;&#9;&#9;[&quot;MODSPAN2&quot;]    = 77,&#13;&#10;&#9;&#9;[&quot;MODSPAN3&quot;]    = 78,&#13;&#10;&#9;&#9;[&quot;MODSAMP1&quot;]    = 79,&#13;&#10;&#9;&#9;[&quot;MODSAMP2&quot;]    = 80,&#13;&#10;&#9;&#9;[&quot;MODSLFOT&quot;]    = 81,&#13;&#10;&#9;&#9;[&quot;MODSLFOL&quot;]    = 82,&#13;&#10;&#9;&#9;[&quot;MODSLFOD&quot;]    = 83,&#13;&#10;&#9;&#9;[&quot;MODSFILT1&quot;]   = 84,&#13;&#10;&#9;&#9;[&quot;MODSFILT2&quot;]   = 85,&#13;&#10;&#9;&#9;[&quot;MODSFILT3&quot;]   = 86,&#13;&#10;&#9;&#9;[&quot;MODSPITCH&quot;]   = 87,&#13;&#10;&#9;&#9;[&quot;MODSAMP3&quot;]    = 88,&#13;&#10;&#9;&#9;[&quot;MODVPAN1&quot;]    = 89,&#13;&#10;&#9;&#9;[&quot;MODVPAN2&quot;]    = 90,&#13;&#10;&#9;&#9;[&quot;MODVPAN3&quot;]    = 91,&#13;&#10;&#9;&#9;[&quot;MODVAMP1&quot;]    = 92,&#13;&#10;&#9;&#9;[&quot;MODVAMP2&quot;]    = 93,&#13;&#10;&#9;&#9;[&quot;MODVLFOR&quot;]    = 94,&#13;&#10;&#9;&#9;[&quot;MODVLVOL&quot;]    = 95,&#13;&#10;&#9;&#9;[&quot;MODVLFOD&quot;]    = 96,&#13;&#10;&#9;&#9;[&quot;LFO1WAVE&quot;]    = 97,&#13;&#10;&#9;&#9;[&quot;LFO2WAVE&quot;]    = 98,&#13;&#10;&#9;&#9;[&quot;MODSLFLT2_1&quot;] = 99,&#13;&#10;&#9;&#9;[&quot;MODSLFLT2_2&quot;] = 100,&#13;&#10;&#9;&#9;[&quot;MODSLFLT2_3&quot;] = 101,&#13;&#10;&#9;&#9;[&quot;lfo2trig&quot;]    = 102,&#13;&#10;&#9;&#9;[&quot;Reserved&quot;]    = 103,&#13;&#10;&#9;&#9;[&quot;PORTIME&quot;]     = 110,&#13;&#10;&#9;&#9;[&quot;PORTYPE&quot;]     = 111,&#13;&#10;&#9;&#9;[&quot;PORTEN&quot;]      = 112,&#13;&#10;&#9;&#9;[&quot;PFXCHAN&quot;]     = 113,&#13;&#10;&#9;&#9;[&quot;PFXSLEV&quot;]     = 114&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;keyGroupBlock = {&#13;&#10;&#9;&#9;[&quot;KGIDENT&quot;]     = 0,&#13;&#10;&#9;&#9;[&quot;NXTKG@&quot;]      = 1,&#13;&#10;&#9;&#9;[&quot;LONOTE&quot;]      = 3,&#13;&#10;&#9;&#9;[&quot;HINOTE&quot;]      = 4,&#13;&#10;&#9;&#9;[&quot;KGTUNO&quot;]      = 5,&#13;&#10;&#9;&#9;[&quot;FILFRQ&quot;]      = 7,&#13;&#10;&#9;&#9;[&quot;K_FREQ&quot;]      = 8,&#13;&#10;&#9;&#9;[&quot;V_FREQ&quot;]      = 9,&#13;&#10;&#9;&#9;[&quot;P_FREQ&quot;]      = 10,&#13;&#10;&#9;&#9;[&quot;E_FREQ&quot;]      = 11,&#13;&#10;&#9;&#9;[&quot;ATTAK1&quot;]      = 12,&#13;&#10;&#9;&#9;[&quot;DECAY1&quot;]      = 13,&#13;&#10;&#9;&#9;[&quot;SUSTN1&quot;]      = 14,&#13;&#10;&#9;&#9;[&quot;RELSE1&quot;]      = 15,&#13;&#10;&#9;&#9;[&quot;V_ATT1&quot;]      = 16,&#13;&#10;&#9;&#9;[&quot;V_REL1&quot;]      = 17,&#13;&#10;&#9;&#9;[&quot;O_REL1&quot;]      = 18,&#13;&#10;&#9;&#9;[&quot;K_DAR1&quot;]      = 19,&#13;&#10;&#9;&#9;[&quot;ENV2R1&quot;]      = 20,&#13;&#10;&#9;&#9;[&quot;ENV2R3&quot;]      = 21,&#13;&#10;&#9;&#9;[&quot;ENV2L3&quot;]      = 22,&#13;&#10;&#9;&#9;[&quot;ENV2R4&quot;]      = 23,&#13;&#10;&#9;&#9;[&quot;V_ATT2&quot;]      = 24,&#13;&#10;&#9;&#9;[&quot;V_REL2&quot;]      = 25,&#13;&#10;&#9;&#9;[&quot;O_REL2&quot;]      = 26,&#13;&#10;&#9;&#9;[&quot;K_DAR2&quot;]      = 27,&#13;&#10;&#9;&#9;[&quot;V_ENV2&quot;]      = 28,&#13;&#10;&#9;&#9;[&quot;E_PTCH&quot;]      = 29,&#13;&#10;&#9;&#9;[&quot;VXFADE&quot;]      = 30,&#13;&#10;&#9;&#9;[&quot;VZONES&quot;]      = 31,&#13;&#10;&#9;&#9;[&quot;LKXF&quot;]        = 32,&#13;&#10;&#9;&#9;[&quot;RKXF&quot;]        = 33,&#13;&#10;&#9;&#9;[&quot;SNAME1&quot;]      = 34,&#13;&#10;&#9;&#9;[&quot;LOVEL1&quot;]      = 46,&#13;&#10;&#9;&#9;[&quot;HIVEL1&quot;]      = 47,&#13;&#10;&#9;&#9;[&quot;VTUNO1&quot;]      = 48,&#13;&#10;&#9;&#9;[&quot;VLOUD1&quot;]      = 50,&#13;&#10;&#9;&#9;[&quot;VFREQ1&quot;]      = 51,&#13;&#10;&#9;&#9;[&quot;VPANO1&quot;]      = 52,&#13;&#10;&#9;&#9;[&quot;ZPLAY1&quot;]      = 53,&#13;&#10;&#9;&#9;[&quot;LVXF1&quot;]       = 54,&#13;&#10;&#9;&#9;[&quot;HVXF1&quot;]       = 55,&#13;&#10;&#9;&#9;[&quot;SBADD1&quot;]      = 56,&#13;&#10;&#9;&#9;[&quot;SNAME2&quot;]      = 58,&#13;&#10;&#9;&#9;[&quot;LOVEL2&quot;]      = 70,&#13;&#10;&#9;&#9;[&quot;HIVEL2&quot;]      = 71,&#13;&#10;&#9;&#9;[&quot;VTUNO2&quot;]      = 72,&#13;&#10;&#9;&#9;[&quot;VLOUD2&quot;]      = 74,&#13;&#10;&#9;&#9;[&quot;VFREQ2&quot;]      = 75,&#13;&#10;&#9;&#9;[&quot;VPANO2&quot;]      = 76,&#13;&#10;&#9;&#9;[&quot;ZPLAY2&quot;]      = 77,&#13;&#10;&#9;&#9;[&quot;LVXF2&quot;]       = 78,&#13;&#10;&#9;&#9;[&quot;HVXF2&quot;]       = 79,&#13;&#10;&#9;&#9;[&quot;SBADD2&quot;]      = 80,&#13;&#10;&#9;&#9;[&quot;SNAME3&quot;]      = 82,&#13;&#10;&#9;&#9;[&quot;LOVEL3&quot;]      = 94,&#13;&#10;&#9;&#9;[&quot;HIVEL3&quot;]      = 95,&#13;&#10;&#9;&#9;[&quot;VTUNO3&quot;]      = 96,&#13;&#10;&#9;&#9;[&quot;VLOUD3&quot;]      = 98,&#13;&#10;&#9;&#9;[&quot;VFREQ3&quot;]      = 99,&#13;&#10;&#9;&#9;[&quot;VPANO3&quot;]      = 100,&#13;&#10;&#9;&#9;[&quot;ZPLAY3&quot;]      = 101,&#13;&#10;&#9;&#9;[&quot;LVXF3&quot;]       = 102,&#13;&#10;&#9;&#9;[&quot;HVXF3&quot;]       = 103,&#13;&#10;&#9;&#9;[&quot;SBADD3&quot;]      = 104,&#13;&#10;&#9;&#9;[&quot;SNAME4&quot;]      = 106,&#13;&#10;&#9;&#9;[&quot;LOVEL4&quot;]      = 118,&#13;&#10;&#9;&#9;[&quot;HIVEL4&quot;]      = 119,&#13;&#10;&#9;&#9;[&quot;VTUNO4&quot;]      = 120,&#13;&#10;&#9;&#9;[&quot;VLOUD4&quot;]      = 122,&#13;&#10;&#9;&#9;[&quot;VFREQ4&quot;]      = 123,&#13;&#10;&#9;&#9;[&quot;VPANO4&quot;]      = 124,&#13;&#10;&#9;&#9;[&quot;ZPLAY4&quot;]      = 125,&#13;&#10;&#9;&#9;[&quot;LVXF4&quot;]       = 126,&#13;&#10;&#9;&#9;[&quot;HVXF4&quot;]       = 127,&#13;&#10;&#9;&#9;[&quot;SBADD4&quot;]      = 128,&#13;&#10;&#9;&#9;[&quot;KBEAT&quot;]       = 130,&#13;&#10;&#9;&#9;[&quot;AHOLD&quot;]       = 131,&#13;&#10;&#9;&#9;[&quot;CP1&quot;]         = 132,&#13;&#10;&#9;&#9;[&quot;CP2&quot;]         = 133,&#13;&#10;&#9;&#9;[&quot;CP3&quot;]         = 134,&#13;&#10;&#9;&#9;[&quot;CP4&quot;]         = 135,&#13;&#10;&#9;&#9;[&quot;VZOUT1&quot;]      = 136,&#13;&#10;&#9;&#9;[&quot;VZOUT2&quot;]      = 137,&#13;&#10;&#9;&#9;[&quot;VZOUT3&quot;]      = 138,&#13;&#10;&#9;&#9;[&quot;VZOUT4&quot;]      = 139,&#13;&#10;&#9;&#9;[&quot;VSS1&quot;]        = 140,&#13;&#10;&#9;&#9;[&quot;VSS2&quot;]        = 142,&#13;&#10;&#9;&#9;[&quot;VSS3&quot;]        = 144,&#13;&#10;&#9;&#9;[&quot;VSS4&quot;]        = 146,&#13;&#10;&#9;&#9;[&quot;KV_LO&quot;]       = 148,&#13;&#10;&#9;&#9;[&quot;FILQ&quot;]        = 149,&#13;&#10;&#9;&#9;[&quot;L_PTCH&quot;]      = 150,&#13;&#10;&#9;&#9;[&quot;MODVFILT1&quot;]   = 151,&#13;&#10;&#9;&#9;[&quot;MODVFILT2&quot;]   = 152,&#13;&#10;&#9;&#9;[&quot;MODVFILT3&quot;]   = 153,&#13;&#10;&#9;&#9;[&quot;MODVPITCH&quot;]   = 154,&#13;&#10;&#9;&#9;[&quot;MODVAMP3&quot;]    = 155,&#13;&#10;&#9;&#9;[&quot;ENV2L1&quot;]      = 156,&#13;&#10;&#9;&#9;[&quot;ENV2R2&quot;]      = 157,&#13;&#10;&#9;&#9;[&quot;ENV2L2&quot;]      = 158,&#13;&#10;&#9;&#9;[&quot;ENV2L4&quot;]      = 159,&#13;&#10;&#9;&#9;[&quot;kgmute&quot;]      = 160,&#13;&#10;&#9;&#9;[&quot;PFXCHAN&quot;]     = 161,&#13;&#10;&#9;&#9;[&quot;PFXSLEV&quot;]     = 162,&#13;&#10;&#9;&#9;[&quot;Reserved&quot;]    = 163,&#13;&#10;&#9;&#9;[&quot;LSI2_ON&quot;]     = 168,&#13;&#10;&#9;&#9;[&quot;FLT2GAIN&quot;]    = 169,&#13;&#10;&#9;&#9;[&quot;FLT2MODE&quot;]    = 170,&#13;&#10;&#9;&#9;[&quot;FLT2Q&quot;]       = 171,&#13;&#10;&#9;&#9;[&quot;TONEFREQ&quot;]    = 172,&#13;&#10;&#9;&#9;[&quot;TONESLOP&quot;]    = 173,&#13;&#10;&#9;&#9;[&quot;MODVFLT2_1&quot;]  = 174,&#13;&#10;&#9;&#9;[&quot;MODVFLT2_2&quot;]  = 175,&#13;&#10;&#9;&#9;[&quot;MODVFLT2_3&quot;]  = 176,&#13;&#10;&#9;&#9;[&quot;FIL2FR&quot;]      = 177,&#13;&#10;&#9;&#9;[&quot;K_FRQ2&quot;]      = 178,&#13;&#10;&#9;&#9;[&quot;ENV3R1&quot;]      = 179,&#13;&#10;&#9;&#9;[&quot;ENV3L1&quot;]      = 180,&#13;&#10;&#9;&#9;[&quot;ENV3R2&quot;]      = 181,&#13;&#10;&#9;&#9;[&quot;ENV3L2&quot;]      = 182,&#13;&#10;&#9;&#9;[&quot;ENV3R3&quot;]      = 183,&#13;&#10;&#9;&#9;[&quot;ENV3L3&quot;]      = 184,&#13;&#10;&#9;&#9;[&quot;ENV3R4&quot;]      = 185,&#13;&#10;&#9;&#9;[&quot;ENV3L4&quot;]      = 186,&#13;&#10;&#9;&#9;[&quot;V_ATT3&quot;]      = 187,&#13;&#10;&#9;&#9;[&quot;V_REL3&quot;]      = 188,&#13;&#10;&#9;&#9;[&quot;O_REL3&quot;]      = 189,&#13;&#10;&#9;&#9;[&quot;K_DAR3&quot;]      = 190,&#13;&#10;&#9;&#9;[&quot;V_ENV3&quot;]      = 191&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;drumMapCtrl = DrumMapController()&#13;&#10;&#9;programCtrl = ProgramController()&#10;&#9;sampleListCtrl = SampleListController()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="b85fb52ba25640e599a1d43caf2138af"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethod luaMethodName="fileDialog" luaMethodCode="function fileDialog()&#10;&#9;return utils.getDirectoryWindow(&quot;Select folder&quot;, File(&quot;&quot;).getSpecialLocation(File.userDesktopDirectory))&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="ce88b5581f25451db10194cb516be6ac"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="DrumMapController" luaMethodCode="function DrumMapController()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __DrumMapController:new()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __DrumMapController ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;DrumMapController&quot;)&#13;&#10;&#13;&#10;&#9;local markGroup = function(groupName, error)&#10;&#9;&#9;local color = &quot;FF7A7269&quot;&#10;&#9;&#9;if error then&#10;&#9;&#9;&#9;color = &quot;FFEA402A&quot;&#10;&#9;&#9;&#9;retval = false&#10;&#9;&#9;end&#10;&#9;&#9;&#10;&#9;&#9;panel:getComponent(groupName):setProperty(&quot;uiGroupOutlineColour1&quot;, color, false)&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local disablePad = function(comp)&#10;&#9;&#9;comp:setProperty(&quot;uiButtonColourOff&quot;, &quot;ff93b4ff&quot;, false)&#10;&#9;&#9;comp:setProperty(&quot;uiButtonColourOn&quot;, &quot;ff93b4ff&quot;, false)&#13;&#10;&#9;end&#13;&#10;&#10;&#9;local enablePad = function(comp)&#10;&#9;&#9;comp:setProperty(&quot;uiButtonColourOff&quot;, &quot;0xff0000ff&quot;, false)&#10;&#9;&#9;comp:setProperty(&quot;uiButtonColourOn&quot;, &quot;0xff0000ff&quot;, false)&#10;&#9;end&#10;&#10;&#9;local setPadValue = function(padName, value)&#10;&#9;&#9;local pad = panel:getComponent(padName)&#10;&#9;&#10;&#9;&#9;if value == nil or value == &quot;&quot; then&#10;&#9;&#9;&#9;pad:setProperty(&quot;componentVisibleName&quot;, &quot;&quot;, true)&#9;&#13;&#10;&#9;&#9;&#9;pad:setProperty(&quot;componentLabelVisible&quot;, 0, true)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;pad:setProperty(&quot;componentLabelVisible&quot;, 1, true)&#10;&#9;&#9;&#9;pad:setProperty(&quot;componentVisibleName&quot;, value, true)&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#10;&#9;__DrumMapController = AbstractController()&#13;&#10;&#13;&#10;&#9;function __DrumMapController:setDrumMap(drumMap)&#9;&#10;&#9;&#9;local drumMapListener = function(dm)&#13;&#10;&#9;&#9;&#9;self:updateDrumMap(dm)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;drumMap:addListener(drumMapListener)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapController:updateDrumMap(drumMap)&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update pads&#10;&#9;&#9;--&#10;&#9;&#9;panel:getComponent(&quot;drumMapSelectionLabel&quot;):setProperty(&quot;uiLabelText&quot;, &quot;&quot;, false)&#10;&#9;&#10;&#9;&#9;local numPads = drumMap:getNumKeyGroups()&#10;&#9;&#10;&#9;&#9;for i = 1,16 do&#10;&#9;&#9;&#9;local padName = string.format(&quot;drumMap-%d&quot;, i)&#13;&#10;&#9;&#9;&#9;--log:fine(&quot;padName %s&quot;, padName)&#10;&#9;&#9;&#9;if drumMap:isSelectedKeyGroup(i) then&#10;&#9;&#9;&#9;&#9;--log:fine(&quot;selected&quot;)&#10;&#9;&#9;&#9;&#9;local comp = panel:getComponent(padName)&#10;&#9;&#9;&#9;&#9;local kgName = self:getKeyGroupName(comp)&#10;&#9;&#10;&#9;&#9;&#9;&#9;enablePad(comp)&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;panel:getComponent(&quot;drumMapSelectionLabel&quot;):setProperty(&quot;uiLabelText&quot;, kgName, false)&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;--console(&quot;not selected&quot;)&#10;&#9;&#9;&#9;&#9;disablePad(panel:getComponent(padName))&#10;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;local samplesOfPad = drumMap:getSamplesOfKeyGroup(i)&#10;&#9;&#9;&#9;setPadValue(padName, samplesOfPad)&#10;&#9;&#10;&#9;&#9;&#9;self:toggleVisibility(padName, i &lt;= numPads)&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update floppy info&#10;&#9;&#9;--&#10;&#9;&#9;local numFloppies = drumMap:getNumFloppies()&#10;&#9;&#9;local numFloppiesText = string.format(&quot;# Floppies to be transfered: %d&quot;, numFloppies)&#10;&#9;&#9;panel:getComponent(&quot;numFloppiesLabel&quot;):setText(numFloppiesText)&#10;&#9;&#10;&#9;&#9;local floppyUsagePercent = drumMapSrvc:getFloppyUsagePercent(drumMap)&#10;&#9;&#9;local floppyUsageBar = panel:getModulatorByName(&quot;floppyUsageBar&quot;)&#10;&#9;&#9;floppyUsageBar:setValue(floppyUsagePercent, false)&#10;&#9;&#9;&#10;&#9;&#9;local color = &quot;FF99CE65&quot;&#10;&#9;&#9;if floppyUsagePercent &gt; 90 then&#10;&#9;&#9;&#9;color = &quot;FFCC3824&quot;&#10;&#9;&#9;elseif floppyUsagePercent &gt; 75 then&#10;&#9;&#9;&#9;color = &quot;FFCCAA24&quot;&#10;&#9;&#9;end&#10;&#9;&#9;floppyUsageBar:getComponent():setProperty(&quot;uiSliderThumbColour&quot;, color, false)&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update assignment controls&#10;&#9;&#9;--&#10;&#9;&#9;self:toggleActivation(&quot;assignSample&quot;, drumMap:isReadyForAssignment())&#10;&#9;&#9;self:toggleActivation(&quot;clearSamples&quot;, not drumMap:isClear())&#10;&#9;&#9;self:toggleActivation(&quot;transferSamples&quot;, not drumMap:isClear())&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update range controls&#10;&#9;&#9;--&#10;&#9;&#9;local isPadSelected = drumMap:getSelectedKeyGroup() ~= nil&#10;&#9;&#9;self:toggleActivation(&quot;drumMapLowKey&quot;, isPadSelected)&#10;&#9;&#9;self:toggleActivation(&quot;drumMapHighKey&quot;, isPadSelected)&#10;&#9;&#9;self:toggleActivation(&quot;defaultDrumMapButton&quot;, isPadSelected)&#10;&#9;&#10;&#9;&#9;if isPadSelected then&#10;&#9;&#9;&#9;local keyRanges = drumMap:getKeyRangeValues()&#10;&#9;&#9;&#9;-- console(string.format(&quot;keyRagnes: %d, %d&quot;, keyRanges[1], keyRanges[2]))&#10;&#9;&#9;&#9;panel:getModulatorByName(&quot;drumMapLowKey&quot;):setValue(keyRanges[1], false)&#10;&#9;&#9;&#9;panel:getModulatorByName(&quot;drumMapHighKey&quot;):setValue(keyRanges[2], false)&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapController:updateStatus(message)&#10;&#9;&#9;panel:getComponent(&quot;lcdLabel&quot;):setText(message)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapController:getKeyGroupName(comp)&#13;&#10;&#9;&#9;local grpName = comp:getProperty(&quot;componentGroupName&quot;)&#13;&#10;&#9;&#9;local kgIndex = string.sub(grpName, 9, string.find(grpName, &quot;-grp&quot;) - 1)&#13;&#10;&#9;&#9;--log:fine(&quot;Found %s&quot;, kgIndex)&#13;&#10;&#9;&#9;return string.format(&quot;KeyGroup %s&quot;, kgIndex)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __DrumMapController:verifyTransferSettings()&#10;&#9;&#9;local retval = true&#10;&#9;&#9;&#10;&#9;&#9;markGroup(&quot;s2kDiePathGroup&quot;, not s2kDieSrvc:getS2kDiePath():exists())&#10;&#9;&#9;markGroup(&quot;workPathGroup&quot;, not workFolder:exists())&#10;&#9;&#10;&#9;&#9;-- Reset all values&#10;&#9;&#9;markGroup(&quot;hxcPathGroup&quot;, false)&#10;&#9;&#9;markGroup(&quot;setfdprmPathGroup&quot;, false)&#10;&#9;&#9;markGroup(&quot;transferMethodGroup&quot;, false)&#10;&#9;&#10;&#9;&#9;local loadMethod = panel:getModulatorByName(&quot;transferMethod&quot;):getValue()&#10;&#9;&#9;log:fine(&quot;[verifyTransferSettings] %d&quot;, loadMethod)&#10;&#9;&#10;&#9;&#9;if loadMethod == 0 then&#10;&#9;&#9;&#9;-- Floppy&#10;&#9;&#9;&#9;markGroup(&quot;setfdprmPathGroup&quot;, not setfdprmPath:exists())&#10;&#9;&#9;elseif loadMethod == 1 then&#10;&#9;&#9;&#9;-- HxC&#10;&#9;&#9;&#9;markGroup(&quot;hxcPathGroup&quot;, not File(hxcSrvc:getHxcPath()):exists())&#10;&#9;&#9;else&#10;&#9;&#9;&#9;-- MIDI -&gt; unsupported&#10;&#9;&#9;&#9;markGroup(&quot;transferMethodGroup&quot;, true)&#10;&#9;&#9;end&#10;&#9;&#9;return retval&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising DrumMapController&quot;)&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="8519b1cc782340c9b21785ee49a16691"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="ProgramController" luaMethodCode="function ProgramController()&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __ProgramController:new()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if __ProgramController ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;ProgramController&quot;)&#13;&#10;&#10;&#9;__ProgramController = AbstractController()&#13;&#10;&#13;&#10;&#9;function __ProgramController:setProgramList(programList)&#13;&#10;&#9;&#9;local programListListener = function(pl)&#13;&#10;&#9;&#9;&#9;self:updateProgramList(pl)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;programList:addListener(programListListener)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramController:updateTuneLabel(modName, semi, cent)&#13;&#10;&#9;&#9;self:setText(string.format(&quot;%s-LBL&quot;, modName), string.format(&quot;%02d.%02d&quot;, semi, cent))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramController:updateProgramList(pl)&#13;&#10;&#9;&#9;-- update program and keygroup selectors&#10;&#9;&#9;local numPrograms = pl:getNumPrograms()&#10;&#9;&#9;if numPrograms &lt; 1 then&#10;&#9;&#9;&#9;self:toggleActivation(&quot;programSelector&quot;, false)&#10;&#9;&#9;&#9;self:setText(&quot;PRNAME&quot;, &quot;Please load a program&quot;)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;end&#10;&#13;&#10;&#9;&#9;log:fine(&quot;Setting program selector max to %s&quot;, numPrograms)&#10;&#9;&#9;self:setMax(&quot;programSelector&quot;, numPrograms)&#10;&#9;&#9;local activeProgram = pl:getActiveProgram()&#10;&#9;&#9;if activeProgram == nil then&#10;&#9;&#9;&#9;self:setText(&quot;PRNAME&quot;, &quot;&quot;)&#10;&#9;&#9;&#9;log:info(&quot;Active program is nil!&quot;)&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;log:info(&quot;Found active program!&quot;)&#13;&#10;&#9;&#9;&#9;self:changeProgram(activeProgram)&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramController:changeProgram(newProgram)&#13;&#10;&#9;&#9;if self.activeProgram ~= nil then&#10;&#9;&#9;&#9;self.activeProgram:removeListener(self.programListenerId)&#10;&#9;&#9;end&#10;&#9;&#9;local programListener = function(p)&#10;&#9;&#9;&#9;self:updateProgram(p)&#10;&#9;&#9;end&#10;&#9;&#9;self.programListenerId = newProgram:addListener(programListener)&#10;&#9;&#9;self.activeProgram = newProgram&#10;&#9;&#9;self:assignProgramValues(newProgram)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramController:changeKeyGroup(keyGroupIndex)&#13;&#10;&#9;&#9;if self.activeProgram == nil then&#13;&#10;&#9;&#9;&#9;log:warn(&quot;Active program is nil! Disabling kg selector.&quot;)&#13;&#10;&#9;&#9;&#9;self:toggleActivation(&quot;kgSelector&quot;, false)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;--log:info(&quot;Before kg change: %s&quot;, self.activeProgram:getActiveKeyGroup():toString())&#13;&#10;&#9;&#9;&#9;self.activeProgram:setActiveKeyGroupIndex(keyGroupIndex)&#13;&#10;&#9;&#9;&#9;self:assignKeyGroupValues(self.activeProgram, self.activeProgram:getActiveKeyGroupIndex())&#13;&#10;&#9;&#9;&#9;--log:info(&quot;After kg change: %s&quot;, self.activeProgram:getActiveKeyGroup():toString())&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramController:assignProgramValues(program)&#13;&#10;&#9;&#9;program:setUpdating(true)&#10;&#9;&#9;--log:info(&quot;Active program name: %s&quot;, program:getName())&#13;&#10;&#9;&#9;self:setText(&quot;PRNAME&quot;, program:getName())&#13;&#10;&#9;&#9;self:toggleActivation(&quot;kgSelector&quot;, true)&#13;&#10;&#9;&#9;self:setMax(&quot;kgSelector&quot;, program:getNumKeyGroups())&#13;&#10;&#9;&#9;local currKg = self:getValue(&quot;kgSelector&quot;)&#13;&#10;&#9;&#9;if program:getActiveKeyGroupIndex() == currKg then&#13;&#10;&#9;&#9;&#9;self:assignKeyGroupValues(self.activeProgram, self.activeProgram:getActiveKeyGroupIndex())&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;self:setValue(&quot;kgSelector&quot;, program:getActiveKeyGroupIndex())&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;for k,v in pairs(programBlock) do&#13;&#10;&#9;&#9;&#9;local mod = panel:getModulatorByName(k)&#13;&#10;&#9;&#9;&#9;if mod ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;local value = program:getParamValue(k)&#13;&#10;&#9;&#9;&#9;&#9;if type(value) == &quot;string&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;mod:getComponent():setText(value)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;local absValue = value + mod:getMinNonMapped()&#13;&#10;&#9;&#9;&#9;&#9;&#9;--log:info(&quot;Setting prog modulator %s to %d (%d)&quot;, k, absValue, value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;mod:setValue(absValue, true)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;program:setUpdating(false)&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __ProgramController:assignKeyGroupValues(program, kgIndex)&#13;&#10;&#9;&#9;local keyGroup = program:getKeyGroup(kgIndex)&#13;&#10;&#13;&#10;&#9;&#9;-- TODO: Why is this necessary?&#13;&#10;&#9;&#9;if keyGroup == nil then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;keyGroup:setUpdating(true)&#13;&#10;&#9;&#9;--log:info(&quot;Updating keyGroup %d&quot;, kgIndex)&#13;&#10;&#9;&#9;for k,zone in pairs(keyGroup:getZones()) do&#13;&#10;&#9;&#9;&#9;local sampleName = zone:getSampleName()&#13;&#10;&#9;&#9;&#9;local selector = string.format(&quot;zone%dSelector&quot;, k)&#13;&#10;&#9;&#9;&#9;--log:info(&quot;Setting sample %s to %s&quot;, sampleName, selector)&#13;&#10;&#9;&#9;&#9;panel:getComponent(selector):setText(sampleName, true)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;for k,v in pairs(keyGroupBlock) do&#13;&#10;&#9;&#9;&#9;local mod = panel:getModulatorByName(k)&#13;&#10;&#9;&#9;&#9;if mod ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;local value = keyGroup:getParamValue(k)&#13;&#10;&#9;&#9;&#9;&#9;local minValue = mod:getMinNonMapped()&#13;&#10;&#9;&#9;&#9;&#9;local absValue = value + minValue&#13;&#10;&#9;&#9;&#9;&#9;if math.abs(minValue) &gt; 256 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;absValue = value&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;--log:info(&quot;Setting kg modulator %s to %d (%d)&quot;, k, absValue, value)&#13;&#10;&#9;&#9;&#9;&#9;mod:setValue(absValue, true)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;keyGroup:setUpdating(false)&#13;&#10;&#9;end&#10;&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="cad301a1abfa487da2fa02dda6fdf287"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="SampleController" luaMethodCode="function SampleController()&#13;&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __SampleController:new()&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __SampleController ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local rotate = function(compName, rot)&#10;&#9;&#9;local timesPi = 0&#10;&#9;&#9;if rot then&#10;&#9;&#9;&#9;timesPi = 1&#10;&#9;&#9;end&#10;&#9;&#9;local c = panel:getComponent(compName)&#10;&#9;&#9;local x = c:getX()+c:getWidth()/2&#10;&#9;&#9;local y = c:getY()+c:getHeight()/2&#10;&#9;&#9;transform = AffineTransform.rotation(timesPi * 3.1415926536, x, y)&#10;&#9;&#9;&#9;&#10;&#9;&#9;if transform:isSingularity() ~= true then&#10;&#9;&#9;&#9;c:setTransform (transform)&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#10;&#9;__SampleController = AbstractController()&#13;&#10;&#13;&#10;&#9;function __SampleController:setSampleList(sampleList)&#13;&#10;&#9;&#9;local sampleListListener = function(sl)&#13;&#10;&#9;&#9;&#9;self:updateSampleLists(sl)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;sampleList:addListener(sampleListListener)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleController:updateSampleEdit(sample, updateKnobs)&#10;&#9;&#10;&#9;&#9;-- Avoid infinite loops&#10;&#9;&#9;updateKnobs = updateKnobs or false&#10;&#9;&#9;if sample:isUpdating() then&#10;&#9;&#9;&#9;return&#10;&#9;&#9;elseif updateKnobs then&#10;&#9;&#9;&#9;sample:setUpdating(true)&#10;&#9;&#9;end&#10;&#9;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update trim controls&#10;&#9;&#9;--&#10;&#9;&#9;setValue(&quot;trimStart&quot;, sample:getTrimStart())&#10;&#9;&#9;setValue(&quot;trimEnd&quot;, sample:getTrimEnd())&#10;&#9;&#10;&#9;&#9;if updateKnobs then&#10;&#9;&#9;&#9;setValue(&quot;sampleTrimStartKnob&quot;, sample:getTrimStart())&#10;&#9;&#9;&#9;setValue(&quot;sampleTrimEndKnob&quot;, sample:getTrimEnd())&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update loop controls&#10;&#9;&#9;--&#10;&#9;&#10;&#9;&#9;panel:setGlobalVariable(2, sample:getLoopStart())&#10;&#9;&#9;panel:getComponent(&quot;sampleLoop&quot;):repaint()&#10;&#9;&#10;&#9;&#9;if updateKnobs then&#10;&#9;&#9;&#9;setValue(&quot;sampleLoopType&quot;, sample:getLoopType())&#10;&#9;&#9;&#9;setValue(&quot;sampleLoopTune&quot;, sample:getLoopTune())&#10;&#9;&#9;&#9;setValue(&quot;sampleLoopHold&quot;, sample:getLoopHold())&#10;&#9;&#9;&#9;setValue(&quot;sampleLoopStartMod&quot;, sample:getLoopStart())&#10;&#9;&#9;&#9;setValue(&quot;sampleLoopLength&quot;, sample:getLoopLength())&#10;&#9;&#9;&#9;setValue(&quot;sampleCrossfade&quot;, sample:getLoopCrossfade())&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update timestretch controls&#10;&#9;&#9;--&#10;&#9;&#9;toggleVisibility(&quot;sampleTimestrCyclicGrp&quot;, sample:getTimestretchType() ~= INTELL_TYPE)&#10;&#9;&#9;toggleVisibility(&quot;sampleTimestrIntellGrp&quot;, sample:getTimestretchType() == INTELL_TYPE)&#10;&#9;&#10;&#9;&#9;if updateKnobs then&#10;&#9;&#9;&#9;setValue(&quot;stretch&quot;, sample:getTimestretch())&#10;&#9;&#9;&#9;setValue(&quot;sampleTimestretchType&quot;, sample:getTimestretchType())&#10;&#9;&#9;&#9;setValue(&quot;sampleTimestretchQuality&quot;, sample:getTimestretchQuality())&#10;&#9;&#9;&#9;setValue(&quot;sampleTimestretchXfd&quot;, sample:setTimestretchCrossfade())&#10;&#9;&#9;&#9;setValue(&quot;sampleTimestretchCycleAuto&quot;, sample:getTimestretchCycleMode())&#10;&#9;&#9;&#9;setText(&quot;sampleTimestretchCyclicTime&quot;, sample:getTimestretchCycleTime())&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update resample controls&#10;&#9;&#9;--&#10;&#9;&#9;if updateKnobs then&#10;&#9;&#9;&#9;setValue(&quot;sampleResampleQuality&quot;, sample:getResampleQuality())&#10;&#9;&#9;&#9;setValue(&quot;sampleResampleBandwidth&quot;, sample:getResampleBandwidth())&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update waveform controls&#10;&#9;&#9;--&#10;&#9;&#9;if sample:getWaveform() == nil then&#10;&#9;&#9;&#9;setText(&quot;editWaveformPathLbl&quot;, &quot;Select a wav file...&quot;)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;setText(&quot;editWaveformPathLbl&quot;, sample:getWaveform():getFullPath())&#10;&#9;&#9;&#9;panel:getWaveformComponent(&quot;waveEditor&quot;):loadFromFile(sample:getWaveform())&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;--&#10;&#9;&#9;-- Update file controls&#10;&#9;&#9;--&#10;&#9;&#9;setText(&quot;sampleName&quot;, sample:getName())&#10;&#9;&#9;rotate(&quot;trimEnd&quot;, true)&#10;&#9;&#9;rotate(&quot;waveEditor&quot;, sample:getReverse())&#10;&#9;&#9;if updateKnobs then&#10;&#9;&#9;&#9;setValue(&quot;samplePitch&quot;, sample:getPitch())&#10;&#9;&#9;end&#10;&#9;&#10;&#9;&#9;-- Done updating knobs&#10;&#9;&#9;if updateKnobs then&#10;&#9;&#9;&#9;sample:setUpdating(false)&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#13;&#10;&#9;LOGGER:info(&quot;Initialising SampleController&quot;)&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="c5f07ffe978d4eceb014322519892d86"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="SampleListController" luaMethodCode="function SampleListController()&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __SampleListController:new()&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __SampleListController ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local log = Logger(&quot;SampleListController&quot;)&#13;&#10;&#10;&#9;__SampleListController = AbstractController()&#13;&#10;&#13;&#10;&#9;function __SampleListController:setSampleList(sampleList)&#13;&#10;&#9;&#9;local sampleListListener = function(sl)&#13;&#10;&#9;&#9;&#9;self:updateSampleLists(sl)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;sampleList:addListener(sampleListListener)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __SampleListController:updateSampleLists(sampleList)&#13;&#10;&#9;&#9;local sampleNames = sampleList:getSampleNames()&#10;&#9;&#9;self:toggleVisibility(&quot;noSamplesLabel&quot;, sampleNames == &quot;&quot;)&#10;&#9;&#9;self:toggleVisibility(&quot;noSamplesLabel-1&quot;, sampleNames == &quot;&quot;)&#10;&#9;&#9;self:toggleVisibility(&quot;samplerFileList&quot;, sampleNames ~= &quot;&quot;)&#10;&#9;&#9;self:toggleVisibility(&quot;samplerFileList-1&quot;, sampleNames ~= &quot;&quot;)&#10;&#9;&#9;self:setListBoxContents(&quot;samplerFileList&quot;, sampleNames)&#10;&#9;&#9;self:setListBoxContents(&quot;samplerFileList-1&quot;, sampleNames)&#10;&#9;&#9;self:setComboBoxContents(&quot;zone1Selector&quot;, sampleNames)&#10;&#9;&#9;self:setComboBoxContents(&quot;zone2Selector&quot;, sampleNames)&#10;&#9;&#9;self:setComboBoxContents(&quot;zone3Selector&quot;, sampleNames)&#10;&#9;&#9;self:setComboBoxContents(&quot;zone4Selector&quot;, sampleNames)&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising SampleListController&quot;)&#13;&#10;&#9;return newInstance(sampleList)&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="e03d9c161c3949b5b5898e8ff2c58530"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="generic" uuid="5f2d09e8736a4d2b82e27762212cf934">
        <luaMethod luaMethodName="Object" luaMethodCode="function Object()&#10;&#9;if __Object ~= nil then&#13;&#10;&#9;&#9;return __Object:new()&#13;&#10;&#9;end&#10;&#13;&#10;&#9;__Object = {}&#13;&#10;&#13;&#10;&#9;function __Object:new(o)&#13;&#10;&#9;&#9;o = o or {}&#13;&#10;&#9;&#9;setmetatable(o, self)&#13;&#10;&#9;&#9;self.__index = self&#13;&#10;&#13;&#10;&#9;&#9;return o&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Object:isSerializable()&#13;&#10;&#9;&#9;return self[LUA_CLASS_NAME] ~= nil&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Object:getLuaClassName()&#13;&#10;&#9;&#9;return self[LUA_CLASS_NAME]&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return __Object:new()&#10;end&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="0f18902ef4814dfe9f2e941d653966df"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="AbstractController" luaMethodCode="function AbstractController()&#13;&#10;&#13;&#10;&#9;if __AbstractController ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return __AbstractController:new()&#13;&#10;&#9;end&#13;&#10;&#10;&#9;__AbstractController = Object()&#13;&#10;&#13;&#10;&#9;function __AbstractController:setMax(compName, max)&#13;&#10;&#9;&#9;panel:getComponent(compName):setProperty(&quot;uiSliderMax&quot;, max, false)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:setText(compName, text)&#10;&#9;&#9;panel:getComponent(compName):setText(text)&#10;&#9;end&#10;&#10;&#9;function __AbstractController:setValue(modName, value)&#10;&#9;&#9;panel:getModulatorByName(modName):setValue(value, false)&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:getValue(modName)&#10;&#9;&#9;return panel:getModulatorByName(modName):getValue()&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:toggleVisibility(name, visible)&#10;&#9;&#9;if visible then&#13;&#10;&#9;&#9;&#9;panel:getComponent(name):setProperty(&quot;componentVisibility&quot;, 1, false)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;panel:getComponent(name):setProperty(&quot;componentVisibility&quot;, 0, false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:setListBoxContents(name, contents)&#13;&#10;&#9;&#9;panel:getComponent(name):setProperty(&quot;uiListBoxContent&quot;, contents, false)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:setComboBoxContents(name, contents)&#13;&#10;&#9;&#9;panel:getComponent(name):setProperty(&quot;uiComboContent&quot;, contents, false)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:toggleLayerVisibility(layerName, visible)&#10;&#9;&#9;local canvas = panel:getCanvas()&#10;&#9;&#9;if visible then&#10;&#9;&#9;&#9;canvas:getLayerByName(layerName):setPropertyInt(&quot;uiPanelCanvasLayerVisibility&quot;, 1)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;canvas:getLayerByName(layerName):setPropertyInt(&quot;uiPanelCanvasLayerVisibility&quot;, 0)&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __AbstractController:toggleActivation(name, enabled)&#13;&#10;&#9;&#9;if enabled then&#13;&#10;&#9;&#9;&#9;panel:getComponent(name):setProperty(&quot;componentDisabled&quot;, 0, false)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;panel:getComponent(name):setProperty(&quot;componentDisabled&quot;, 1, false)&#13;&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return __AbstractController:new()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="1e372a1f70474c5184212317c0a22c99"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Logger" luaMethodCode="function Logger(loggerName)&#10;&#9;if __Logger ~= nil then -- and panelState == STATE_PROD &#13;&#10;&#9;&#9;return __Logger:new{name = loggerName}&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;FINE, INFO, WARN = 3, 2, 1&#13;&#10;&#9;LOG_LEVEL = WARN&#13;&#10;&#13;&#10;&#9;__Logger = Object()&#13;&#10;&#13;&#10;&#9;function __Logger:setLevel(level)&#13;&#10;&#9;&#9;LOG_LEVEL = level&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Logger:getLevel()&#13;&#10;&#9;&#9;return LOG_LEVEL&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Logger:warn(log, ...)&#10;&#9;&#9;if LOG_LEVEL &gt;= WARN then&#13;&#10;&#9;&#9;&#9;console(string.format(&quot;[WARN] [%s] - %s&quot;, self.name, string.format(log, ...)))&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Logger:info(log, ...)&#10;&#9;&#9;if LOG_LEVEL &gt;= INFO then&#13;&#10;&#9;&#9;&#9;console(string.format(&quot;[INFO] [%s] - %s&quot;, self.name, string.format(log, ...)))&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Logger:fine(log, ...)&#10;&#9;&#9;if LOG_LEVEL &gt;= FINE then&#10;&#9;&#9;&#9;console(string.format(&quot;[FINE] [%s] - %s&quot;, self.name, string.format(log, ...)))&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;console(&quot;Initialising Logger&quot;)&#13;&#10;&#9;return __Logger:new{name = loggerName}&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="08a7dc5396a541fe98afe6c9fc0ecca4"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="JsonService" luaMethodCode="function JsonService()&#10;&#13;&#10;&#9;local newInstance = function()&#13;&#10;&#9;&#9;return __JsonService:new()&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if __JsonService ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return newInstance()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Private variables&#13;&#10;&#9;local log = Logger(&quot;JsonService&quot;)&#13;&#10;&#13;&#10;&#9;local escapeList = {&#13;&#10;&#9;&#9;['&quot;']&#9;= '\\&quot;',&#13;&#10;&#9;&#9;['\\'] = '\\\\',&#13;&#10;&#9;&#9;['/']&#9;= '\\/', &#13;&#10;&#9;&#9;['\b'] = '\\b',&#13;&#10;&#9;&#9;['\f'] = '\\f',&#13;&#10;&#9;&#9;['\n'] = '\\n',&#13;&#10;&#9;&#9;['\r'] = '\\r',&#13;&#10;&#9;&#9;['\t'] = '\\t'&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;local escapeSequences = {&#13;&#10;&#9;&#9;[&quot;\\t&quot;] = &quot;\t&quot;,&#13;&#10;&#9;&#9;[&quot;\\f&quot;] = &quot;\f&quot;,&#13;&#10;&#9;&#9;[&quot;\\r&quot;] = &quot;\r&quot;,&#13;&#10;&#9;&#9;[&quot;\\n&quot;] = &quot;\n&quot;,&#13;&#10;&#9;&#9;[&quot;\\b&quot;] = &quot;\b&quot;&#13;&#10;&#9;}&#13;&#10;&#9;setmetatable(escapeSequences, {__index = function(t,k)&#13;&#10;&#9;&#9;-- skip &quot;\&quot; aka strip escape&#13;&#10;&#9;&#9;return string.sub(k,2)&#13;&#10;&#9;end})&#13;&#10;&#13;&#10;&#9;-- Private methods decl&#13;&#10;&#9;local encodeString&#13;&#10;&#9;local isArray&#13;&#10;&#9;local isEncodable&#13;&#10;&#9;local getNativeName&#13;&#10;&#9;local decode_scanComment&#13;&#10;&#9;local decode_scanConstant&#13;&#10;&#9;local decode_scanNumber&#13;&#10;&#9;local decode_scanString&#13;&#10;&#9;local decode_scanWhitespace&#13;&#10;&#13;&#10;&#9;__JsonService = Object()&#13;&#10;&#13;&#10;&#9;-- Public methods&#13;&#10;&#9;function __JsonService:encode (v)&#13;&#10;&#9;&#9;-- Handle nil values&#13;&#10;&#9;&#9;if v==nil then&#13;&#10;&#9;&#9;&#9;return &quot;null&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;local vtype = type(v)&#9;&#13;&#10;&#9;&#13;&#10;&#9;&#9;-- Handle strings&#13;&#10;&#9;&#9;if vtype=='string' then&#9;&#9;&#13;&#10;&#9;&#9;&#9;return '&quot;' .. encodeString(v) .. '&quot;'&#9;&#9;&#9;-- Need to handle encoding in string&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;-- Handle booleans&#13;&#10;&#9;&#9;if vtype=='number' or vtype=='boolean' then&#13;&#10;&#9;&#9;&#9;return tostring(v)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;-- Handle tables&#13;&#10;&#9;&#9;if vtype=='table' then&#13;&#10;&#9;&#9;&#9;if hasIsSerializableMethod(v) and not v:isSerializable() then&#13;&#10;&#9;&#9;&#9;&#9;assert(false,'encode attempt to encode not serializable type ' .. vtype .. ':' .. tostring(v))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;local rval = {}&#13;&#10;&#9;&#9;&#9;-- Consider arrays separately&#13;&#10;&#9;&#9;&#9;local bArray, maxCount = isArray(v)&#13;&#10;&#9;&#9;&#9;if bArray then&#13;&#10;&#9;&#9;&#9;&#9;for i = 1,maxCount do&#13;&#10;&#9;&#9;&#9;&#9;&#9;table.insert(rval, self:encode(v[i]))&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;else&#9;-- An object, not an array&#13;&#10;&#9;&#9;&#9;&#9;for i,j in pairs(v) do&#13;&#10;&#9;&#9;&#9;&#9;&#9;if isEncodable(i) and isEncodable(j) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;table.insert(rval, '&quot;' .. encodeString(i) .. '&quot;:' .. self:encode(j))&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if bArray then&#13;&#10;&#9;&#9;&#9;&#9;return '[' .. table.concat(rval,',') ..']'&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;return '{' .. table.concat(rval,',') .. '}'&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;-- pascalc edit start&#13;&#10;&#9;&#9;local vNativeName = getNativeName(v)&#13;&#10;&#9;&#9;if vNativeName == &quot;MemoryBlock&quot; then&#13;&#10;&#9;&#9;&#9;return string.format('{&quot;nativeName&quot;:&quot;MemoryBlock&quot;,&quot;hexString&quot;:&quot;%s&quot;}', v:toHexString(1))&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if vNativeName == &quot;File&quot; then&#13;&#10;&#9;&#9;&#9;return string.format('{&quot;nativeName&quot;:&quot;File&quot;,&quot;fullPathName&quot;:&quot;%s&quot;}', v:getFullPathName())&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- pascalc edit end&#13;&#10;&#13;&#10;&#9;&#9;-- Handle null values&#13;&#10;&#9;&#9;if vtype=='function' and v==null then&#13;&#10;&#9;&#9;&#9;return 'null'&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. tostring(v))&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __JsonService:decode(s, startPos)&#13;&#10;&#9;&#9;startPos = startPos and startPos or 1&#13;&#10;&#9;&#9;startPos = decode_scanWhitespace(s,startPos)&#13;&#10;&#9;&#9;assert(startPos&lt;=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')&#13;&#10;&#9;&#9;local curChar = string.sub(s,startPos,startPos)&#13;&#10;&#9;&#9;-- Object&#13;&#10;&#9;&#9;if curChar=='{' then&#13;&#10;&#9;&#9;&#9;return self:decode_scanObject(s,startPos)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Array&#13;&#10;&#9;&#9;if curChar=='[' then&#13;&#10;&#9;&#9;&#9;return self:decode_scanArray(s,startPos)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Number&#13;&#10;&#9;&#9;if string.find(&quot;+-0123456789.e&quot;, curChar, 1, true) then&#13;&#10;&#9;&#9;&#9;return decode_scanNumber(s,startPos)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- String&#13;&#10;&#9;&#9;if curChar==[[&quot;]] or curChar==[[']] then -- &quot;&#13;&#10;&#9;&#9;&#9;return decode_scanString(s,startPos)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if string.sub(s,startPos,startPos+1)=='/*' then&#13;&#10;&#9;&#9;&#9;return self:decode(s, decode_scanComment(s,startPos))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Otherwise, it must be a constant&#13;&#10;&#9;&#9;return decode_scanConstant(s,startPos)&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;function __JsonService:null()&#13;&#10;&#9;&#9;return null -- so json.null() will also return null ;-)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __JsonService:decode_scanObject(s,startPos)&#13;&#10;&#9;&#9;local object = {}&#13;&#10;&#9;&#9;local stringLen = string.len(s)&#13;&#10;&#9;&#9;local key, value&#13;&#10;&#9;&#9;assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)&#13;&#10;&#9;&#9;startPos = startPos + 1&#13;&#10;&#9;&#9;repeat&#13;&#10;&#9;&#9;&#9;startPos = decode_scanWhitespace(s,startPos)&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly while scanning object.')&#13;&#10;&#9;&#9;&#9;local curChar = string.sub(s,startPos,startPos)&#13;&#10;&#9;&#9;&#9;if (curChar=='}') then&#13;&#10;&#9;&#9;&#9;&#9;-- pascalc edit start&#13;&#10;&#9;&#9;&#9;&#9;if object[LUA_CLASS_NAME] ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;local temp = _G[object[LUA_CLASS_NAME]]()&#13;&#10;&#9;&#9;&#9;&#9;&#9;for k,v in pairs(object)do&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;temp[k] = v&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;return temp,startPos+1&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;return object,startPos+1&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;-- pascalc edit end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if (curChar==',') then&#13;&#10;&#9;&#9;&#9;&#9;startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly scanning object.')&#13;&#10;&#9;&#9;&#9;-- Scan the key&#13;&#10;&#9;&#9;&#9;key, startPos = self:decode(s,startPos)&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;&#9;&#9;&#9;startPos = decode_scanWhitespace(s,startPos)&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;&#9;&#9;&#9;assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)&#13;&#10;&#9;&#9;&#9;startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;&#9;&#9;&#9;value, startPos = self:decode(s,startPos)&#13;&#10;&#9;&#9;&#9;object[key]=value&#13;&#10;&#9;&#9;until false&#9;-- infinite loop while key-value pairs are found&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __JsonService:decode_scanArray(s,startPos)&#13;&#10;&#9;&#9;local array = {}&#9;-- The return value&#13;&#10;&#9;&#9;local stringLen = string.len(s)&#13;&#10;&#9;&#9;assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )&#13;&#10;&#9;&#9;startPos = startPos + 1&#13;&#10;&#9;&#9;-- Infinite loop for array elements&#13;&#10;&#9;&#9;repeat&#13;&#10;&#9;&#9;&#9;startPos = decode_scanWhitespace(s,startPos)&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen,'JSON String ended unexpectedly scanning array.')&#13;&#10;&#9;&#9;&#9;local curChar = string.sub(s,startPos,startPos)&#13;&#10;&#9;&#9;&#9;if (curChar==']') then&#13;&#10;&#9;&#9;&#9;&#9;return array, startPos+1&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if (curChar==',') then&#13;&#10;&#9;&#9;&#9;&#9;startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;assert(startPos&lt;=stringLen, 'JSON String ended unexpectedly scanning array.')&#13;&#10;&#9;&#9;&#9;object, startPos = self:decode(s,startPos)&#13;&#10;&#9;&#9;&#9;table.insert(array,object)&#13;&#10;&#9;&#9;until false&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Private methods impl&#13;&#10;&#9;function getNativeName(o)&#13;&#10;&#9;&#9;info = class_info(o)&#13;&#10;&#9;&#9;return info.name&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function encodeString(s)&#13;&#10;&#9;&#9;return s:gsub(&quot;.&quot;, function(c) return escapeList[c] end)&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;function isArray(t)&#13;&#10;&#9;&#9;-- Next we count all the elements, ensuring that any non-indexed elements are not-encodable &#13;&#10;&#9;&#9;-- (with the possible exception of 'n')&#13;&#10;&#9;&#9;local maxIndex = 0&#13;&#10;&#9;&#9;for k,v in pairs(t) do&#13;&#10;&#9;&#9;&#9;if (type(k)=='number' and math.floor(k)==k and 1&lt;=k) then&#9;-- k,v is an indexed pair&#13;&#10;&#9;&#9;&#9;&#9;if (not isEncodable(v)) then return false end&#9;-- All array elements must be encodable&#13;&#10;&#9;&#9;&#9;&#9;maxIndex = math.max(maxIndex,k)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;if (k=='n') then&#13;&#10;&#9;&#9;&#9;&#9;&#9;if v ~= table.getn(t) then return false end&#9;-- False if n does not hold the number of elements&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;if isEncodable(v) then return false end&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return true, maxIndex&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function hasIsSerializableMethod(o)&#13;&#10;&#9;&#9;local meta = getmetatable(o)&#13;&#10;&#9;&#9;if meta == nil then&#13;&#10;&#9;&#9;&#9;return false&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return type(meta[&quot;isSerializable&quot;]) == &quot;function&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;function isEncodable(o)&#13;&#10;&#9;&#9;local t = type(o)&#13;&#10;&#9;&#9;local n = getNativeName(o)&#13;&#10;&#9;&#9;return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table')&#13;&#10;&#9;&#9;&#9;or (t=='function' and o==null)&#13;&#10;&#9;&#9;&#9;or (n == &quot;MemoryBlock&quot; or n == &quot;File&quot;)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function decode_scanComment(s, startPos)&#13;&#10;&#9;&#9;assert( string.sub(s,startPos,startPos+1)=='/*', &quot;decode_scanComment called but comment does not start at position &quot; .. startPos)&#13;&#10;&#9;&#9;local endPos = string.find(s,'*/',startPos+2)&#13;&#10;&#9;&#9;assert(endPos~=nil, &quot;Unterminated comment in string at &quot; .. startPos)&#13;&#10;&#9;&#9;return endPos+2&#9;&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;function decode_scanConstant(s, startPos)&#13;&#10;&#9;&#9;local consts = { [&quot;true&quot;] = true, [&quot;false&quot;] = false, [&quot;null&quot;] = nil }&#13;&#10;&#9;&#9;local constNames = {&quot;true&quot;,&quot;false&quot;,&quot;null&quot;}&#13;&#10;&#9;&#13;&#10;&#9;&#9;for i,k in pairs(constNames) do&#13;&#10;&#9;&#9;&#9;--print (&quot;[&quot; .. string.sub(s,startPos, startPos + string.len(k) -1) ..&quot;]&quot;, k)&#13;&#10;&#9;&#9;&#9;if string.sub(s,startPos, startPos + string.len(k) -1 )==k then&#13;&#10;&#9;&#9;&#9;&#9;return consts[k], startPos + string.len(k)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;function decode_scanNumber(s,startPos)&#13;&#10;&#9;&#9;local endPos = startPos+1&#13;&#10;&#9;&#9;local stringLen = string.len(s)&#13;&#10;&#9;&#9;local acceptableChars = &quot;+-0123456789.e&quot;&#13;&#10;&#9;&#9;while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)&#13;&#10;&#9;&#9;and endPos&lt;=stringLen&#13;&#10;&#9;&#9;) do&#13;&#10;&#9;&#9;&#9;endPos = endPos + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)&#13;&#10;&#9;&#9;local stringEval = loadstring(stringValue)&#13;&#10;&#9;&#9;assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)&#13;&#10;&#9;&#9;return stringEval(), endPos&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function decode_scanString(s,startPos)&#13;&#10;&#9;&#9;assert(startPos, 'decode_scanString(..) called without start position')&#13;&#10;&#9;&#9;local startChar = string.sub(s,startPos,startPos)&#13;&#10;&#9;&#9;assert(startChar == [[&quot;]] or startChar == [[']],'decode_scanString called for a non-string')-- &quot;&#13;&#10;&#9;&#13;&#10;&#9;&#9;local t = {}&#13;&#10;&#9;&#9;local i,j = startPos,startPos&#13;&#10;&#9;&#9;while string.find(s, startChar, j+1) ~= j+1 do&#13;&#10;&#9;&#9;&#9;local oldj = j&#13;&#10;&#9;&#9;&#9;i,j = string.find(s, &quot;\\.&quot;, j+1)&#13;&#10;&#9;&#9;&#9;local x,y = string.find(s, startChar, oldj+1)&#13;&#10;&#9;&#9;&#9;if not i or x &lt; i then&#13;&#10;&#9;&#9;&#9;&#9;print(s, startPos, string.sub(s,startPos,oldj))&#13;&#10;&#9;&#9;&#9;&#9;i,j = x,y-1&#13;&#10;&#9;&#9;&#9;&#9;if not x then print(s, startPos, string.sub(s,startPos,oldj)) end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;table.insert(t, string.sub(s, oldj+1, i-1))&#13;&#10;&#9;&#9;&#9;if string.sub(s, i, j) == &quot;\\u&quot; then&#13;&#10;&#9;&#9;&#9;&#9;local a = string.sub(s,j+1,j+4)&#13;&#10;&#9;&#9;&#9;&#9;j = j + 4&#13;&#10;&#9;&#9;&#9;&#9;local n = tonumber(a, 16)&#13;&#10;&#9;&#9;&#9;&#9;assert(n, &quot;String decoding failed: bad Unicode escape &quot; .. a .. &quot; at position &quot; .. i .. &quot; : &quot; .. j)&#13;&#10;&#9;&#9;&#9;&#9;-- math.floor(x/2&#94;y) == lazy right shift&#13;&#10;&#9;&#9;&#9;&#9;-- a % 2&#94;b == bitwise_and(a, (2&#94;b)-1)&#13;&#10;&#9;&#9;&#9;&#9;-- 64 = 2&#94;6&#13;&#10;&#9;&#9;&#9;&#9;-- 4096 = 2&#94;12 (or 2&#94;6 * 2&#94;6)&#13;&#10;&#9;&#9;&#9;&#9;local x&#13;&#10;&#9;&#9;&#9;&#9;if n &lt; 0x80 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;x = string.char(n % 0x80)&#13;&#10;&#9;&#9;&#9;&#9;elseif n &lt; 0x800 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- [110x xxxx] [10xx xxxx]&#13;&#10;&#9;&#9;&#9;&#9;&#9;x = string.char(0xC0 + (math.floor(n/64) % 0x20), 0x80 + (n % 0x40))&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- [1110 xxxx] [10xx xxxx] [10xx xxxx]&#13;&#10;&#9;&#9;&#9;&#9;&#9;x = string.char(0xE0 + (math.floor(n/4096) % 0x10), 0x80 + (math.floor(n/64) % 0x40), 0x80 + (n % 0x40))&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;table.insert(t, x)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;table.insert(t, escapeSequences[string.sub(s, i, j)])&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;table.insert(t,string.sub(j, j+1))&#13;&#10;&#9;&#9;assert(string.find(s, startChar, j+1), &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; at position &quot; .. j .. &quot;(for string at position &quot; .. startPos .. &quot;)&quot;)&#13;&#10;&#9;&#9;return table.concat(t,&quot;&quot;), j+2&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;function decode_scanWhitespace(s,startPos)&#13;&#10;&#9;&#9;local whitespace=&quot; \n\r\t&quot;&#13;&#10;&#9;&#9;local stringLen = string.len(s)&#13;&#10;&#9;&#9;while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)&#9;and startPos &lt;= stringLen) do&#13;&#10;&#9;&#9;&#9;startPos = startPos + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return startPos&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;log:info(&quot;Initialising JsonService&quot;)&#13;&#10;&#9;return newInstance()&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="1b2953f630e244a4b0192fad40cc7fb7"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="Dispatcher" luaMethodCode="function Dispatcher()&#10;&#9;if __Dispatcher ~= nil and panelState == STATE_PROD then&#13;&#10;&#9;&#9;return __Dispatcher:new{ listeners = {} }&#13;&#10;&#9;end&#10;&#13;&#10;&#9;__Dispatcher = Object()&#13;&#10;&#13;&#10;&#9;function __Dispatcher:addListener(listener)&#13;&#10;&#9;&#9;table.insert(self.listeners, listener)&#13;&#10;&#9;&#9;return table.getn(self.listeners)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Dispatcher:removeListener(id)&#13;&#10;&#9;&#9;table.remove(self.listeners, id)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;function __Dispatcher:notifyListeners()&#13;&#10;&#9;&#9;for k,v in pairs(self.listeners) do&#13;&#10;&#9;&#9;&#9;v(self)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return __Dispatcher:new{ listeners = {} }&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="e814de001a644222bc90e8191630ddd0"
                   luaMethodValid="1"/>
      </luaMethodGroup>
    </luaManagerMethods>
  </luaManager>
  <panelResources>
    <resource resourceHash="2452868127033641614" resourceLoadedTime="1471386304482"
              resourceSize="168" resourceFile="AkaiLoopAt.png" resourceSourceFile="C:\ctrlr\Panels\pascalc\AkaiLoopAt.png"
              resourceName="AkaiLoopAt" resourceType="Image"/>
    <resource resourceHash="325667125948557472" resourceLoadedTime="1471386304483"
              resourceSize="322" resourceFile="AkaiModulationArrowDown.png"
              resourceSourceFile="C:\ctrlr\Panels\pascalc\AkaiModulationArrowDown.png"
              resourceName="AkaiModulationArrowDown" resourceType="Image"/>
    <resource resourceHash="7220683403334545719" resourceLoadedTime="1471386304483"
              resourceSize="323" resourceFile="AkaiModulationArrowUp.png" resourceSourceFile="C:\ctrlr\Panels\pascalc\AkaiModulationArrowUp.png"
              resourceName="AkaiModulationArrowUp" resourceType="Image"/>
    <resource resourceHash="5223918378058402900" resourceLoadedTime="1471386304484"
              resourceSize="38529" resourceFile="AkaiS2000Logo.png" resourceSourceFile="C:\ctrlr\Panels\pascalc\AkaiS2000Logo.png"
              resourceName="AkaiS2000Logo" resourceType="Image"/>
    <resource resourceHash="-2263635452950825971" resourceLoadedTime="1471386304484"
              resourceSize="290" resourceFile="AkaiSignalArrow.png" resourceSourceFile="C:\ctrlr\Panels\pascalc\AkaiSignalArrow.png"
              resourceName="AkaiSignalArrow" resourceType="Image"/>
  </panelResources>
  <uiPanelEditor uiPanelCanvasRectangle="0 0 1377 665" uiPanelSnapSize="8" uiPanelBackgroundColour="ffc6b8a9"
                 uiPanelBackgroundColour1="ffc6b8a9" uiPanelBackgroundColour2="0xffffffff"
                 uiPanelBackgroundGradientType="0" uiPanelImageResource="-- None"
                 uiPanelEditMode="0" uiPanelViewPortSize="990" uiPanelPropertiesSize="247"
                 uiPanelLock="1" uiPanelDisabledOnEdit="0" uiPanelMenuBarVisible="1"
                 uiPanelWidth="1377" uiPanelHeight="665" name="AKAI S2000" uiPanelImageAlpha="255"
                 uiPanelImageLayout="64" uiPanelSnapActive="1" uiPanelPropertiesOnRight="0"
                 luaPanelPaintBackground="-- None" luaPanelResized="-- None" luaPanelFileDragDropHandler="-- None"
                 luaPanelFileDragEnterHandler="-- None" luaPanelFileDragExitHandler="-- None"
                 uiPanelInvisibleComponentAlpha="0.5" uiPanelTooltipBackgroundColour="0xffeeeebb"
                 uiPanelTooltipOutlineColour="0xff000000" uiPanelTooltipColour="0xff000000"
                 uiPanelTooltipCornerRound="1" uiPanelTooltipPlacement="2" uiPanelTooltipFont="&lt;Sans-Serif&gt;;15;1;0;0;0;0;3"
                 uiPanelZoom="0.90000000000000002" uiPanelMenuBarHideOnExport="0">
    <uiPanelCanvasLayer uiPanelCanvasLayerName="ProgramBackground" uiPanelCanvasLayerUid="4515ed3444000000a8000000a85ca200"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="5"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="ProgramControls" uiPanelCanvasLayerUid="d7b8258473000000a8000000a0f70408"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="6"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="Sample" uiPanelCanvasLayerUid="17d5168673000000a8000000a0f70408"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="2"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="EditorBackground" uiPanelCanvasLayerUid="23f0e4d8e3000000a8000000d008e208"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="0"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="SampleTrim" uiPanelCanvasLayerUid="760b761f13010000a80000000827a507"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="3"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="SampleLoop" uiPanelCanvasLayerUid="277d752313010000a80000000827a507"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="4"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="SampleBackground" uiPanelCanvasLayerUid="b73cd8bf36010000a80000000827a507"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="1"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="Drummap" uiPanelCanvasLayerUid="cb9205925e010000a8000000c8a9c407"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="7"/>
  </uiPanelEditor>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="editor" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0"
               uiGroupOutlineColour1="332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffc6b8a9" uiGroupBackgroundColour2="ff8e8478"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="8 8 1361 651" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="23f0e4d8e3000000a8000000d008e208"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="keyGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="KEY GROUP"
               componentMouseCursor="2" componentGroupName="" componentGroupped=""
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Key Group"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="ffe5d5c5"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="8 61 993 393" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="topRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="4515ed3444000000a8000000a85ca200"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgZone1Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centredLeft"
               componentLabelHeight="74" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3" componentVisibleName="Z&#10;O&#10;N&#10;E&#10;1"
               componentMouseCursor="2" componentGroupName="keyGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="3 74 597 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="4515ed3444000000a8000000a85ca200"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgZone2Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centredLeft"
               componentLabelHeight="74" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3" componentVisibleName="Z&#10;O&#10;N&#10;E&#10;2"
               componentMouseCursor="2" componentGroupName="keyGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="8e8478" uiGroupBackgroundColour2="0"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="3 148 987 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" componentLayerUid="4515ed3444000000a8000000a85ca200"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgZone3Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centredLeft"
               componentLabelHeight="74" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3" componentVisibleName="Z&#10;O&#10;N&#10;E&#10;3"
               componentMouseCursor="2" componentGroupName="keyGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ffffff" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="3 222 597 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" componentLayerUid="4515ed3444000000a8000000a85ca200"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgZone4Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centredLeft"
               componentLabelHeight="74" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3" componentVisibleName="Z&#10;O&#10;N&#10;E&#10;4"
               componentMouseCursor="2" componentGroupName="keyGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="8e8478" uiGroupBackgroundColour2="0"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="3 296 987 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="4515ed3444000000a8000000a85ca200"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="28" vstIndex="100" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="zone1Selector" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sample"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="CAT-MEOW.W-R&#10;TRAIN.WAV -L&#10;DOG-BARK.W-R&#10;CASIO-MT-6-R&#10;CASIO-MT-6-L&#10;TRAIN.WAV -R&#10;KAWAI-K1R--L&#10;CLOSED-HI--L&#10;ALESIS-FUS-L&#10;E-MU-PROTE-L&#10;ALESIS-FUS-R&#10;DRILL.WAV -L&#10;ELECTRIC-B-R&#10;CAT-MEOW.W-L&#10;ELECTRIC-B-L&#10;LION-ROAR.-L&#10;DOOR-CLOSE-R&#10;BOWED-BASS-R&#10;E-MU-PROTE-R&#10;BOWED-BASS-L&#10;CLOSED-HI--R&#10;LION-ROAR.-R&#10;KAWAI-K1R--R&#10;SMACKIN     &#10;DOOR-CLOSE-L&#10;FLOWING-WA-R&#10;DRILL.WAV -R&#10;DOG-BARK.W-L&#10;FLOWING-WA-L"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 5 88 42" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="101" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="52" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VPANO1" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Pan"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup-1"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="103" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="50" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VLOUD1" modulatorMin="0" modulatorValue="63">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Level"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="104" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="51" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VFREQ1" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Filter"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="52 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="107" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="131" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="CP1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="22" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Kbd track"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffa99a73"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="TRACK&#10;CONST"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="101 5 64 45" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="4" vstIndex="108" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="53" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ZPLAY1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loop type"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="AS SAMPL&#10;LP in R&#10;LP til R&#10;NO LOOPS&#10;TO END&#10;"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="172 5 88 42" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="9999" vstIndex="109" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="139" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onVssChange"
             name="VSS1" modulatorMin="-9999" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;start"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-9999" uiSliderMax="9999" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="259 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="topLeft"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="SAMPLE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="1" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="189 141 318 310"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="28" vstIndex="110" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="zone2Selector" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sample"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="CAT-MEOW.W-R&#10;TRAIN.WAV -L&#10;DOG-BARK.W-R&#10;CASIO-MT-6-R&#10;CASIO-MT-6-L&#10;TRAIN.WAV -R&#10;KAWAI-K1R--L&#10;CLOSED-HI--L&#10;ALESIS-FUS-L&#10;E-MU-PROTE-L&#10;ALESIS-FUS-R&#10;DRILL.WAV -L&#10;ELECTRIC-B-R&#10;CAT-MEOW.W-L&#10;ELECTRIC-B-L&#10;LION-ROAR.-L&#10;DOOR-CLOSE-R&#10;BOWED-BASS-R&#10;E-MU-PROTE-R&#10;BOWED-BASS-L&#10;CLOSED-HI--R&#10;LION-ROAR.-R&#10;KAWAI-K1R--R&#10;SMACKIN     &#10;DOOR-CLOSE-L&#10;FLOWING-WA-R&#10;DRILL.WAV -R&#10;DOG-BARK.W-L&#10;FLOWING-WA-L"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="8 79 88 42"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="111" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="76" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VPANO2" modulatorMin="-50" modulatorValue="51">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Pan"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup-1"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 79 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="113" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="74" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VLOUD2" modulatorMin="0" modulatorValue="63">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Level"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 79 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="114" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="75" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VFREQ2" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Filter"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="52 79 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="117" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="132" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="CP2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="22" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Kbd track"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="TRACK&#10;CONST"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="101 79 64 45" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="4" vstIndex="118" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="77" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ZPLAY2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loop type"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="AS SAMPL&#10;LP in R&#10;LP til R&#10;NO LOOPS&#10;TO END&#10;"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="172 79 88 42"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="9999" vstIndex="119" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="141" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onVssChange"
             name="VSS2" modulatorMin="-9999" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;start"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-9999" uiSliderMax="9999" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="259 79 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="28" vstIndex="120" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="zone3Selector" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sample"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="CAT-MEOW.W-R&#10;TRAIN.WAV -L&#10;DOG-BARK.W-R&#10;CASIO-MT-6-R&#10;CASIO-MT-6-L&#10;TRAIN.WAV -R&#10;KAWAI-K1R--L&#10;CLOSED-HI--L&#10;ALESIS-FUS-L&#10;E-MU-PROTE-L&#10;ALESIS-FUS-R&#10;DRILL.WAV -L&#10;ELECTRIC-B-R&#10;CAT-MEOW.W-L&#10;ELECTRIC-B-L&#10;LION-ROAR.-L&#10;DOOR-CLOSE-R&#10;BOWED-BASS-R&#10;E-MU-PROTE-R&#10;BOWED-BASS-L&#10;CLOSED-HI--R&#10;LION-ROAR.-R&#10;KAWAI-K1R--R&#10;SMACKIN     &#10;DOOR-CLOSE-L&#10;FLOWING-WA-R&#10;DRILL.WAV -R&#10;DOG-BARK.W-L&#10;FLOWING-WA-L"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 153 88 42" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="121" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="100" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VPANO3" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Pan"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup-1"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 153 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="123" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="98" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VLOUD3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Level"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 153 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="124" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="99" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VFREQ3" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Filter"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="52 153 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="127" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="133" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="CP3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="22" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Kbd track"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="TRACK&#10;CONST"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="101 153 64 45" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="4" vstIndex="128" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="101" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ZPLAY3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loop type"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="AS SAMPL&#10;LP in R&#10;LP til R&#10;NO LOOPS&#10;TO END&#10;"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="172 153 88 42" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="9999" vstIndex="129" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="143" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onVssChange"
             name="VSS3" modulatorMin="-9999" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;start"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-9999" uiSliderMax="9999" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="259 153 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="28" vstIndex="130" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="zone4Selector" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sample"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="CAT-MEOW.W-R&#10;TRAIN.WAV -L&#10;DOG-BARK.W-R&#10;CASIO-MT-6-R&#10;CASIO-MT-6-L&#10;TRAIN.WAV -R&#10;KAWAI-K1R--L&#10;CLOSED-HI--L&#10;ALESIS-FUS-L&#10;E-MU-PROTE-L&#10;ALESIS-FUS-R&#10;DRILL.WAV -L&#10;ELECTRIC-B-R&#10;CAT-MEOW.W-L&#10;ELECTRIC-B-L&#10;LION-ROAR.-L&#10;DOOR-CLOSE-R&#10;BOWED-BASS-R&#10;E-MU-PROTE-R&#10;BOWED-BASS-L&#10;CLOSED-HI--R&#10;LION-ROAR.-R&#10;KAWAI-K1R--R&#10;SMACKIN     &#10;DOOR-CLOSE-L&#10;FLOWING-WA-R&#10;DRILL.WAV -R&#10;DOG-BARK.W-L&#10;FLOWING-WA-L"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="8 227 88 42"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="131" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="124" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VPANO4" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Pan"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup-1"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 227 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="133" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="122" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VLOUD4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Level"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 227 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="134" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="123" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="VFREQ4" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Filter"
               componentMouseCursor="2" componentGroupName="zoneLevelGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="52 227 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="137" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="134" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="CP4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="22" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Kbd track"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="TRACK&#10;CONST"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="101 227 64 45" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="4" vstIndex="138" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="125" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ZPLAY4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loop type"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="AS SAMPL&#10;LP in R&#10;LP til R&#10;NO LOOPS&#10;TO END&#10;"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="172 227 88 42"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="9999" vstIndex="139" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="145" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onVssChange"
             name="VSS4" modulatorMin="-9999" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;start"
               componentMouseCursor="2" componentGroupName="sampleGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-9999" uiSliderMax="9999" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="259 227 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="140" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="41" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="KXFADE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Crossfade"
               componentMouseCursor="2" componentGroupName="sampleCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="5 5 64 32" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="141" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="72" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="LEGATO" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Legato"
               componentMouseCursor="2" componentGroupName="sampleCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="77 5 64 32" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="32" vstIndex="144" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="32" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="kgMute" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mute Group"
               componentMouseCursor="2" componentGroupName="sampleCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="0xff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="ffd6c393"
               uiComboMenuFontHighlightedColour="ff000000" uiComboContent="OFF&#10;1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;10&#10;11&#10;12&#10;13&#10;14&#10;15&#10;16&#10;17&#10;18&#10;19&#10;20&#10;21&#10;22&#10;23&#10;24&#10;25&#10;26&#10;27&#10;28&#10;29&#10;30&#10;31&#10;32"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="148 5 64 32"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="0" vstIndex="145" modulatorIsStatic="0"
             modulatorGlobalVariable="1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKeyGroupChange"
             name="kgSelector" modulatorMin="1" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="17" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Key Group"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="1" uiSliderMax="0" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="2" uiSliderValueHeight="20"
               uiSliderValueWidth="25" uiSliderTrackCornerSize="3" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="874 88 100 48"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="keySpanGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="8e8478" uiGroupOutlineColour2="ff332f2b"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="1" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="28 86 150 42" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleCtrlGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="8e8478" uiGroupOutlineColour2="ff332f2b"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="1" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="243 86 218 42"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="103" vstIndex="148" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="3" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="LONOTE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Low Key"
               componentMouseCursor="2" componentGroupName="keySpanGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="C_0&#10;C#_0&#10;D_0&#10;D#_0&#10;E_0&#10;F_0&#10;F#_0&#10;G_0&#10;G#_0&#10;A_0&#10;A#_0&#10;B_0&#10;C_1&#10;C#_1&#10;D_1&#10;D#_1&#10;E_1&#10;F_1&#10;F#_1&#10;G_1&#10;G#_1&#10;A_1&#10;A#_1&#10;B_1&#10;C_2&#10;C#_2&#10;D_2&#10;D#_2&#10;E_2&#10;F_2&#10;F#_2&#10;G_2&#10;G#_2&#10;A_2&#10;A#_2&#10;B_2&#10;C_3&#10;C#_3&#10;D_3&#10;D#_3&#10;E_3&#10;F_3&#10;F#_3&#10;G_3&#10;G#_3&#10;A_3&#10;A#_3&#10;B_3&#10;C_4&#10;C#_4&#10;D_4&#10;D#_4&#10;E_4&#10;F_4&#10;F#_4&#10;G_4&#10;G#_4&#10;A_4&#10;A#_4&#10;B_4&#10;C_5&#10;C#_5&#10;D_5&#10;D#_5&#10;E_5&#10;F_5&#10;F#_5&#10;G_5&#10;G#_5&#10;A_5&#10;A#_5&#10;B_5&#10;C_6&#10;C#_6&#10;D_6&#10;D#_6&#10;E_6&#10;F_6&#10;F#_6&#10;G_6&#10;G#_6&#10;A_6&#10;A#_6&#10;B_6&#10;C_7&#10;C#_7&#10;D_7&#10;D#_7&#10;E_7&#10;F_7&#10;F#_7&#10;G_7&#10;G#_7&#10;A_7&#10;A#_7&#10;B_7&#10;C_8&#10;C#_8&#10;D_8&#10;D#_8&#10;E_8&#10;F_8&#10;F#_8&#10;G_8"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="9 5 64 32"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="103" vstIndex="149" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="4" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="HINOTE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="High Key"
               componentMouseCursor="2" componentGroupName="keySpanGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="C_0&#10;C#_0&#10;D_0&#10;D#_0&#10;E_0&#10;F_0&#10;F#_0&#10;G_0&#10;G#_0&#10;A_0&#10;A#_0&#10;B_0&#10;C_1&#10;C#_1&#10;D_1&#10;D#_1&#10;E_1&#10;F_1&#10;F#_1&#10;G_1&#10;G#_1&#10;A_1&#10;A#_1&#10;B_1&#10;C_2&#10;C#_2&#10;D_2&#10;D#_2&#10;E_2&#10;F_2&#10;F#_2&#10;G_2&#10;G#_2&#10;A_2&#10;A#_2&#10;B_2&#10;C_3&#10;C#_3&#10;D_3&#10;D#_3&#10;E_3&#10;F_3&#10;F#_3&#10;G_3&#10;G#_3&#10;A_3&#10;A#_3&#10;B_3&#10;C_4&#10;C#_4&#10;D_4&#10;D#_4&#10;E_4&#10;F_4&#10;F#_4&#10;G_4&#10;G#_4&#10;A_4&#10;A#_4&#10;B_4&#10;C_5&#10;C#_5&#10;D_5&#10;D#_5&#10;E_5&#10;F_5&#10;F#_5&#10;G_5&#10;G#_5&#10;A_5&#10;A#_5&#10;B_5&#10;C_6&#10;C#_6&#10;D_6&#10;D#_6&#10;E_6&#10;F_6&#10;F#_6&#10;G_6&#10;G#_6&#10;A_6&#10;A#_6&#10;B_6&#10;C_7&#10;C#_7&#10;D_7&#10;D#_7&#10;E_7&#10;F_7&#10;F#_7&#10;G_7&#10;G#_7&#10;A_7&#10;A#_7&#10;B_7&#10;C_8&#10;C#_8&#10;D_8&#10;D#_8&#10;E_8&#10;F_8&#10;F#_8&#10;G_8"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="78 5 64 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="zoneLevelGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="0" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="500 155 116 296"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="157" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="155" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="MODVAMP3" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="2 77 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="zoneLevelGroup-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="0" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="938 155 64 296"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="158" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="25" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PRLOUD" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loudness"
               componentMouseCursor="2" componentGroupName="masterCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="6 7 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="159" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="24" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PANPOS" modulatorMin="0" modulatorValue="50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Pan"
               componentMouseCursor="2" componentGroupName="filterGroup-2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="6 7 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="5000" vstIndex="160" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="65" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgTuneChange"
             name="PTUNO" modulatorMin="-5000" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune"
               componentMouseCursor="2" componentGroupName="globalGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-5000" uiSliderMax="5000" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="FF4364FF" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiSliderIncDecButtonColour="ff4364ff"
               uiSliderIncDecTextColour="ff000000" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="5 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="161" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="75" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="TRANSPOSE" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Transpose"
               componentMouseCursor="2" componentGroupName="globalGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="80 118 64 50" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="162" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="26" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="V_LOUD" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Velocity"
               componentMouseCursor="2" componentGroupName="masterCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="75 7 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="163" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="93" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVAMP2" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="outputMod2Group"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 77 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="164" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="92" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVAMP1" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="2 77 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="165" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="90" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVPAN2" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-5" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="2 77 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="166" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="89" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVPAN1" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-4" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 77 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="167" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="91" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVPAN3" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="2 77 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="masterCtrlGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="filterGroup-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="0" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="9e9386" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 0 153 381" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="pgMasterOutGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="MASTER"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Master" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="ffe5d5c5"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="1006 61 328 393"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topLeft" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="4515ed3444000000a8000000a85ca200"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow11" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 33 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow12" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 105 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow13" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 179 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow14" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 253 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrowGrp1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="993 153 26 299"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modArrow1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiModulationArrowDown"
               uiType="uiImage" componentRectangle="99 128 16 27" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modArrow2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiModulationArrowDown"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="341 128 16 27"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="env1Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="ENVELOPE 1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Env 1" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffe5d5c5" uiGroupBackgroundColour2="fffcecdb"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="525 461 220 194"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="180" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="12" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ATTAK1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="A"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 42 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="181" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="13" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="DECAY1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="D"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="52 42 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="182" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="14" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="SUSTN1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="S"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="104 42 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="183" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="15" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="RELSE1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="R"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="156 42 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="184" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="130" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="AHOLD" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="25" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Attack Hold"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="161 111 52 43" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="185" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="17" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="V_REL1" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;rel"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="104 111 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="186" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="16" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="V_ATT1" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;att"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="52 111 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="187" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="19" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="K_DAR1" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="KeyScale"
               componentMouseCursor="2" componentGroupName="env1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 111 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="env2Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="ENVELOPE 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Env 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffe5d5c5" uiGroupBackgroundColour2="fffcecdb"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="750 461 220 194"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="188" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="20" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2R1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="R1"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="23 8 40 45"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="189" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="157" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2R2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="R2"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="65 8 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="190" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="21" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2R3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="R3"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="107 8 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="191" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="23" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2R4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="R4"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="149 8 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="192" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="156" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2L1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="bottom" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="L1"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="3" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="23 53 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="193" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="158" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2L2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="bottom" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="L2"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="3" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="65 53 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="194" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="22" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2L3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="bottom" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="L3"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="3" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="107 53 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="195" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="159" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="ENV2L4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="bottom" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="L4"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="3" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="149 53 40 45" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="196" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="24" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="V_ATT2" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;R1"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="104 111 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="197" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="25" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="V_REL2" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="V&gt;R4"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="156 111 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="198" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="27" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="K_DAR2" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="KeyScale"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="52 111 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="199" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="28" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="V_ENV2" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vel&gt;out"
               componentMouseCursor="2" componentGroupName="env2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 111 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lfo2Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffe5d5c5" uiGroupBackgroundColour2="fffcecdb"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="416 461 104 194"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="204" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="96" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVLFOD" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="3 86 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrowGrp5" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1326 154 21 299"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow51" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp5" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 105 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow52" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp5" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 179 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="208" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="7" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="FILFRQ" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Frequency"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 0 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="filterGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="FILTER"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Filter" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="9e9386" uiGroupBackgroundColour2="a3a3a3"
               uiGroupOutlineGradientType="0" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="629 141 208 310"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="127"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="209" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="8" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="K_FREQ" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Keyboard Track"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="141 78 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="210" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="153" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="MODVFILT3" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 77 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="211" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="151" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="MODVFILT1" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-7" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 77 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="212" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="152" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="MODVFILT2" modulatorMin="-50" modulatorValue="-50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 77 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="15" vstIndex="213" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="149" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="FILQ" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Resonance"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="15" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="140 0 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="65536" vstIndex="214"
             modulatorIsStatic="0" modulatorGlobalVariable="-1" modulatorMuteOnStart="0"
             modulatorMute="0" modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="filterXY" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="FILTER"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiXYSurfaceBgGradientType="1"
               uiXYSurfaceBackgroundColour1="ff6c9147" uiXYSurfaceBackgroundColour2="ff99ce65"
               uiXYSurfaceOutlineGradientType="0xff909090" uiXYSurfaceOutlineColour1="ff332f2b"
               uiXYSurfaceOutlineColour2="ff332f2b" uiXYSurfaceOutlineThickness="3"
               uiXYSurfaceCornerSize="5" uiXYSurfaceBgImageResource="-- None"
               componentRectangle="8 14 128 128" uiXYSurfaceBgImageLayout="0"
               uiXYSurfaceBgImageAlpha="255" uiXYSurfaceXTrackEnabled="1" uiXYSurfaceXTrackColour="ff1e2813"
               uiXYSurfaceXTrackThickness="2" uiXYSurfaceYTrackColour="ff1e2813"
               uiXYSurfaceYTrackThickness="2" uiXYSurfaceModSectionLocation="1"
               uiXYSurfaceModSectionHeight="16" uiXYSurfaceInfoLabelVisible="1"
               uiXYSurfaceInfoLabelLocation="bottomRight" uiXYSurfaceInfoLabelColour="ff1e2813"
               uiXYSurfaceInfoLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiXYSurfaceMaxX="127" uiXYSurfaceDestinationX="filterFreq" uiXYSurfaceMaxY="127"
               uiXYSurfaceDestinationY="filterReso" uiXYSurfaceGradientColour="0x10ffffff"
               uiXYSurfaceGradientGrain="8" uiXYSurfaceModulatorBgGradientType="None"
               uiXYSurfaceModulatorBgColour1="ffcc3824" uiXYSurfaceModulatorBgColour2="0xff900000"
               uiXYSurfaceModulatorOutlineGradientType="None" uiXYSurfaceModulatorOutlineColour1="ffcc3824"
               uiXYSurfaceModulatorOutlineColour2="0xffff0000" uiXYSurfaceModulatorOutlineThickness="1"
               uiXYSurfaceModulatorWidth="16" uiXYSurfaceModulatorHeight="16"
               uiXYSuraceXFlip="1" uiXYSuraceYFlip="0" uiXYSuraceShowRightClickMenu="1"
               uiXYSurfaceDestinationXGroupFilter="" uiXYSurfaceDestinationYGroupFilter=""
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiXYSurface"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgAmplifier" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="AMP"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Amplifier"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="ffffffff"
               uiGroupBackgroundColour1="9e9386" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="857 141 70 310"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrowGrp4" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="8e8478"
               uiGroupBackgroundColour1="c6b8a9" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="608 153 22 299"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow41" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp4" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 105 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow42" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp4" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 253 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow43" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp4" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 179 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow44" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp4" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 31 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrowGrp3" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="8e8478"
               uiGroupBackgroundColour1="c6b8a9" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="836 153 22 299"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow31" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp3" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 31 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow32" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp3" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 105 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow33" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp3" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 179 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow34" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp3" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 253 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrowGrp2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="8e8478"
               uiGroupBackgroundColour1="c6b8a9" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="926 153 21 299"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow21" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 31 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow22" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 105 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow23" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 179 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow24" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="0 253 21 14"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="tuneGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredLeft"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="TUNE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="1" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="28 141 157 310"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="5000" vstIndex="227" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="48" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgTuneChange"
             name="VTUNO1" modulatorMin="-5000" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-5000" uiSliderMax="5000" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="FF4364FF" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiSliderIncDecButtonColour="ff4364ff"
               uiSliderIncDecTextColour="ff000000" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="-6 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="228" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="46" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="LOVEL1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vlow"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="46 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="229" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="47" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="HIVEL1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vhigh"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="98 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="5000" vstIndex="230" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="72" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgTuneChange"
             name="VTUNO2" modulatorMin="-5000" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-5000" uiSliderMax="5000" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="FF4364FF" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiSliderIncDecButtonColour="ff4364ff"
               uiSliderIncDecTextColour="ff000000" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="-6 79 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="231" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="70" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="LOVEL2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vlow"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="46 79 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="232" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="71" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="HIVEL2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vhigh"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="98 79 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="5000" vstIndex="233" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="96" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgTuneChange"
             name="VTUNO3" modulatorMin="-5000" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-5000" uiSliderMax="5000" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="FF4364FF" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiSliderIncDecButtonColour="ff4364ff"
               uiSliderIncDecTextColour="ff000000" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="-6 153 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="234" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="94" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="LOVEL3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vlow"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="46 153 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="235" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="95" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="HIVEL3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vhigh"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="98 153 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="5000" vstIndex="236" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="120" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgTuneChange"
             name="VTUNO4" modulatorMin="-5000" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-5000" uiSliderMax="5000" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="FF4364FF" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiSliderIncDecButtonColour="ff4364ff"
               uiSliderIncDecTextColour="ff000000" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="-6 227 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="237" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="118" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="LOVEL4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vlow"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="46 227 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="238" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="119" modulatorCustomName="" modulatorCustomIndexGroup="1"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKgDefaultParamChange"
             name="HIVEL4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Vhigh"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="98 227 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="242" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="98" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="LFO2WAVE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Wave"
               componentMouseCursor="2" componentGroupName="lfo2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="TRIANGLE&#10;SAWTOOTH&#10;SQUARE&#10;RANDOM"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 5 88 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="243" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="29" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PANRAT" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Rate"
               componentMouseCursor="2" componentGroupName="lfo2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 42 42 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="244" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="30" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PANDEP" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Depth"
               componentMouseCursor="2" componentGroupName="lfo2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="54 42 42 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="245" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="31" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PANDEL" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Delay"
               componentMouseCursor="2" componentGroupName="lfo2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 111 42 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="246" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="102" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="lfo2trig" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Retrigger"
               componentMouseCursor="2" componentGroupName="lfo2Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="54 111 42 43" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bendGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="BEND"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffefe0d0" uiGroupBackgroundColour2="fffcecdb"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="975 567 228 88"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="24" vstIndex="247" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="39" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="B_PTCH" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Up"
               componentMouseCursor="2" componentGroupName="bendGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="24" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="24" vstIndex="248" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="73" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="B_PTCHD" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Down"
               componentMouseCursor="2" componentGroupName="bendGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="24" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="55 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="12" vstIndex="249" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="40" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="P_PTCH" modulatorMin="-12" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Aftertouch"
               componentMouseCursor="2" componentGroupName="bendGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-12" uiSliderMax="12" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="110 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="250" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="74" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="B_MODE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Type"
               componentMouseCursor="2" componentGroupName="bendGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="NORM&#10;HELD"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="174 5 42 43" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="portamentoGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="PORTAMENTO"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffe5d5c5" uiGroupBackgroundColour2="ffefe0d0"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="975 461 228 88"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="251" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="112" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PORTEN" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="portamentoGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="11 28 42 20" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="252" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="110" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PORTIME" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Rate"
               componentMouseCursor="2" componentGroupName="portamentoGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="55 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="253" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="111" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PORTYPE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Type"
               componentMouseCursor="2" componentGroupName="portamentoGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="RATE&#10;TIME"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="121 5 42 43" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="akaiLogo" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-22"
               componentMouseCursor="2" componentGroupName="editor" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiS2000Logo"
               componentLayerUid="23f0e4d8e3000000a8000000d008e208" componentRectangle="3 3 761 40"
               uiType="uiImage"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="254" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="97" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="LFO1WAVE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Wave"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="TRIANGLE&#10;SAWTOOTH&#10;SQUARE&#10;RANDOM"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 5 88 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="255" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="59" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="DESYNC" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sync"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="101 5 64 32" uiType="uiButton" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="257" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="95" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVLVOL" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-12" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="3 86 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="50" vstIndex="258" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="94" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODVLFOR" modulatorMin="-50" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Amount"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-50" uiSliderMax="50" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="3 86 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="259" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="35" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="LFODEL" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Delay"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="8 111 42 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="260" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="36" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MWLDEP" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod Wheel"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="101 42 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="261" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="34" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="LFODEP" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Depth"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="54 42 42 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="262" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="37" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PRSDEP" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Aftertouch"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="101 111 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="263" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="33" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="LFORAT" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Rate"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="8 42 42 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lfo1Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="LFO 1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 1" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffe5d5c5" uiGroupBackgroundColour2="fffcecdb"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="13 461 398 194"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;2;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="programCtrlGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="programCtrlGroup"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff000000" uiGroupOutlineColour2="ff8e8478"
               uiGroupBackgroundColour1="7f756c" uiGroupBackgroundColour2="0"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1014 88 311 50"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="0" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="PRNAME" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program"
               componentMouseCursor="2" componentGroupName="programCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="Digital-7;18;0;0;0;0;1;2"
               uiLabelText="PASCAL3     " uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="1" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="104 0 113 50" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="265" modulatorIsStatic="0"
             modulatorGlobalVariable="0" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgramChange"
             name="programSelector" modulatorMin="1" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="17" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program"
               componentMouseCursor="2" componentGroupName="programCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="1" uiSliderMax="1" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="2" uiSliderValueHeight="20"
               uiSliderValueWidth="25" uiSliderTrackCornerSize="3" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ffd6c393" uiSliderRotaryFillColour="ff332f2b"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="0 15 100 31" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="filterGroup-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="OUTPUT"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Filter" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="7f756c" uiGroupBackgroundColour2="a3a3a3"
               uiGroupOutlineGradientType="0" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1014 141 145 310"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="127"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="filterGroup-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="AUTO PAN"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Filter" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="7f756c" uiGroupBackgroundColour2="a3a3a3"
               uiGroupOutlineGradientType="0" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1181 141 145 310"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="127"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrowGrp3-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="LFO 2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO 2" uiGroupTextColour="0"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="8e8478"
               uiGroupBackgroundColour1="c6b8a9" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1159 154 22 299"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow22-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp3-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 105 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="arrow23-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="arrowGrp3-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="AkaiSignalArrow"
               uiType="uiImage" componentRectangle="0 179 21 14" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="266" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="79" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSAMP1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 26 64 43" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="masterCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 1" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="4 148 68 145" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="outputMod2Group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="masterCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 2" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="72 148 68 145"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="267" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="80" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSAMP2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="outputMod2Group"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="2 26 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-4" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="filterGroup-2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 1" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="72 2 68 145" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="268" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="76" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSPAN1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-4" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="2 26 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-5" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="filterGroup-2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 2" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="4 148 68 145" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="269" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="77" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSPAN2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-5" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 26 64 43" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-6" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="filterGroup-2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 3" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="72 148 68 145"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="270" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="78" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSPAN3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="2 26 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-7" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 1" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="2 148 68 145" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="271" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="84" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSFILT1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-7" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="2 26 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-8" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 2" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="70 148 68 145"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="272" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="85" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSFILT2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 26 64 43" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-9" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="filterGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 3" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="138 148 68 145"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               componentLayerUid="d7b8258473000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="273" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="86" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSFILT3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="2 26 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-10" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="kgAmplifier" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MOD 3" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1 74 68 145" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="274" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="88" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSAMP3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="2 26 64 43" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-11" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="RATE&#10;MOD"
               uiGroupTextColour="ff000000" uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="170 12 70 156"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-12" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="DEPTH&#10;MOD"
               uiGroupTextColour="ff000000" uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="245 12 70 156"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-13" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mod 1"
               componentMouseCursor="2" componentGroupName="lfo1Group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="DELAY&#10;MOD"
               uiGroupTextColour="ff000000" uiGroupOutlineColour1="726a62" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="110f0f0f" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="320 12 70 156"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="2" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="275" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="81" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSLFOT" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="3 37 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="276" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="82" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSLFOL" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-12" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="3 37 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="277" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="83" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="MODSLFOD" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="23" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Source"
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="NO SRC&#10;MODWHL&#10;BEND&#10;PRESS.&#10;EXTERN1&#10;VELOC.&#10;KEYBRD&#10;LFO1&#10;LFO2&#10;ENV1&#10;ENV2&#10;!MODWHL&#10;!BEND&#10;!EXTERN"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="3 37 64 43"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="globalGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="PROGRAM"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffe5d5c5" uiGroupBackgroundColour2="fffcecdb"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="1208 461 153 194"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="32" vstIndex="278" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="17" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="POLYPH" modulatorMin="1" modulatorValue="16">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Polyphony"
               componentMouseCursor="2" componentGroupName="globalGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="1" uiSliderMax="32" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="80 5 64 64"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="279" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="18" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="PRIORT" modulatorMin="0" modulatorValue="2">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Priority"
               componentMouseCursor="2" componentGroupName="globalGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="LOW&#10;HIGH&#10;NORM&#10;HOLD"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="80 74 64 32"
               componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="99" vstIndex="281" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="23" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onProgDefaultParamChange"
             name="STEREO" modulatorMin="0" modulatorValue="50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Out L/R"
               componentMouseCursor="2" componentGroupName="masterCtrlGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="99" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff000000" uiSliderRotaryFillColour="FF4364FF"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="ff000000"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="d7b8258473000000a8000000a0f70408"
               componentRectangle="6 79 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="2" vstIndex="282" modulatorIsStatic="0"
             modulatorGlobalVariable="2" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onToggleEditor"
             name="editorSelector" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearHorizontal"
               uiSliderMin="0" uiSliderMax="1" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="0xff0000ff"
               uiSliderRotaryFillColour="0xff0000ff" uiSliderThumbColour="ffea402a"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="ffd6c393" uiFixedSliderContent="PROGRAM&#10;SAMPLE&#10;DRUMMAP"
               uiSliderValueFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiSliderIncDecButtonColour="0xff0000ff"
               uiSliderIncDecTextColour="0xffffffff" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiGroupBackgroundColour1="220f0f0f" uiType="uiFixedSlider"
               componentRectangle="1289 5 64 50" componentLayerUid="23f0e4d8e3000000a8000000d008e208"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="65536" vstIndex="283"
             modulatorIsStatic="0" modulatorGlobalVariable="-1" modulatorMuteOnStart="1"
             modulatorMute="1" modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="waveEditor" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiWaveformColour="0xff000000"
               uiWaveformBackgroundColour1="ff6c9147" uiWaveformBackgroundColour2="ff99ce65"
               uiWaveformOutlineColour="0xff000000" uiWaveformOutlineThickness="1"
               uiWaveformSourceSamplesPerThumbnailSample="1" uiWaveFormVeritcalZoomFactor="1"
               uiWaveFormDrawSecondsStart="0" uiWaveFormDrawSecondsEnd="1" uiWaveFormThumbnailChangedCallback="-- None"
               uiWaveFormSourceChangedCallback="-- None" uiWaveFormFilesDroppedCallback="-- None"
               componentRectangle="368 86 990 200" componentLayerUid="17d5168673000000a8000000a0f70408"
               uiType="uiWaveform"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="28" vstIndex="284" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="samplerFileList" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="CAT-MEOW.W-R&#10;TRAIN.WAV -L&#10;DOG-BARK.W-R&#10;CASIO-MT-6-R&#10;CASIO-MT-6-L&#10;TRAIN.WAV -R&#10;KAWAI-K1R--L&#10;CLOSED-HI--L&#10;ALESIS-FUS-L&#10;E-MU-PROTE-L&#10;ALESIS-FUS-R&#10;DRILL.WAV -L&#10;ELECTRIC-B-R&#10;CAT-MEOW.W-L&#10;ELECTRIC-B-L&#10;LION-ROAR.-L&#10;DOOR-CLOSE-R&#10;BOWED-BASS-R&#10;E-MU-PROTE-R&#10;BOWED-BASS-L&#10;CLOSED-HI--R&#10;LION-ROAR.-R&#10;KAWAI-K1R--R&#10;SMACKIN     &#10;DOOR-CLOSE-L&#10;FLOWING-WA-R&#10;DRILL.WAV -R&#10;DOG-BARK.W-L&#10;FLOWING-WA-L"
               componentRectangle="25 95 313 467" uiListBoxRowHeight="22" uiListBoxBackgroundColour="dddddd"
               uiListBoxHighlightBgColour="77ffffff" uiListBoxHighlightFgColour="0xff000000"
               uiListBoxTextColour="0xff000000" uiListBoxFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1.1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1.1;3"
               uiListBoxOutline="0" uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="0xffffffff"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="0xffffffff" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="topLeft"
               uiListBoxMultipleSelection="0" uiListBoxItemClicked="-- None"
               uiListBoxItemDoubleClicked="loadWaveFile" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="17d5168673000000a8000000a0f70408"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="285" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="trim0" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="trimStart" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="0"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="0xff0000ff"
               uiSliderRotaryFillColour="0xff0000ff" uiSliderThumbColour="ffea402a"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiSliderIncDecButtonColour="0xff0000ff"
               uiSliderIncDecTextColour="0xffffffff" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="0" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" componentLayerUid="760b761f13010000a80000000827a507"
               componentRectangle="368 86 990 200" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="286" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="trim1" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="trimEnd" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-15"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="0"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0" uiSliderValueBgColour="0xffffffff"
               uiSliderRotaryOutlineColour="0xff0000ff" uiSliderRotaryFillColour="0xff0000ff"
               uiSliderThumbColour="ffcc3524" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="ffffff"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="760b761f13010000a80000000827a507"
               componentRectangle="368 86 990 200" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="288" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onTrimValueChange"
             name="SSTART" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Trim Start"
               componentMouseCursor="2" componentGroupName="sampleTrimGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="17d5168673000000a8000000a0f70408"
               componentRectangle="20 8 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="289" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="1" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onTrimValueChange"
             name="SMPEND" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Trim End"
               componentMouseCursor="2" componentGroupName="sampleTrimGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="20 80 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="SHNAME" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sample Name"
               componentMouseCursor="2" componentGroupName="sampleEditNameGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;20;0;0;0;0;1;3"
               uiLabelText="Label text" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="17d5168673000000a8000000a0f70408" componentRectangle="0 0 150 32"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="458" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleCopy" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Copy" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="165 15 88 32"
               componentLayerUid="17d5168673000000a8000000a0f70408" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="459" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onNormaliseSample"
             name="sampleNormalise" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Normalise"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="361 15 88 32" uiType="uiButton" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="460" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onExecuteSampleTrim"
             name="sampleTrim" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleTrimGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Execute" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="8 161 88 32"
               uiType="uiButton" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="461" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="SPTYPE" modulatorMin="0" modulatorValue="2">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="NO LOOPING&#10;LP IN RELEASE&#10;ONE-SHOT&#10;LP TO RELEASE"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="8 23 88 32" componentLayerUid="17d5168673000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="466" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onLoopRepaint"
             name="SLOCAT" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loop Start"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="20 80 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="467" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onLoopLengthRepaint"
             name="SLNGTH" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Loop Length"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="120 80 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="-1" vstIndex="468" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="LDWELL" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Hold"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="1" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff332f2b"
               uiSliderRotaryFillColour="ff4364ff" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiFixedSliderContent="" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueTextJustification="centred" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" uiType="uiFixedSlider"
               componentRectangle="224 8 64 64" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="469" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleCrossfade" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Crossfade"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="224 80 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="470" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="SHLTO" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune (cents)"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="1" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="120 8 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="471" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onReverseSample"
             name="sampleReverse" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Reverse"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Reverse" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="459 15 88 32"
               componentLayerUid="17d5168673000000a8000000a0f70408" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleLoopGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="LOOP"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="536 304 308 221"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleTrimGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="TRIM"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="392 304 104 221"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleResampleGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="RESAMPLE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1132 304 208 145"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="472" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="SSRATE" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Quality"
               componentMouseCursor="2" componentGroupName="sampleResampleGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="28 8 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="473" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleResampleBandwidth" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Bandwidth"
               componentMouseCursor="2" componentGroupName="sampleResampleGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="17d5168673000000a8000000a0f70408"
               componentRectangle="124 8 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="475" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onExecuteSampleResample"
             name="sampleResample" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Reverse"
               componentMouseCursor="2" componentGroupName="sampleResampleGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Execute" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="64 89 88 32"
               uiType="uiButton" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleTimestretchGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="TIMESTRETCH"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="884 304 208 221"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="476" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="stretch" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Stretch"
               componentMouseCursor="2" componentGroupName="sampleTimestretchGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="20 8 64 64"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="477" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onTimestretchTypeChange"
             name="sampleTimestretchType" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="19" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Type"
               componentMouseCursor="2" componentGroupName="sampleTimestretchGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="CYCLIC&#10;INTELL"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="104 8 88 52" componentLayerUid="17d5168673000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="478" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onExecuteSampleTimestretch"
             name="sampleTimestretch" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleTimestretchGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Execute" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="64 161 88 32"
               componentLayerUid="17d5168673000000a8000000a0f70408" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleTimestrIntellGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-21"
               componentMouseCursor="2" componentGroupName="sampleTimestretchGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 76 208 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="479" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleTimestretchCycleAuto" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Type"
               componentMouseCursor="2" componentGroupName="sampleTimestrCyclicGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="AUTO" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="8 21 88 32"
               uiType="uiButton" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="480" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleTimestretchQuality" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Quality"
               componentMouseCursor="2" componentGroupName="sampleTimestrIntellGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="17d5168673000000a8000000a0f70408"
               componentRectangle="20 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="481" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleTimestretchXfd" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Crossfade"
               componentMouseCursor="2" componentGroupName="sampleTimestrIntellGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff332f2b" uiSliderRotaryFillColour="ff4364ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="17d5168673000000a8000000a0f70408"
               componentRectangle="120 5 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleFileGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="FILE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="392 536 700 84"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="483" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleDelete" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Delete" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="263 15 88 32"
               uiType="uiButton" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="pgMasterOutGroup-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="SAMPLES"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Master" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="8 61 347 570" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="topLeft"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" componentLayerUid="b73cd8bf36010000a80000000827a507"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="pgMasterOutGroup-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="SAMPLE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Master" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="363 61 1000 570"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="topLeft" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="b73cd8bf36010000a80000000827a507"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="65536" vstIndex="485"
             modulatorIsStatic="0" modulatorGlobalVariable="-1" modulatorMuteOnStart="0"
             modulatorMute="0" modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleLoop" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-18"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiCustomResizedCallback="-- None"
               uiCustomPaintCallback="paintLoopStart" uiCustomPaintOverChildrenCallback="-- None"
               componentRectangle="368 86 990 200" uiCustomMouseDownCallback="-- None"
               uiCustomMouseUpCallback="-- None" uiCustomMouseEnterCallback="-- None"
               uiCustomMouseExitCallback="-- None" uiCustomMouseMoveCallback="-- None"
               uiCustomMouseDragCallback="-- None" uiCustomKeyDownCallback="-- None"
               uiCustomKeyStateChangedCallback="-- None" uiCustomMouseDoubleClickCallback="-- None"
               uiCustomMouseWheelMoveCallback="-- None" uiCustomStartDraggingCallback="-- None"
               uiCustomIsInterestedInDragSourceCallback="-- None" uiCustomItemDragEnterCallback="-- None"
               uiCustomItemDragMoveCallback="-- None" uiCustomItemDragExitCallback="-- None"
               uiCustomItemDroppedCallback="-- None" uiCustomDragAndDropTarget="0"
               uiCustomDragAndDropContainer="0" uiCustomDrawDragImageWhenOver="0"
               uiCustomAllowExternalDrags="0" uiCustomMouseDownGrabsFocus="0"
               uiCustomWantsKeyboardFocus="0" componentLayerUid="277d752313010000a80000000827a507"
               uiType="uiCustomComponent"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleTimestrCyclicGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-21"
               componentMouseCursor="2" componentGroupName="sampleTimestretchGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 76 208 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" componentLayerUid="17d5168673000000a8000000a0f70408"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleTimestretchCyclicTime" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Time"
               componentMouseCursor="2" componentGroupName="sampleTimestrCyclicGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Label text" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="17d5168673000000a8000000a0f70408" componentRectangle="104 5 88 45"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="486" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onExecuteSampleLoop"
             name="sampleLoopBtn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Execute" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="108 161 88 32"
               componentLayerUid="17d5168673000000a8000000a0f70408" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="487" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleLoopFind" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Copy"
               componentMouseCursor="2" componentGroupName="sampleLoopGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Find" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="209 161 88 32"
               uiType="uiButton" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1000" vstIndex="488" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="STUNO" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Tune"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="500" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff332f2b"
               uiSliderRotaryFillColour="ff4364ff" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiFixedSliderContent="-50.00&#10;-49.90&#10;-49.80&#10;-49.70&#10;-49.60&#10;-49.50&#10;-49.40&#10;-49.30&#10;-49.20&#10;-49.10&#10;-49.00&#10;-48.90&#10;-48.80&#10;-48.70&#10;-48.60&#10;-48.50&#10;-48.40&#10;-48.30&#10;-48.20&#10;-48.10&#10;-48.00&#10;-47.90&#10;-47.80&#10;-47.70&#10;-47.60&#10;-47.50&#10;-47.40&#10;-47.30&#10;-47.20&#10;-47.10&#10;-47.00&#10;-46.90&#10;-46.80&#10;-46.70&#10;-46.60&#10;-46.50&#10;-46.40&#10;-46.30&#10;-46.20&#10;-46.10&#10;-46.00&#10;-45.90&#10;-45.80&#10;-45.70&#10;-45.60&#10;-45.50&#10;-45.40&#10;-45.30&#10;-45.20&#10;-45.10&#10;-45.00&#10;-44.90&#10;-44.80&#10;-44.70&#10;-44.60&#10;-44.50&#10;-44.40&#10;-44.30&#10;-44.20&#10;-44.10&#10;-44.00&#10;-43.90&#10;-43.80&#10;-43.70&#10;-43.60&#10;-43.50&#10;-43.40&#10;-43.30&#10;-43.20&#10;-43.10&#10;-43.00&#10;-42.90&#10;-42.80&#10;-42.70&#10;-42.60&#10;-42.50&#10;-42.40&#10;-42.30&#10;-42.20&#10;-42.10&#10;-42.00&#10;-41.90&#10;-41.80&#10;-41.70&#10;-41.60&#10;-41.50&#10;-41.40&#10;-41.30&#10;-41.20&#10;-41.10&#10;-41.00&#10;-40.90&#10;-40.80&#10;-40.70&#10;-40.60&#10;-40.50&#10;-40.40&#10;-40.30&#10;-40.20&#10;-40.10&#10;-40.00&#10;-39.90&#10;-39.80&#10;-39.70&#10;-39.60&#10;-39.50&#10;-39.40&#10;-39.30&#10;-39.20&#10;-39.10&#10;-39.00&#10;-38.90&#10;-38.80&#10;-38.70&#10;-38.60&#10;-38.50&#10;-38.40&#10;-38.30&#10;-38.20&#10;-38.10&#10;-38.00&#10;-37.90&#10;-37.80&#10;-37.70&#10;-37.60&#10;-37.50&#10;-37.40&#10;-37.30&#10;-37.20&#10;-37.10&#10;-37.00&#10;-36.90&#10;-36.80&#10;-36.70&#10;-36.60&#10;-36.50&#10;-36.40&#10;-36.30&#10;-36.20&#10;-36.10&#10;-36.00&#10;-35.90&#10;-35.80&#10;-35.70&#10;-35.60&#10;-35.50&#10;-35.40&#10;-35.30&#10;-35.20&#10;-35.10&#10;-35.00&#10;-34.90&#10;-34.80&#10;-34.70&#10;-34.60&#10;-34.50&#10;-34.40&#10;-34.30&#10;-34.20&#10;-34.10&#10;-34.00&#10;-33.90&#10;-33.80&#10;-33.70&#10;-33.60&#10;-33.50&#10;-33.40&#10;-33.30&#10;-33.20&#10;-33.10&#10;-33.00&#10;-32.90&#10;-32.80&#10;-32.70&#10;-32.60&#10;-32.50&#10;-32.40&#10;-32.30&#10;-32.20&#10;-32.10&#10;-32.00&#10;-31.90&#10;-31.80&#10;-31.70&#10;-31.60&#10;-31.50&#10;-31.40&#10;-31.30&#10;-31.20&#10;-31.10&#10;-31.00&#10;-30.90&#10;-30.80&#10;-30.70&#10;-30.60&#10;-30.50&#10;-30.40&#10;-30.30&#10;-30.20&#10;-30.10&#10;-30.00&#10;-29.90&#10;-29.80&#10;-29.70&#10;-29.60&#10;-29.50&#10;-29.40&#10;-29.30&#10;-29.20&#10;-29.10&#10;-29.00&#10;-28.90&#10;-28.80&#10;-28.70&#10;-28.60&#10;-28.50&#10;-28.40&#10;-28.30&#10;-28.20&#10;-28.10&#10;-28.00&#10;-27.90&#10;-27.80&#10;-27.70&#10;-27.60&#10;-27.50&#10;-27.40&#10;-27.30&#10;-27.20&#10;-27.10&#10;-27.00&#10;-26.90&#10;-26.80&#10;-26.70&#10;-26.60&#10;-26.50&#10;-26.40&#10;-26.30&#10;-26.20&#10;-26.10&#10;-26.00&#10;-25.90&#10;-25.80&#10;-25.70&#10;-25.60&#10;-25.50&#10;-25.40&#10;-25.30&#10;-25.20&#10;-25.10&#10;-25.00&#10;-24.90&#10;-24.80&#10;-24.70&#10;-24.60&#10;-24.50&#10;-24.40&#10;-24.30&#10;-24.20&#10;-24.10&#10;-24.00&#10;-23.90&#10;-23.80&#10;-23.70&#10;-23.60&#10;-23.50&#10;-23.40&#10;-23.30&#10;-23.20&#10;-23.10&#10;-23.00&#10;-22.90&#10;-22.80&#10;-22.70&#10;-22.60&#10;-22.50&#10;-22.40&#10;-22.30&#10;-22.20&#10;-22.10&#10;-22.00&#10;-21.90&#10;-21.80&#10;-21.70&#10;-21.60&#10;-21.50&#10;-21.40&#10;-21.30&#10;-21.20&#10;-21.10&#10;-21.00&#10;-20.90&#10;-20.80&#10;-20.70&#10;-20.60&#10;-20.50&#10;-20.40&#10;-20.30&#10;-20.20&#10;-20.10&#10;-20.00&#10;-19.90&#10;-19.80&#10;-19.70&#10;-19.60&#10;-19.50&#10;-19.40&#10;-19.30&#10;-19.20&#10;-19.10&#10;-19.00&#10;-18.90&#10;-18.80&#10;-18.70&#10;-18.60&#10;-18.50&#10;-18.40&#10;-18.30&#10;-18.20&#10;-18.10&#10;-18.00&#10;-17.90&#10;-17.80&#10;-17.70&#10;-17.60&#10;-17.50&#10;-17.40&#10;-17.30&#10;-17.20&#10;-17.10&#10;-17.00&#10;-16.90&#10;-16.80&#10;-16.70&#10;-16.60&#10;-16.50&#10;-16.40&#10;-16.30&#10;-16.20&#10;-16.10&#10;-16.00&#10;-15.90&#10;-15.80&#10;-15.70&#10;-15.60&#10;-15.50&#10;-15.40&#10;-15.30&#10;-15.20&#10;-15.10&#10;-15.00&#10;-14.90&#10;-14.80&#10;-14.70&#10;-14.60&#10;-14.50&#10;-14.40&#10;-14.30&#10;-14.20&#10;-14.10&#10;-14.00&#10;-13.90&#10;-13.80&#10;-13.70&#10;-13.60&#10;-13.50&#10;-13.40&#10;-13.30&#10;-13.20&#10;-13.10&#10;-13.00&#10;-12.90&#10;-12.80&#10;-12.70&#10;-12.60&#10;-12.50&#10;-12.40&#10;-12.30&#10;-12.20&#10;-12.10&#10;-12.00&#10;-11.90&#10;-11.80&#10;-11.70&#10;-11.60&#10;-11.50&#10;-11.40&#10;-11.30&#10;-11.20&#10;-11.10&#10;-11.00&#10;-10.90&#10;-10.80&#10;-10.70&#10;-10.60&#10;-10.50&#10;-10.40&#10;-10.30&#10;-10.20&#10;-10.10&#10;-10.00&#10;-9.90&#10;-9.80&#10;-9.70&#10;-9.60&#10;-9.50&#10;-9.40&#10;-9.30&#10;-9.20&#10;-9.10&#10;-9.00&#10;-8.90&#10;-8.80&#10;-8.70&#10;-8.60&#10;-8.50&#10;-8.40&#10;-8.30&#10;-8.20&#10;-8.10&#10;-8.00&#10;-7.90&#10;-7.80&#10;-7.70&#10;-7.60&#10;-7.50&#10;-7.40&#10;-7.30&#10;-7.20&#10;-7.10&#10;-7.00&#10;-6.90&#10;-6.80&#10;-6.70&#10;-6.60&#10;-6.50&#10;-6.40&#10;-6.30&#10;-6.20&#10;-6.10&#10;-6.00&#10;-5.90&#10;-5.80&#10;-5.70&#10;-5.60&#10;-5.50&#10;-5.40&#10;-5.30&#10;-5.20&#10;-5.10&#10;-5.00&#10;-4.90&#10;-4.80&#10;-4.70&#10;-4.60&#10;-4.50&#10;-4.40&#10;-4.30&#10;-4.20&#10;-4.10&#10;-4.00&#10;-3.90&#10;-3.80&#10;-3.70&#10;-3.60&#10;-3.50&#10;-3.40&#10;-3.30&#10;-3.20&#10;-3.10&#10;-3.00&#10;-2.90&#10;-2.80&#10;-2.70&#10;-2.60&#10;-2.50&#10;-2.40&#10;-2.30&#10;-2.20&#10;-2.10&#10;-2.00&#10;-1.90&#10;-1.80&#10;-1.70&#10;-1.60&#10;-1.50&#10;-1.40&#10;-1.30&#10;-1.20&#10;-1.10&#10;-1.00&#10;-0.90&#10;-0.80&#10;-0.70&#10;-0.60&#10;-0.50&#10;-0.40&#10;-0.30&#10;-0.20&#10;-0.10&#10;0.00&#10;0.10&#10;0.20&#10;0.30&#10;0.40&#10;0.50&#10;0.60&#10;0.70&#10;0.80&#10;0.90&#10;1.00&#10;1.10&#10;1.20&#10;1.30&#10;1.40&#10;1.50&#10;1.60&#10;1.70&#10;1.80&#10;1.90&#10;2.00&#10;2.10&#10;2.20&#10;2.30&#10;2.40&#10;2.50&#10;2.60&#10;2.70&#10;2.80&#10;2.90&#10;3.00&#10;3.10&#10;3.20&#10;3.30&#10;3.40&#10;3.50&#10;3.60&#10;3.70&#10;3.80&#10;3.90&#10;4.00&#10;4.10&#10;4.20&#10;4.30&#10;4.40&#10;4.50&#10;4.60&#10;4.70&#10;4.80&#10;4.90&#10;5.00&#10;5.10&#10;5.20&#10;5.30&#10;5.40&#10;5.50&#10;5.60&#10;5.70&#10;5.80&#10;5.90&#10;6.00&#10;6.10&#10;6.20&#10;6.30&#10;6.40&#10;6.50&#10;6.60&#10;6.70&#10;6.80&#10;6.90&#10;7.00&#10;7.10&#10;7.20&#10;7.30&#10;7.40&#10;7.50&#10;7.60&#10;7.70&#10;7.80&#10;7.90&#10;8.00&#10;8.10&#10;8.20&#10;8.30&#10;8.40&#10;8.50&#10;8.60&#10;8.70&#10;8.80&#10;8.90&#10;9.00&#10;9.10&#10;9.20&#10;9.30&#10;9.40&#10;9.50&#10;9.60&#10;9.70&#10;9.80&#10;9.90&#10;10.00&#10;10.10&#10;10.20&#10;10.30&#10;10.40&#10;10.50&#10;10.60&#10;10.70&#10;10.80&#10;10.90&#10;11.00&#10;11.10&#10;11.20&#10;11.30&#10;11.40&#10;11.50&#10;11.60&#10;11.70&#10;11.80&#10;11.90&#10;12.00&#10;12.10&#10;12.20&#10;12.30&#10;12.40&#10;12.50&#10;12.60&#10;12.70&#10;12.80&#10;12.90&#10;13.00&#10;13.10&#10;13.20&#10;13.30&#10;13.40&#10;13.50&#10;13.60&#10;13.70&#10;13.80&#10;13.90&#10;14.00&#10;14.10&#10;14.20&#10;14.30&#10;14.40&#10;14.50&#10;14.60&#10;14.70&#10;14.80&#10;14.90&#10;15.00&#10;15.10&#10;15.20&#10;15.30&#10;15.40&#10;15.50&#10;15.60&#10;15.70&#10;15.80&#10;15.90&#10;16.00&#10;16.10&#10;16.20&#10;16.30&#10;16.40&#10;16.50&#10;16.60&#10;16.70&#10;16.80&#10;16.90&#10;17.00&#10;17.10&#10;17.20&#10;17.30&#10;17.40&#10;17.50&#10;17.60&#10;17.70&#10;17.80&#10;17.90&#10;18.00&#10;18.10&#10;18.20&#10;18.30&#10;18.40&#10;18.50&#10;18.60&#10;18.70&#10;18.80&#10;18.90&#10;19.00&#10;19.10&#10;19.20&#10;19.30&#10;19.40&#10;19.50&#10;19.60&#10;19.70&#10;19.80&#10;19.90&#10;20.00&#10;20.10&#10;20.20&#10;20.30&#10;20.40&#10;20.50&#10;20.60&#10;20.70&#10;20.80&#10;20.90&#10;21.00&#10;21.10&#10;21.20&#10;21.30&#10;21.40&#10;21.50&#10;21.60&#10;21.70&#10;21.80&#10;21.90&#10;22.00&#10;22.10&#10;22.20&#10;22.30&#10;22.40&#10;22.50&#10;22.60&#10;22.70&#10;22.80&#10;22.90&#10;23.00&#10;23.10&#10;23.20&#10;23.30&#10;23.40&#10;23.50&#10;23.60&#10;23.70&#10;23.80&#10;23.90&#10;24.00&#10;24.10&#10;24.20&#10;24.30&#10;24.40&#10;24.50&#10;24.60&#10;24.70&#10;24.80&#10;24.90&#10;25.00&#10;25.10&#10;25.20&#10;25.30&#10;25.40&#10;25.50&#10;25.60&#10;25.70&#10;25.80&#10;25.90&#10;26.00&#10;26.10&#10;26.20&#10;26.30&#10;26.40&#10;26.50&#10;26.60&#10;26.70&#10;26.80&#10;26.90&#10;27.00&#10;27.10&#10;27.20&#10;27.30&#10;27.40&#10;27.50&#10;27.60&#10;27.70&#10;27.80&#10;27.90&#10;28.00&#10;28.10&#10;28.20&#10;28.30&#10;28.40&#10;28.50&#10;28.60&#10;28.70&#10;28.80&#10;28.90&#10;29.00&#10;29.10&#10;29.20&#10;29.30&#10;29.40&#10;29.50&#10;29.60&#10;29.70&#10;29.80&#10;29.90&#10;30.00&#10;30.10&#10;30.20&#10;30.30&#10;30.40&#10;30.50&#10;30.60&#10;30.70&#10;30.80&#10;30.90&#10;31.00&#10;31.10&#10;31.20&#10;31.30&#10;31.40&#10;31.50&#10;31.60&#10;31.70&#10;31.80&#10;31.90&#10;32.00&#10;32.10&#10;32.20&#10;32.30&#10;32.40&#10;32.50&#10;32.60&#10;32.70&#10;32.80&#10;32.90&#10;33.00&#10;33.10&#10;33.20&#10;33.30&#10;33.40&#10;33.50&#10;33.60&#10;33.70&#10;33.80&#10;33.90&#10;34.00&#10;34.10&#10;34.20&#10;34.30&#10;34.40&#10;34.50&#10;34.60&#10;34.70&#10;34.80&#10;34.90&#10;35.00&#10;35.10&#10;35.20&#10;35.30&#10;35.40&#10;35.50&#10;35.60&#10;35.70&#10;35.80&#10;35.90&#10;36.00&#10;36.10&#10;36.20&#10;36.30&#10;36.40&#10;36.50&#10;36.60&#10;36.70&#10;36.80&#10;36.90&#10;37.00&#10;37.10&#10;37.20&#10;37.30&#10;37.40&#10;37.50&#10;37.60&#10;37.70&#10;37.80&#10;37.90&#10;38.00&#10;38.10&#10;38.20&#10;38.30&#10;38.40&#10;38.50&#10;38.60&#10;38.70&#10;38.80&#10;38.90&#10;39.00&#10;39.10&#10;39.20&#10;39.30&#10;39.40&#10;39.50&#10;39.60&#10;39.70&#10;39.80&#10;39.90&#10;40.00&#10;40.10&#10;40.20&#10;40.30&#10;40.40&#10;40.50&#10;40.60&#10;40.70&#10;40.80&#10;40.90&#10;41.00&#10;41.10&#10;41.20&#10;41.30&#10;41.40&#10;41.50&#10;41.60&#10;41.70&#10;41.80&#10;41.90&#10;42.00&#10;42.10&#10;42.20&#10;42.30&#10;42.40&#10;42.50&#10;42.60&#10;42.70&#10;42.80&#10;42.90&#10;43.00&#10;43.10&#10;43.20&#10;43.30&#10;43.40&#10;43.50&#10;43.60&#10;43.70&#10;43.80&#10;43.90&#10;44.00&#10;44.10&#10;44.20&#10;44.30&#10;44.40&#10;44.50&#10;44.60&#10;44.70&#10;44.80&#10;44.90&#10;45.00&#10;45.10&#10;45.20&#10;45.30&#10;45.40&#10;45.50&#10;45.60&#10;45.70&#10;45.80&#10;45.90&#10;46.00&#10;46.10&#10;46.20&#10;46.30&#10;46.40&#10;46.50&#10;46.60&#10;46.70&#10;46.80&#10;46.90&#10;47.00&#10;47.10&#10;47.20&#10;47.30&#10;47.40&#10;47.50&#10;47.60&#10;47.70&#10;47.80&#10;47.90&#10;48.00&#10;48.10&#10;48.20&#10;48.30&#10;48.40&#10;48.50&#10;48.60&#10;48.70&#10;48.80&#10;48.90&#10;49.00&#10;49.10&#10;49.20&#10;49.30&#10;49.40&#10;49.50&#10;49.60&#10;49.70&#10;49.80&#10;49.90&#10;50.00"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderIncDecButtonColour="ff4364ff"
               uiSliderIncDecTextColour="ff000000" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="17d5168673000000a8000000a0f70408"
               componentRectangle="631 4 64 64" uiType="uiFixedSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="103" vstIndex="489" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="SPITCH" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Pitch"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffd6c393"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="ff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="FFD6C393"
               uiComboMenuFontHighlightedColour="0xff000000" uiComboContent="C_0&#10;C#_0&#10;D_0&#10;D#_0&#10;E_0&#10;F_0&#10;F#_0&#10;G_0&#10;G#_0&#10;A_0&#10;A#_0&#10;B_0&#10;C_1&#10;C#_1&#10;D_1&#10;D#_1&#10;E_1&#10;F_1&#10;F#_1&#10;G_1&#10;G#_1&#10;A_1&#10;A#_1&#10;B_1&#10;C_2&#10;C#_2&#10;D_2&#10;D#_2&#10;E_2&#10;F_2&#10;F#_2&#10;G_2&#10;G#_2&#10;A_2&#10;A#_2&#10;B_2&#10;C_3&#10;C#_3&#10;D_3&#10;D#_3&#10;E_3&#10;F_3&#10;F#_3&#10;G_3&#10;G#_3&#10;A_3&#10;A#_3&#10;B_3&#10;C_4&#10;C#_4&#10;D_4&#10;D#_4&#10;E_4&#10;F_4&#10;F#_4&#10;G_4&#10;G#_4&#10;A_4&#10;A#_4&#10;B_4&#10;C_5&#10;C#_5&#10;D_5&#10;D#_5&#10;E_5&#10;F_5&#10;F#_5&#10;G_5&#10;G#_5&#10;A_5&#10;A#_5&#10;B_5&#10;C_6&#10;C#_6&#10;D_6&#10;D#_6&#10;E_6&#10;F_6&#10;F#_6&#10;G_6&#10;G#_6&#10;A_6&#10;A#_6&#10;B_6&#10;C_7&#10;C#_7&#10;D_7&#10;D#_7&#10;E_7&#10;F_7&#10;F#_7&#10;G_7&#10;G#_7&#10;A_7&#10;A#_7&#10;B_7&#10;C_8&#10;C#_8&#10;D_8&#10;D#_8&#10;E_8&#10;F_8&#10;F#_8&#10;G_8"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="557 15 64 32"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgZone1Group-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centredLeft"
               componentLabelHeight="74" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3" componentVisibleName="Z&#10;O&#10;N&#10;E&#10;1"
               componentMouseCursor="2" componentGroupName="keyGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="939 74 46 74" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" componentLayerUid="4515ed3444000000a8000000a85ca200"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="kgZone1Group-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centredLeft"
               componentLabelHeight="74" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3" componentVisibleName="Z&#10;O&#10;N&#10;E&#10;1"
               componentMouseCursor="2" componentGroupName="keyGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="939 222 46 74"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="0" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="4515ed3444000000a8000000a85ca200"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lcdLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="lcdLabelGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="6c9147"
               uiLabelTextColour="ff1e2813" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topLeft" uiLabelFitFont="0" uiLCDLabelFont="0"
               uiLCDLabelFontHeight="18" uiLabelText="Transfer samples to sampler by pressing &quot;Launch&quot;"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="0"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLCDLabel" componentRectangle="5 5 304 40" componentLayerUid="23f0e4d8e3000000a8000000d008e208"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lcdLabelGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff6c9147" uiGroupOutlineColour2="ff6c9147"
               uiGroupBackgroundColour1="ff6c9147" uiGroupBackgroundColour2="ff99ce65"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="10 10 314 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="65536" vstIndex="490"
             modulatorIsStatic="0" modulatorGlobalVariable="-1" modulatorMuteOnStart="0"
             modulatorMute="0" modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="wavSelector" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiFileListBoxBgColour="ffffff"
               uiFileListLineColour="0xff000000" uiFileListIndentSize="16" uiFileListFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1.1;3"
               uiFileListTextColour="0xff000000" uiFileListHighlightTextColour="0xff000000"
               uiFileListHighlightBgColour="99ffffff" uiFileListBoxHighlightFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1.1;3"
               uiFileListBoxOutline="0" uiFileListBoxOutlineColour="0xff000000"
               uiFileListBoxVScrollBgColour="33ffffff" uiFileListBoxVScrollThumbColour="0xffababab"
               uiFileListBoxVScrollTrackColour="33ffffff" uiFileListBoxHScrollBgColour="33ffffff"
               uiFileListBoxHScrollThumbColour="0xffababab" uiFileListBoxHScrollTrackColour="33ffffff"
               uiFileListOpenButtonVisible="0" uiFileListFileClicked="onSampleSelected"
               uiFileListFileDoubleClicked="onSampleDoubleClicked" uiFileListCurrentRoot="C:\Users\pcg"
               componentRectangle="0 1 334 407" componentTabId="0" componentTabName="sampleTabs"
               uiType="uiFileListBox" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-13-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="475 81 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="fileSystemGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="SAMPLES"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="8 61 347 465" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-9-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="475 219 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-5-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="475 357 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-1-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="475 495 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-14-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="613 81 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-10-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="613 219 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-6-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="613 357 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-2-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="613 495 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-15-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="751 81 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-11-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="751 219 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-7-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="751 357 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-3-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="751 495 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-16-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="889 81 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-12-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="889 219 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-8-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="889 357 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMap-4-grp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="889 495 128 128"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="491" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onSampleAssign"
             name="assignSample" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="&gt;" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="371 311 88 32"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="492" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onDrumMapClear"
             name="clearSamples" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffd6c393"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="&lt;&lt;" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="371 359 88 32"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="493" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="13" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-13" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-13-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="0.5"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="494" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="15" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-15" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-15-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="495" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="16" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-16" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-16-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="496" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="12" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-12" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-12-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="497" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="11" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-11" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-11-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="498" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="10" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-10" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-10-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="499" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="9" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-9" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-9-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="500" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="8" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-8" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-8-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="501" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="7" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-7" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-7-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="502" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="6" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-6" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-6-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="503" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="5" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-5" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-5-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="504" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="4" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-4-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="505" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="3" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-3-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="506" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="2" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="DOOR-CLOSE-L&#10;DOOR-CLOSE-R"
               componentMouseCursor="2" componentGroupName="drumMap-2-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff0000ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="507" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="1" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="BOWED-BASS-L&#10;BOWED-BASS-R"
               componentMouseCursor="2" componentGroupName="drumMap-1-grp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="508" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="14" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="drumMap-14" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="topLeft"
               componentLabelHeight="128" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="drumMap-14-grp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="0" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="onPadSelected" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff93b4ff"
               uiButtonColourOff="ff93b4ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="0 0 128 128"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="settingsGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="TRANSFER"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="1033 61 334 570"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="s2kDiePathGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="S2kDie path"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="FF7A7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 172 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="s2kDiePathLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="s2kDiePathGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="C:\ctrlr\s2kdie\s2kdie.php" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" componentRectangle="5 5 221 26"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="509" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onS2kDiePathChange"
             name="s2kDiePathButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="s2kDiePathGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Browse" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="231 5 88 26"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="workPathGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Work Path"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="FF7A7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 232 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="workPathLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="workPathGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="C:\ctrlr\temp\s2k" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="1" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="5 5 221 26" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="510" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onWorkPathChange"
             name="workPathButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="workPathGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Browse" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="231 5 88 26"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="2" vstIndex="511" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onTransferMethodChange"
             name="transferMethod" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Wav Save Method"
               componentMouseCursor="2" componentGroupName="transferMethodGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffc6b8a9"
               uiComboOutlineColour="ff332f2b" uiComboTextColour="0xff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1.5;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1.5;3" uiComboButtonColour="ff332f2b"
               uiComboBgColour="ffc6b8a9" uiComboMenuBackgroundColour="ffc6b8a9"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="ffd6c393"
               uiComboMenuFontHighlightedColour="ff000000" uiComboContent="Floppy Disc=0&#10;HxC Floppy Emulator=1&#10;MIDI=2"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ffc6b8a9"
               uiComboButtonGradientColour2="ff332f2b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               componentRectangle="40 5 250 26" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="transferMethodGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Wave Transfer Method"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="FF7A7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 292 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="512" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onTransferSamples"
             name="transferSamples" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="LAUNCH" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="10 70 70 32"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="513" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onLoadOs"
             name="loadOsButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="LOAD OS"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="173 70 70 32" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="514" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onCancelProcess"
             name="cancelTransfer" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="1"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="CANCEL" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="91 70 70 32"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="hxcPathGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="HxC Emulator Path"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="FF7A7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 352 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="hxcPathLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="hxcPathGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="C:\ctrlr\tools\HxCFloppyEmulator_soft_beta\Windows\hxcfe.exe"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="1" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" componentRectangle="5 5 221 26"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="515" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onHxcPathChange"
             name="hxcPathButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="hxcPathGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Browse" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="231 5 88 26"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="setfdprmPathGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Setfdprm Path"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="1"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="FF7A7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 412 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="setfdprmPathLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="setfdprmPathGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="1" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="5 5 221 26" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="516" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onSetfdprmPathChange"
             name="setfdprmPathButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="setfdprmPathGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Browse" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="231 5 88 26"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="517" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onRslist"
             name="receiveSampleList" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="RSLIST" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="254 70 70 32"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="createProgramGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Create Program"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff7a7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 472 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="519" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onCreateProgram"
             name="createProgramBtn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="createProgramGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="Create Prog"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="231 5 88 26" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMapRangeGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="20" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;2;3" componentVisibleName="RANGE"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0" uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="8 526 347 105"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="drumMapSelectionLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="drumMapRangeGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;20;0;0;0;0;1.3;3"
               uiLabelText="KeyGroup 2" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" componentRectangle="8 9 100 30"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="103" vstIndex="520" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="1" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onDrumMapKeyChange"
             name="drumMapLowKey" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Low Key"
               componentMouseCursor="2" componentGroupName="drumMapRangeGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="ff4364ff" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiFixedSliderContent="C_0&#10;C#_0&#10;D_0&#10;D#_0&#10;E_0&#10;F_0&#10;F#_0&#10;G_0&#10;G#_0&#10;A_0&#10;A#_0&#10;B_0&#10;C_1&#10;C#_1&#10;D_1&#10;D#_1&#10;E_1&#10;F_1&#10;F#_1&#10;G_1&#10;G#_1&#10;A_1&#10;A#_1&#10;B_1&#10;C_2&#10;C#_2&#10;D_2&#10;D#_2&#10;E_2&#10;F_2&#10;F#_2&#10;G_2&#10;G#_2&#10;A_2&#10;A#_2&#10;B_2&#10;C_3&#10;C#_3&#10;D_3&#10;D#_3&#10;E_3&#10;F_3&#10;F#_3&#10;G_3&#10;G#_3&#10;A_3&#10;A#_3&#10;B_3&#10;C_4&#10;C#_4&#10;D_4&#10;D#_4&#10;E_4&#10;F_4&#10;F#_4&#10;G_4&#10;G#_4&#10;A_4&#10;A#_4&#10;B_4&#10;C_5&#10;C#_5&#10;D_5&#10;D#_5&#10;E_5&#10;F_5&#10;F#_5&#10;G_5&#10;G#_5&#10;A_5&#10;A#_5&#10;B_5&#10;C_6&#10;C#_6&#10;D_6&#10;D#_6&#10;E_6&#10;F_6&#10;F#_6&#10;G_6&#10;G#_6&#10;A_6&#10;A#_6&#10;B_6&#10;C_7&#10;C#_7&#10;D_7&#10;D#_7&#10;E_7&#10;F_7&#10;F#_7&#10;G_7&#10;G#_7&#10;A_7&#10;A#_7&#10;B_7&#10;C_8&#10;C#_8&#10;D_8&#10;D#_8&#10;E_8&#10;F_8&#10;F#_8&#10;G_8"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderIncDecButtonColour="0xff0000ff"
               uiSliderIncDecTextColour="0xffffffff" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               componentRectangle="111 10 64 64" uiType="uiFixedSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="103" vstIndex="521" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="2" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onDrumMapKeyChange"
             name="drumMapHighKey" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="High Key"
               componentMouseCursor="2" componentGroupName="drumMapRangeGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValueHeight="12" uiSliderValuePosition="4"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="ffffff" uiSliderRotaryOutlineColour="ff000000"
               uiSliderRotaryFillColour="ff4364ff" uiSliderThumbColour="0xffff0000"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderTrackColour="0xff0f0f0f" uiFixedSliderContent="C_0&#10;C#_0&#10;D_0&#10;D#_0&#10;E_0&#10;F_0&#10;F#_0&#10;G_0&#10;G#_0&#10;A_0&#10;A#_0&#10;B_0&#10;C_1&#10;C#_1&#10;D_1&#10;D#_1&#10;E_1&#10;F_1&#10;F#_1&#10;G_1&#10;G#_1&#10;A_1&#10;A#_1&#10;B_1&#10;C_2&#10;C#_2&#10;D_2&#10;D#_2&#10;E_2&#10;F_2&#10;F#_2&#10;G_2&#10;G#_2&#10;A_2&#10;A#_2&#10;B_2&#10;C_3&#10;C#_3&#10;D_3&#10;D#_3&#10;E_3&#10;F_3&#10;F#_3&#10;G_3&#10;G#_3&#10;A_3&#10;A#_3&#10;B_3&#10;C_4&#10;C#_4&#10;D_4&#10;D#_4&#10;E_4&#10;F_4&#10;F#_4&#10;G_4&#10;G#_4&#10;A_4&#10;A#_4&#10;B_4&#10;C_5&#10;C#_5&#10;D_5&#10;D#_5&#10;E_5&#10;F_5&#10;F#_5&#10;G_5&#10;G#_5&#10;A_5&#10;A#_5&#10;B_5&#10;C_6&#10;C#_6&#10;D_6&#10;D#_6&#10;E_6&#10;F_6&#10;F#_6&#10;G_6&#10;G#_6&#10;A_6&#10;A#_6&#10;B_6&#10;C_7&#10;C#_7&#10;D_7&#10;D#_7&#10;E_7&#10;F_7&#10;F#_7&#10;G_7&#10;G#_7&#10;A_7&#10;A#_7&#10;B_7&#10;C_8&#10;C#_8&#10;D_8&#10;D#_8&#10;E_8&#10;F_8&#10;F#_8&#10;G_8"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderIncDecButtonColour="0xff0000ff"
               uiSliderIncDecTextColour="0xffffffff" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               componentRectangle="172 10 64 64" uiType="uiFixedSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="loadFloppyImageGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Load Floppy Image"
               componentMouseCursor="2" componentGroupName="settingsGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="FF7A7269" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 112 324 50" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="1" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="loadFloppyImageLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="loadFloppyImageGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="18.800000000000001"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="5 5 128 26" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="522" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onFloppyImageCleared"
             name="clearFloppyImageButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="loadFloppyImageGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Clear" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="231 5 88 26"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleTabs" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="fileSystemGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiTabsCurrentTabChanged=""
               uiTabsDepth="24" uiTabsOutlineThickness="0" uiTabsFrontTabOutline="1"
               uiTabsTabOutline="1" uiTabsIndentThickness="0" uiTabsOrientation="0"
               uiTabsFrontTabFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiTabsTabFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3"
               uiTabsOutlineGlobalColour="0x00000000" uiTabsOutlineGlobalBackgroundColour="ff909090"
               uiTabsOutlineTabColour="ff909090" uiTabsTextTabColour="0xff909090"
               uiTabsFrontTabOutlineColour="0xff000000" uiTabsFrontTabTextColour="0xff000000"
               uiTabsAddTab="0" uiTabsRemoveTab="0" componentRectangle="5 5 337 432"
               uiTabsCurrentTab="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiTabs">
      <uiTabsTab uiTabsTabIndex="0" uiTabsTabName="Filesystem" uiTabsTabContentBackgroundColour="ffff00"
                 uiTabsTabBackgroundColour="88dddddd" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
      <uiTabsTab uiTabsTabIndex="1" uiTabsTabName="Sampler" uiTabsTabContentBackgroundColour="ffff00"
                 uiTabsTabBackgroundColour="44dddddd" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
    </component>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="noSamplesLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-15"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
               uiLabelText="Please request sample list..." uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="17d5168673000000a8000000a0f70408" componentRectangle="25 95 200 40"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="noSamplesLabel-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-15"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
               uiLabelText="Please request sample list..." uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="sampleTabs" uiType="uiLabel"
               componentRectangle="5 0 200 40" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="28" vstIndex="523" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="samplerFileList-1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="CAT-MEOW.W-R&#10;TRAIN.WAV -L&#10;DOG-BARK.W-R&#10;CASIO-MT-6-R&#10;CASIO-MT-6-L&#10;TRAIN.WAV -R&#10;KAWAI-K1R--L&#10;CLOSED-HI--L&#10;ALESIS-FUS-L&#10;E-MU-PROTE-L&#10;ALESIS-FUS-R&#10;DRILL.WAV -L&#10;ELECTRIC-B-R&#10;CAT-MEOW.W-L&#10;ELECTRIC-B-L&#10;LION-ROAR.-L&#10;DOOR-CLOSE-R&#10;BOWED-BASS-R&#10;E-MU-PROTE-R&#10;BOWED-BASS-L&#10;CLOSED-HI--R&#10;LION-ROAR.-R&#10;KAWAI-K1R--R&#10;SMACKIN     &#10;DOOR-CLOSE-L&#10;FLOWING-WA-R&#10;DRILL.WAV -R&#10;DOG-BARK.W-L&#10;FLOWING-WA-L"
               componentRectangle="5 5 313 400" uiListBoxRowHeight="22" uiListBoxBackgroundColour="dddddd"
               uiListBoxHighlightBgColour="77ffffff" uiListBoxHighlightFgColour="0xff000000"
               uiListBoxTextColour="0xff000000" uiListBoxFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1.1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1.1;3"
               uiListBoxOutline="0" uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="0xffffffff"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="0xffffffff" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="topLeft"
               uiListBoxMultipleSelection="0" uiListBoxItemClicked="-- None"
               uiListBoxItemDoubleClicked="-- None" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentTabId="1" componentTabName="sampleTabs"
               uiType="uiListBox" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="524" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onFloppyImageSelected"
             name="loadFloppyImageButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="loadFloppyImageGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Browse" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="138 5 88 26"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="525" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onResetPadKeyRange"
             name="defaultDrumMapButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="drumMapRangeGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="Reset" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="236 9 103 30"
               uiType="uiButton" componentLayerUid="cb9205925e010000a8000000c8a9c407"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="526" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onResetAllKeyRanges"
             name="resetAllDrumMapButton" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="drumMapRangeGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="Reset All"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="236 46 103 30" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="100" vstIndex="527" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="floppyUsageBar" modulatorMin="0" modulatorValue="59">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="100" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="0xffffffff"
               uiSliderRotaryOutlineColour="0xff0000ff" uiSliderRotaryFillColour="0xff0000ff"
               uiSliderThumbColour="FF99CE65" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               componentRectangle="575 630 242 24" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="floppyUsageLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-15"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Floppy usage:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" componentRectangle="475 630 90 24"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="numFloppiesLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-16"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="# Floppies to be transfered: 1" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" componentRectangle="827 630 190 24"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="528" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onPanelLoaded"
             name="initPanel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-14"
               componentMouseCursor="2" componentGroupName="editor" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="INIT" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="1181 11 88 32"
               uiType="uiButton" componentLayerUid="23f0e4d8e3000000a8000000d008e208"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleImageGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff332f2b"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;2;3" componentVisibleName="WAVEFORM"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="5" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff332f2b" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ff9e9386" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="1132 475 208 145"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="17d5168673000000a8000000a0f70408" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="529" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sampleImageBtn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Load Waveform File"
               componentMouseCursor="2" componentGroupName="sampleImageGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="ff4364ff" uiButtonTextColourOn="ff332f2b"
               uiButtonTextColourOff="ff332f2b" uiButtonContent="Load Waveform File"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="28 89 150 32" componentLayerUid="17d5168673000000a8000000a0f70408"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="editWaveformPathLbl" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="sampleImageGrp"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="C:\ctrlr\s2kdie\s2kdie.php" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="5 25 198 26" componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="sampleEditNameGrp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Sample Name"
               componentMouseCursor="2" componentGroupName="sampleFileGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="a3a3a3" uiGroupOutlineColour2="ffffff"
               uiGroupBackgroundColour1="a3a3a3" uiGroupBackgroundColour2="ffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="5 1 150 46" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="17d5168673000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="programCreateNameLbl" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="createProgramGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ccffffff"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Pascal3" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="1" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="cb9205925e010000a8000000c8a9c407" componentRectangle="5 5 221 26"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="16" vstIndex="530" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onKeyGroupNumChange"
             name="numKeyGroups" modulatorMin="1" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="# Key Groups"
               componentMouseCursor="2" componentGroupName="drumMapRangeGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="1" uiSliderMax="16" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="30" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="0xff0000ff" uiSliderRotaryFillColour="0xff0000ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff4364ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="cb9205925e010000a8000000c8a9c407"
               componentRectangle="8 46 100 30" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="5" vstIndex="531" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="test1"
             name="testCombo" modulatorMin="0" modulatorValue="4">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Test 1"
               componentMouseCursor="2" componentGroupName="editor" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="0xff0000ff"
               uiComboOutlineColour="0xff0000ff" uiComboTextColour="0xff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="0xff0000ff"
               uiComboBgColour="0xffffffff" uiComboMenuBackgroundColour="0xfff0f0f0"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Step 1&#10;Step 2&#10;Step 3&#10;Step 4&#10;Step 5&#10;Step OFF"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="1077 6 88 32"
               componentLayerUid="23f0e4d8e3000000a8000000d008e208"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="2" vstIndex="532" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onLogLevelChanged"
             name="logLevelCombo" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Log Level"
               componentMouseCursor="2" componentGroupName="editor" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="0xff0000ff"
               uiComboOutlineColour="0xff0000ff" uiComboTextColour="0xff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="0xff0000ff"
               uiComboBgColour="0xffffffff" uiComboMenuBackgroundColour="0xfff0f0f0"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="WARN=1&#10;INFO=2&#10;FINE=3"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="23f0e4d8e3000000a8000000d008e208"
               componentRectangle="975 7 88 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="533" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="onPanelStateChanged"
             name="panelStateBtn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="editor" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff4364ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="DEV=1&#10;PROD=2"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="914 11 50 32" uiType="uiButton" componentLayerUid="23f0e4d8e3000000a8000000d008e208"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="VTUNO1-LBL" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="ffffff"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="00.00" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="d7b8258473000000a8000000a0f70408" componentRectangle="-6 57 64 12"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="VTUNO2-LBL" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="ffffff"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="00.00" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="-6 131 64 12" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="VTUNO3-LBL" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="ffffff"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="00.00" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="-6 205 64 12" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="VTUNO4-LBL" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="tuneGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="ffffff"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="00.00" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="-6 279 64 12" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="PTUNO-LBL" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="globalGroup" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="ffffff"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="00.00" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="5 57 64 12" componentLayerUid="d7b8258473000000a8000000a0f70408"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="534" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="test2"
             name="modulator-2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="editor" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff"
               uiButtonColourOff="0xff4364ff" uiButtonTextColourOn="0xff000000"
               uiButtonTextColourOff="0xff454545" uiButtonContent="Test 2" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="852 10 50 32"
               componentLayerUid="23f0e4d8e3000000a8000000d008e208" uiType="uiButton"/>
  </modulator>
  <panelCustomData/>
</panel>
